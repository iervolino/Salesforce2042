<apex:page contentType="text/html; charset=UTF-8" standardController="MentorCourseGroup__c" standardStylesheets="false">
<apex:outputText escape="false" value="{!"<!DOCTYPE html>"}"/>
<html>
<head>
    <link href="{!$Resource.profile}/images/favicon.ico" rel="SHORTCUT ICON"/>
    <apex:stylesheet value="{!URLFOR($Resource.extjs_v420, 'resources/css/ext-all.css')}"/> 
    <script type="text/javascript" charset="utf-8" src="{!$Resource.extjs_v420}/ext-all.js"/>
   
    <apex:includeScript value="/soap/ajax/29.0/connection.js"/>
    <script type="text/javascript" charset="utf-8" src="{!$Resource.WGUMonkeyFix}" id="WGUMonkeyFix"></script>
    
    <script type="text/javascript" >
        //This is a work-around due to the session id not populating automatically like it should
        sforce.connection.init("{!$Api.Session_ID}","/services/Soap/u/29.0");
    </script>
    
    <style type="text/css">
        .x-grid-dirty-cell { background-image: none; }
    </style>
</head>
<body>    
    <div id="divSaveCourse" />
    <br/>
    <div id="extContentDiv" />
    
    <script type="text/javascript" >
        Ext.Loader.setConfig({enabled: true});
        Ext.Loader.setPath('Ext.ux', '{!$Resource.extjs_v420}/examples/ux');
        Ext.require([
            'Ext.*',
            'Ext.ux.RowExpander',
            'Ext.ux.CheckColumn'
        ]);
        Ext.ns("Ext.WGU");
        
        var groupHoursCallId = -1;
        var tempHours=null;
        
        //ArryStore for day of week drop downs. Currently uses a three character day code for the underlying data.
        var dayStore = new Ext.data.ArrayStore({
                fields: ['value', 'text'],
                data: [
                    ['MON', 'Monday'],
                    ['TUE', 'Tuesday'],
                    ['WED', 'Wednesday'],
                    ['THU', 'Thursday'],
                    ['FRI', 'Friday'],
                    ['SAT', 'Saturday'],
                    ['SUN', 'Sunday']
                ]
            });
        
        //ArrayStore for hour of the day drop downs. Currently uses a two digit 12-hour format.
        var hourStore = new Ext.data.ArrayStore({
                fields: ['value', 'text'],
                data: [
                    ['01', '01'],
                    ['02', '02'],
                    ['03', '03'],
                    ['04', '04'],
                    ['05', '05'],
                    ['06', '06'],
                    ['07', '07'],
                    ['08', '08'],
                    ['09', '09'],
                    ['10', '10'],
                    ['11', '11'],
                    ['12', '12']
                ]
            });
        
        //ArrayStore for minute of the hour drop downs. Currently uses 15 minute increments.
        var minStore = new Ext.data.ArrayStore({
                fields: ['value', 'text'],
                data: [
                    ['00', '00'],
                    ['15', '15'],
                    ['30', '30'],
                    ['45', '45']
                ]
            });
        
        //ArrayStore for time zone drop downs. Currently only has continental US time zones.
        var zoneStore = new Ext.data.ArrayStore({
                fields: ['value', 'text'],
                data: [
                    ['-5', 'EST'],
                    ['-6', 'CST'],
                    ['-7', 'MST'],
                    ['-8', 'PST']
                ]
            });
        
        //Data model for office hours    
        Ext.define('ShiftHoursModel',
        {
            extend  : 'Ext.data.Model',   
            fields  : 
            [
                {name: 'StartDay', type: 'string'},
                {name: 'StartHour', type: 'string'},
                {name: 'StartMin', type: 'string'},
                {name: 'StartM', type: 'string'},
                {name: 'EndDay', type: 'string'},
                {name: 'EndHour', type: 'string'},
                {name: 'EndMin', type: 'string'},
                {name: 'EndM', type: 'string'},
                {name: 'TimeZone', type: 'string'}
            ]
        });
        
        var shiftHoursStore = Ext.create('Ext.data.Store',
        {
            model : 'ShiftHoursModel',
            proxy :
            {
                type: 'memory',
                autoSync: true,
                reader:
                {
                    type: 'json',
                    root: 'Records'
                }
            },
            remoteSort: false
        });
        
        //Data model for the grid panel
        Ext.define('CourseGroupModel', 
        { 
            extend  : 'Ext.data.Model',   
            fields  : 
            [ 
                {name: 'Id', mapping: 'Id', type: 'string'},
                {name: 'CourseNumber__c', mapping: 'CourseNumber__c', type: 'string'},
                {name: 'Hours__c', mapping: 'Hours__c', type: 'string'},
                {name: 'dummyHours', defaultValue: 'Click here to view and edit group office hours', type: 'string'},
                {name: 'CourseGroupPhone__c', mapping: 'CourseGroupPhone__c', type: 'string'},
                {name: 'GroupEmail__c', mapping: 'GroupEmail__c', type: 'string'},
                {name: 'MentorList', defaultValue: '', type: 'string'}
            ]
        });
        
        //Data store for the grid
        var courseGroupStore = Ext.create('Ext.data.Store',
        {
            model : 'CourseGroupModel',
            proxy :
            {
                type: 'memory',
                autoSync: true,
                reader:
                {
                    type: 'json',
                    root: 'Records'
                }
            },
            remoteSort: false,
            sorters:
            [{
                property: 'CourseNumber__c',
                direction: 'ASC'
            }]
        });        
        
        //Creates the form for entering new course groups
        var newAssignForm = Ext.create('Ext.form.Panel',
        {
            title: 'Add New Course Group',
            width: 1000,
            layout: 'column',
            defaultType: 'textfield',
            items: [
            {
                name: 'inputCourseNumber',
                fieldLabel: 'Course Number',
                labelAlign: 'left',
                labelWidth: 88,
                padding: '3 3 3 3',
                width: 140,
                minLength: 4,
                maxLength: 5,
                allowBlank: false
            },
            {
                name: 'inputGroupHours',
                fieldLabel: 'Group Hours',
                labelAlign: 'left',
                labelWidth: 72,
                padding: '3 3 3 3',
                columnWidth: 0.28,
                value: 'Click here to view and edit',
                listeners:
                {
                    focus: function(inputGroupHours, focusObj, eOpts)
                    {
                        groupHoursCallId = -1;
                        hourEntryWindow.show();
                    }
                }
            },
            {
                xtype: 'hiddenfield',
                name: 'hiddenGroupHours',
                maxLength: 32768
            },
            {
                name: 'inputGroupPhone',
                fieldLabel: 'Group Phone',
                labelAlign: 'left',
                labelWidth: 76,
                padding: '3 3 3 3',
                columnWidth: 0.29
            },
            {
                name: 'inputGroupEmail',
                fieldLabel: 'Group Email',
                labelAlign: 'left',
                labelWidth: 68,
                padding: '3 3 3 3',
                columnWidth: 0.43,
                vtype: 'email'
            }],
            buttons: [
            {
                text: 'Save Course Group',
                handler: function()
                {
                    var form = this.up('form').getForm();
                    
                    if (form.isValid())
                    {
                        //Query to determine if the course group already exists
                        sforce.connection.query("select ID from MentorCourseGroup__c where CourseNumber__c='" + form.findField("inputCourseNumber").getValue() + "'",
                            function(result)
                            {
                                result.size *= 1;
                                result.done = result.done == "true";
                                result.records = !Ext.isArray(result.records)? (result.size>0?[result.records]:[]): result.records;
                                
                                //Only proceed if no course group matches are found
                                if (result.records.length==0) 
                                {
                                    //Create a new MentorCourseGroup__c and populate required fields
                                    var saveCourseObj = new sforce.SObject("MentorCourseGroup__c");
                                    saveCourseObj.CourseNumber__c=form.findField("inputCourseNumber").getValue();
                                    saveCourseObj.Hours__c=form.findField("hiddenGroupHours").getValue();
                                    saveCourseObj.CourseGroupPhone__c=form.findField("inputGroupPhone").getValue();
                                    saveCourseObj.GroupEmail__c=form.findField("inputGroupEmail").getValue();
                                    
                                    //These fields are required in Oracle so we populate them with default values here but do not otherwise use them.
                                    saveCourseObj.About__c='';
                                    saveCourseObj.GroupingActive__c=true;
                                    
                                    try
                                    {
                                        //Query for the WGUCourse__c ID that belongs to the course number
                                        saveCourseObj.WGUCourse__c=sforce.connection.query("select ID from WGUCourse__c where name='" + form.findField("inputCourseNumber").getValue() + "' limit 1").records.Id;
                                        
                                        //Insert the Course Group
                                        var temp=sforce.connection.create([saveCourseObj]);
                                        
                                        //Add new record to the store
                                        if (temp[0].success)
                                        {
                                            saveCourseObj.Id=temp[0].id;
                                            courseGroupStore.loadRawData([saveCourseObj], true);
                                        }
                                        
                                        //Clear the entry fields
                                        form.reset();
                                    }
                                    catch(e)
                                    {
                                        //Show an error dialogue if the course number is not valid
                                        Ext.MessageBox.show({
                                            title:'Mentor Course Group Error',
                                            msg: 'The provided course number is invalid!',
                                            buttons: Ext.Msg.OK,
                                            icon: Ext.Msg.ERROR
                                        });
                                    }
                                }
                                else
                                {
                                    //Show an error dialogue if the course assignment already exists
                                    Ext.MessageBox.show({
                                        title:'Mentor Course Group Error',
                                        msg: 'The course group already exists for this course number!',
                                        buttons: Ext.Msg.OK,
                                        icon: Ext.Msg.ERROR
                                    });
                                }
                            });
                    }
                }
            },
            {
                text: 'Clear',
                handler: function()
                {
                    //Clears the form values
                    this.up('form').getForm().reset();
                }
            }]
        });
        
        //Create the course group grid
        var courseGroupGrid = Ext.create('Ext.grid.Panel',
        {
            title: 'Existing Course Groups',
            store: courseGroupStore,
            columns:
            [
                {
                    xtype: 'gridcolumn',
                    header: 'Course Number',
                    dataIndex: 'CourseNumber__c',
                    width: 100,
                    sortable: true,
                    hideable: false,
                    menuDisabled: true
                },
                {
                    xtype: 'gridcolumn',
                    header: 'Hours',
                    dataIndex: 'dummyHours',
                    width: 230,
                    sortable: false,
                    hideable: false,
                    menuDisabled: true,
                        editor: {
                            xtype: 'textfield',
                            listeners:
                            {
                                focus: function(inputGroupHours, focusObj, eOpts)
                                {
                                    hourEntryWindow.show();
                                }
                            }
                        }
                },
                {
                    xtype: 'gridcolumn',
                    header: 'Group Phone',
                    dataIndex: 'CourseGroupPhone__c',
                    width: 150,
                    sortable: false,
                    hideable: false,
                    menuDisabled: true,
                        editor: {
                            xtype: 'textfield'
                        }
                },
                {
                    xtype: 'gridcolumn',
                    header: 'Group Email',
                    dataIndex: 'GroupEmail__c',
                    flex: 1,
                    sortable: false,
                    hideable: false,
                    menuDisabled: true,
                        editor: {
                            xtype: 'textfield',
                            vtype: 'email'
                        }
                },
                {
                    xtype: 'actioncolumn',
                    width: 25,
                    sortable: false,
                    hideable: false,
                    menuDisabled: true,
                    items: [{
                        icon: '{!$Resource.profile}/images/delete.png',
                        tooltip: 'Delete',
                        handler: function(grid, rowIndex, colIndex)
                        {
                            //Show a dialog asking confirmation of course group deletion
                            Ext.MessageBox.confirm('Confirm Delete','You are about to delete a course group.<br/>Do you want to proceed?',
                                function(btn)
                                {
                                    //If the user selects the "yes" button on the dialog delete the course group
                                    if (btn=='yes')
                                    {
                                        sforce.connection.deleteIds([grid.getStore().getAt(rowIndex).get('Id')]);
                                        
                                        grid.getStore().removeAt(rowIndex);
                                    }
                                });
                        }
                    }]
                }
            ],
            width: 1000,
            height: 600,
            renderTo: 'extContentDiv',
            selType: 'rowmodel',
            plugins: [
                {
                    ptype: 'rowexpander',
                    rowBodyTpl: [
                        '<b>Mentors assigned to the course:</b> {MentorList}'
                    ]
                },
                Ext.create('Ext.grid.plugin.RowEditing', {clicksToEdit: 1})
            ],
            listeners:
            {
                //beforeedit event is used here to prevent the edit view from displaying if the user clicks the delete button
                beforeedit: function (grid, e, eOpts)
                {
                    //Set the call ID to the row firing the before edit event
                    groupHoursCallId = e.rowIdx;
                    tempHours=courseGroupStore.getAt(e.rowIdx).get("Hours__c");
                    
                    if (e.column.xtype=='actioncolumn' || e.colIdx==0)
                    {
                        return false;
                    }
                    
                    return true;
                },                
                edit: function(editor, e, eOpts)
                {
                    //Create a MentorCourseGroup__c object with all data needed to update the group record
                    var CourseGroupObj = new sforce.SObject("MentorCourseGroup__c");
                    CourseGroupObj.Id = e.store.getAt(e.rowIdx).get('Id');
                    CourseGroupObj.Hours__c = tempHours;
                    CourseGroupObj.CourseGroupPhone__c = e.record.data.CourseGroupPhone__c;
                    CourseGroupObj.GroupEmail__c = e.record.data.GroupEmail__c;
                    
                    //Update the object in Salesforce
                    sforce.connection.update([CourseGroupObj]);
                    
                    //Update hours in the store
                    e.store.getAt(e.rowIdx).set('Hours__c', tempHours);
                }
            }
        });         
        
        //Creates the form for entering mentor office hours
        var hourEntryForm = new Ext.form.FormPanel(
        {
            title: 'Add New Shift Block',
            frame: false,
            width: 595,
            height: 115,
            layout:
            {
                type: 'table',
                columns: 5
            },
            defaultType: 'combo',
            items: [
                {
                    name: 'StartDay',
                    fieldLabel: 'Start Day',
                    labelAlign: 'left',
                    labelWidth: 60,
                    labelPad: 2,
                    width: 160,
                    padding: '3 3 1 3',
                    store: dayStore,
                    displayField: 'text',
                    valueField: 'value',
                    value: 'MON',
                    editable: false
                },
                {
                    name: 'StartHour',
                    fieldLabel: 'Start Hour',
                    labelAlign: 'left',
                    labelWidth: 65,
                    labelPad: 2,
                    width: 110,
                    padding: '3 3 1 3',
                    store: hourStore,
                    displayField: 'text',
                    valueField: 'value',
                    value: '01',
                    editable: false
                },
                {
                    name: 'StartMin',
                    fieldLabel: 'Start Minute',
                    labelAlign: 'left',
                    labelWidth: 75,
                    labelPad: 2,
                    width: 120,
                    padding: '3 3 1 3',
                    store: minStore,
                    displayField: 'text',
                    valueField: 'value',
                    value: '00',
                    editable: false
                },
                {
                    name: 'StartM',
                    padding: '3 3 1 3',
                    xtype: 'combo',
                    width: 50,
                    store: new Ext.data.ArrayStore({
                        fields: ['value', 'text'],
                        data: [
                            ['AM', 'AM'],
                            ['PM', 'PM']
                        ]
                    }),
                    displayField: 'text',
                    valueField: 'value',
                    value: 'AM',
                    editable: false
                },
                {
                    name: 'TimeZone',
                    width: 50,
                    padding: '3 3 1 3',
                    store: zoneStore,
                    displayField: 'text',
                    valueField: 'value',
                    value: '-7',
                    editable: false
                },
                {
                    name: 'EndDay',
                    fieldLabel: 'End Day',
                    labelAlign: 'left',
                    labelWidth: 60,
                    labelPad: 2,
                    width: 160,
                    padding: '1 3 3 3',
                    store: dayStore,
                    displayField: 'text',
                    valueField: 'value',
                    value: 'MON',
                    editable: false
                },
                {
                    name: 'EndHour',
                    fieldLabel: 'End Hour',
                    labelAlign: 'left',
                    labelWidth: 65,
                    labelPad: 2,
                    width: 110,
                    padding: '1 3 3 3',
                    store: hourStore,
                    displayField: 'text',
                    valueField: 'value',
                    value: '01',
                    editable: false
                },
                {
                    name: 'EndMin',
                    fieldLabel: 'End Minute',
                    labelAlign: 'left',
                    labelWidth: 75,
                    labelPad: 2,
                    width: 120,
                    padding: '1 3 3 3',
                    store: minStore,
                    displayField: 'text',
                    valueField: 'value',
                    value: '00',
                    editable: false
                },
                {
                    name: 'EndM',
                    padding: '1 3 3 3',
                    xtype: 'combo',
                    width: 50,
                    store: new Ext.data.ArrayStore({
                        fields: ['value', 'text'],
                        data: [
                            ['AM', 'AM'],
                            ['PM', 'PM']
                        ]
                    }),
                    displayField: 'text',
                    valueField: 'value',
                    value: 'AM',
                    editable: false
                }
            ],
            buttons: [
                {
                    text: 'Add Block',
                    handler: function()
                    {
                        var form = this.up('form').getForm();
                    
                        if(form.isValid())
                        {
                            if (shiftHoursGrid.getStore().getCount()<30)
                            {
                                //Adds the hours set in the form to the data store
                                shiftHoursGrid.getStore().add(Ext.create('ShiftHoursModel', 
                                    {
                                        StartDay: form.findField("StartDay").getValue(),
                                        StartHour: form.findField("StartHour").getValue(),
                                        StartMin: form.findField("StartMin").getValue(),
                                        StartM: form.findField("StartM").getValue(),
                                        EndDay: form.findField("EndDay").getValue(),
                                        EndHour: form.findField("EndHour").getValue(),
                                        EndMin: form.findField("EndMin").getValue(),
                                        EndM: form.findField("EndM").getValue(),
                                        TimeZone: form.findField("TimeZone").getValue()
                                    }));
                            }
                            else
                            {
                                //Prompts that the maximum number of shifts have been created if the store contains 330 or more records
                                Ext.MessageBox.show({
                                        title:'Mentor Course Group Error',
                                        msg: 'The maximum number of shifts allowed (30) have been created!',
                                        buttons: Ext.Msg.OK,
                                        icon: Ext.Msg.ERROR
                                    });
                            }
                        }
                    }
                },
                {
                    text: 'Clear',
                    handler: function()
                    {
                        //Clears any entered values
                        this.up('form').getForm().reset();
                    }
                }
            ]
        });
        
        var shiftHoursGrid = new Ext.grid.Panel(
        {
            title: "Group's In Office Shifts",
            store: shiftHoursStore,
            columns:
            [
                {
                    xtype: 'gridcolumn',
                    header: 'Start Day',
                    dataIndex: 'StartDay',
                    width: 70,
                    sortable: true,
                    hideable: false,
                    menuDisabled: true,
                    renderer: function(value)
                    {
                        //Custom renderer ensures the full day name is displayed instead of the underlying abbreviation
                        return dayStore.findRecord('value', value).get('text');
                    },
                    editor: {
                        xtype: 'combo',
                        store: dayStore,
                        displayField: 'text',
                        valueField: 'value',
                        value: 'MON',
                        editable: false
                    }
                },
                {
                    xtype: 'gridcolumn',
                    header: 'Start Hour',
                    dataIndex: 'StartHour',
                    width: 60,
                    sortable: true,
                    hideable: false,
                    menuDisabled: true,
                    editor: {
                        xtype: 'combo',
                        store: hourStore,
                        displayField: 'text',
                        valueField: 'value',
                        value: '01',
                        editable: false
                    }
                },
                {
                    xtype: 'gridcolumn',
                    header: 'Start Minute',
                    dataIndex: 'StartMin',
                    width: 70,
                    sortable: true,
                    hideable: false,
                    menuDisabled: true,
                    editor: {
                        xtype: 'combo',
                        store: minStore,
                        displayField: 'text',
                        valueField: 'value',
                        value: '00',
                        editable: false
                    }
                },
                {
                    xtype: 'gridcolumn',
                    header: 'AM/PM',
                    dataIndex: 'StartM',
                    width: 45,
                    sortable: false,
                    hideable: false,
                    menuDisabled: true,
                    editor: {
                        xtype: 'combo',
                        store: new Ext.data.ArrayStore({
                            fields: ['value', 'text'],
                            data: [
                                ['AM', 'AM'],
                                ['PM', 'PM']
                            ]
                        }),
                        displayField: 'text',
                        valueField: 'value',
                        value: 'AM',
                        editable: false
                    }
                },
                {
                    xtype: 'gridcolumn',
                    header: 'End Day',
                    dataIndex: 'EndDay',
                    width: 70,
                    sortable: true,
                    hideable: false,
                    menuDisabled: true,
                    renderer: function(value)
                    {
                        //Custom renderer ensures the full day name is displayed instead of the underlying abbreviation
                        return dayStore.findRecord('value', value).get('text');
                    },
                    editor: {
                        xtype: 'combo',
                        store: dayStore,
                        displayField: 'text',
                        valueField: 'value',
                        value: 'MON',
                        editable: false
                    }
                },
                {
                    xtype: 'gridcolumn',
                    header: 'End Hour',
                    dataIndex: 'EndHour',
                    width: 60,
                    sortable: true,
                    hideable: false,
                    menuDisabled: true,
                    editor: {
                        xtype: 'combo',
                        store: hourStore,
                        displayField: 'text',
                        valueField: 'value',
                        value: '01',
                        editable: false
                    }
                },
                {
                    xtype: 'gridcolumn',
                    header: 'End Minute',
                    dataIndex: 'EndMin',
                    width: 65,
                    sortable: true,
                    hideable: false,
                    menuDisabled: true,
                    editor: {
                        xtype: 'combo',
                        store: minStore,
                        displayField: 'text',
                        valueField: 'value',
                        value: '00',
                        editable: false
                    }
                },
                {
                    xtype: 'gridcolumn',
                    header: 'AM/PM',
                    dataIndex: 'EndM',
                    width: 45,
                    sortable: false,
                    hideable: false,
                    menuDisabled: true,
                    editor: {
                        xtype: 'combo',
                        store: new Ext.data.ArrayStore({
                            fields: ['value', 'text'],
                            data: [
                                ['AM', 'AM'],
                                ['PM', 'PM']
                            ]
                        }),
                        displayField: 'text',
                        valueField: 'value',
                        value: 'AM',
                        editable: false
                    }
                },
                {
                    xtype: 'gridcolumn',
                    header: 'Time Zone',
                    dataIndex: 'TimeZone',
                    width: 65,
                    sortable: true,
                    hideable: false,
                    menuDisabled: true,
                    renderer: function(value)
                    {
                        //Custom renderer ensures the time zone abbreviation is displayed instead of the underlying offset value
                        return zoneStore.findRecord('value', value).get('text');
                    },
                    editor: {
                        xtype: 'combo',
                        store: zoneStore,
                        displayField: 'text',
                        valueField: 'value',
                        value: '-7',
                        editable: false
                    }
                },
                {
                    xtype: 'actioncolumn',
                    width: 25,
                    sortable: false,
                    hideable: false,
                    menuDisabled: true,
                    items: [{
                        icon: '{!$Resource.profile}/images/delete.png',
                        tooltip: 'Delete',
                        handler: function(grid, rowIndex, colIndex)
                        {
                            shiftHoursStore.removeAt(rowIndex);
                        }
                    }]
                }
            ],
            width: 595,
            height: 200,
            selType: 'rowmodel',
            plugins: [
                Ext.create('Ext.grid.plugin.RowEditing', {
                    clicksToEdit: 1,
                    triggerEvent: 'cellclick'
                })
            ],
            listeners:
            {
                //beforeedit event is used here to prevent the edit view from displaying if the user clicks the delete button
                beforeedit: function (grid, e, eOpts)
                {
                    return e.column.xtype!=='actioncolumn';
                }
            }
        });
        
        //Pop-up window that holds the group hours entry form
        var hourEntryWindow = new Ext.Window(
        {
            name: 'HourEntryWindow',
            title: 'Group Hours Entry',
            closable: false,
            width: 605,
            height: 380,
            plain: true,
            layout: 'vbox',
            items: [hourEntryForm, shiftHoursGrid],
            listeners:
            {
                beforeshow: function()
                {
                    if (groupHoursCallId==-1)
                    {
                        //Retrieve any existing hours entered in the add course form
                        parseStoreHours(newAssignForm.getForm().findField("hiddenGroupHours").getValue());
                    }
                    else
                    {
                        //Retrieve hours entered in the existing course grid
                        parseStoreHours(courseGroupStore.getAt(groupHoursCallId).get("Hours__c"));
                    }
                }
            },
            buttons: [
                {
                    text: 'Save Hours',
                    handler: function()
                    {
                        //Create a JSON string of the shift hours only if the shift hours store contains one or more entries
                        if(shiftHoursGrid.store.getCount()>0)
                        {
                            //Create a string to start building the JSON for the hours
                            var hourString = '{"Shift":[';
                            
                            //Iterate through each shift in the shift hours store and add them to the string
                            for(var i=0; i<shiftHoursGrid.store.getCount(); i++)
                            {
                                hourString=hourString+'{"Start":{"Day":"'+shiftHoursGrid.store.getAt(i).get('StartDay')+'","Time":"'+convert12to24(shiftHoursGrid.store.getAt(i).get('StartHour'), shiftHoursGrid.store.getAt(i).get('StartM'))+shiftHoursGrid.store.getAt(i).get('StartMin')+'"},"End":{"Day":"'+shiftHoursGrid.store.getAt(i).get('EndDay')+'","Time":"'+convert12to24(shiftHoursGrid.store.getAt(i).get('EndHour'), shiftHoursGrid.store.getAt(i).get('EndM'))+shiftHoursGrid.store.getAt(i).get('EndMin')+'"},"Offset":"'+shiftHoursGrid.store.getAt(i).get('TimeZone')+'"},';
                            }
                            
                            //Removes the final comma from the string created by the loop
                            hourString=hourString.substring(0, hourString.length-1);
                            
                            hourString+=']}';
                            
                            if (groupHoursCallId==-1)
                            {
                                //Assign hours to the add course form
                                newAssignForm.getForm().findField("hiddenGroupHours").setValue(hourString);
                                newAssignForm.getForm().findField("inputGroupHours").setValue("Hours set. Click to edit.");
                            }
                            else
                            {
                                tempHours=hourString;
                                courseGroupGrid.editingPlugin.completeEdit();
                            }
                        }
                        
                        //Clears any entered values and hides the window
                        hourEntryForm.getForm().reset();
                        groupHoursCallId=-1;
                        shiftHoursStore.removeAll();
                        hourEntryWindow.hide();
                    }
                },
                {
                    text: 'Cancel',
                    handler: function()
                    {
                        //Clears any entered values and hides the window
                        hourEntryForm.getForm().reset();
                        if (groupHoursCallId!=-1)
                        {
                            courseGroupGrid.editingPlugin.cancelEdit();
                        }
                        groupHoursCallId=-1;
                        shiftHoursStore.removeAll();
                        hourEntryWindow.hide();
                    }
                }
            ]
        });
            
        Ext.onReady(function()
        {
            newAssignForm.render('divSaveCourse');
        
            //Clear any data currently in the data store
            courseGroupStore.removeAll(true);
            
            courseGroupGrid.getView().setLoading('Retrieving Course Group List...');
            
            //Query for all MentorCourseGroup__c objects
            sforce.connection.query("select ID, CourseNumber__c, Hours__c, CourseGroupPhone__c, GroupEmail__c from MentorCourseGroup__c",
                function(result)
                {
                    result.size *= 1;
                    result.done = result.done == "true";
                    result.records = !Ext.isArray(result.records)? (result.size>0?[result.records]:[]): result.records;
                
                    courseGroupStore.loadRawData(result.records, true);
                    
                    courseGroupGrid.getView().setLoading(false);
                });
            
            //Handler for row expand event
            courseGroupGrid.view.on('expandbody',
                function (rowNode, record, expandRow, eOpts)
                {
                    //If the Mentor List for the row is empty query for all Mentors assigned to the course
                    if (record.data.MentorList=="")
                    {
                        courseGroupGrid.getView().setLoading('Retrieving List of Mentors...');
                        
                        sforce.connection.query("select ID, CourseNumber__c, Mentor__r.Name from MentorCourseAssignment__c where (ActiveChk__c='True' or ActiveChk__c='1') and CourseNumber__c='"+record.data.CourseNumber__c+"'",
                            function(result)
                            {
                                result.size *= 1;
                                result.done = result.done == "true";
                                result.records = !Ext.isArray(result.records)? (result.size>0?[result.records]:[]): result.records;
                            
                                if (result.records.length>0) 
                                {
                                    //Loop through the returned records and add them to the data model
                                    for (var x=0; x<result.records.length; x++) 
                                    {
                                        var thisRecord=result.records[x];
                                        
                                        //If the record contains a valid Mentor user reference populate the mentor name in the Mentor List
                                        if (thisRecord.Mentor__r!=null)
                                        {
                                            var existingRecord=courseGroupStore.getAt(record.index);
                                            
                                            if (existingRecord.data.MentorList=="")
                                            {
                                                existingRecord.set('MentorList', thisRecord.Mentor__r.Name);
                                            }
                                            else
                                            {
                                                existingRecord.set('MentorList', existingRecord.data.MentorList+", "+thisRecord.Mentor__r.Name);
                                            }
                                        }
                                    }
                                }
                                
                                courseGroupGrid.getView().setLoading(false);
                            });
                    }
                });
        });
        
        //Function to parse the mentor hours JSON and store it in the shiftHoursStore
        function parseStoreHours(mentorHoursJSON)
        {
            shiftHoursStore.removeAll(true);
        
            if (mentorHoursJSON!=null && mentorHoursJSON!='' && mentorHoursJSON.substring(0, 10)=='{"Shift":[')
            {
                //Parse the string in to objects using the built-in parser
                var shiftObject=JSON.parse(mentorHoursJSON);
                
                //Iterate through each object and add the values to the shift hours store
                for(var i=0; i<shiftObject.Shift.length; i++)
                {
                    var newRecord=Ext.create('ShiftHoursModel');
                    
                    newRecord.set('StartDay', shiftObject.Shift[i].Start.Day);
                    newRecord.set('StartHour', convert24to12(shiftObject.Shift[i].Start.Time.substring(0,2))[0]);
                    newRecord.set('StartM', convert24to12(shiftObject.Shift[i].Start.Time.substring(0,2))[1]);
                    newRecord.set('StartMin', shiftObject.Shift[i].Start.Time.substring(2,4));
                    newRecord.set('EndDay', shiftObject.Shift[i].End.Day);
                    newRecord.set('EndHour', convert24to12(shiftObject.Shift[i].End.Time.substring(0,2))[0]);
                    newRecord.set('EndM', convert24to12(shiftObject.Shift[i].End.Time.substring(0,2))[1]);
                    newRecord.set('EndMin', shiftObject.Shift[i].End.Time.substring(2,4));
                    
                    if (shiftObject.Shift[i].Offset==null)
                    {
                        newRecord.set('TimeZone', '-7');
                    }
                    else
                    {
                        newRecord.set('TimeZone', shiftObject.Shift[i].Offset);
                    }
                
                    shiftHoursStore.add(newRecord);
                }
            }
        }
        
        //Converts 12 hour time format to 24 hour time format
        function convert12to24(hour, half)
        {
            if (half=='PM' && hour!='12')
            {
                return (parseInt(hour)+12).toString();
            }
            else if (half=='AM' && hour=='12')
            {
                return '00';
            }
            else
            {
                if (hour.length==1)
                {
                    return '0'+hour;
                }
                else
                {
                    return hour;
                }
            }
        }
        
        //Converts a 24 hour format to an array with a 12 hour format hour and accompanying AM/PM
        function convert24to12(hour)
        {
            var hourM=[];
            
            hourM[0]=hour;
            hourM[1]='AM';
            
            if (parseInt(hour)>=12)
            {
                if (parseInt(hour)>12)
                {
                    hourM[0]=(parseInt(hour)-12).toString();
                    if (hourM[0].length==1)
                    {
                        hourM[0]='0'+hourM[0];
                    }
                }
                hourM[1]='PM';
            }
            else if (hour=='00')
            {
                hourM[0]='12';              
            }
            
            return hourM;
        }
    </script>
</body>
</html>
</apex:page>