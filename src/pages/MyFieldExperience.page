<apex:page title="Western Governors University - Student Field Experience" contentType="text/html; charset=UTF-8" controller="MyFieldExperienceController" standardStylesheets="false" showHeader="false" sidebar="false" docType="html">
<apex:outputText escape="false" value="{!"<!DOCTYPE html>"}"/>
<html>
<head>
<apex:includeScript value="/soap/ajax/27.0/connection.js"/>
<link href="{!$Resource.profile}/images/favicon.ico" rel="SHORTCUT ICON"></link>
<apex:stylesheet value="{!URLFOR($Resource.extjs_v407, 'resources/css/ext-all.css')}"/> 

<apex:outputText escape="false" value="{!lt}!--[if gte IE 9]{!gt}"/>
<style type="text/css">#toDoList{width:306px !important;}</style>
<apex:outputText escape="false" value="{!lt}![endif]--{!gt}"/>

<script type="text/javascript" charset="utf-8" src="{!$Resource.extjs_v407}/ext-all.js"/>
<script type="text/javascript" charset="utf-8" src="{!$Resource.jquery_v171}"/>
<title>Western Governors University - Student Field Experience.</title>

<link href="{!URLFOR($Resource.MyFieldExperienceResources,'assets/css/field_experience.css')}" rel="stylesheet" type="text/css" />
<style>
        a {color:blue;}      /* unvisited link */
        a:hover {color:darkblue;}  /* mouse over link */
        a:visited {color:blue;}  /* visited link */
        a:active {color:darkblue;}  /* selected link */

        #to-do-list-spacer{
            height: 40px;
        }
</style>
</head>
<body>
    <script type="text/javascript" >
      function verifyFileDescription() {
         if ( $j("[id$=generalFileAttachmentNameText]").val() == null || $j("[id$=generalFileAttachmentNameText]").val().trim() == "" ) {
              Ext.Msg.show({
                 title:'Attachment Description Required',
                 msg: 'Please specify a description of the file you are trying to upload.',
                 buttons: Ext.Msg.OK,
                 icon: Ext.Msg.WARN
              });
              $j("[id$=generalFileAttachmentNameText]").focus();
              return false;
         }
      }
    </script>
    <apex:form id="apexForm">
    <apex:pageMessages />
    <div id="subheader-wrapper">
    </div>
    <div id="extContent">
    </div>
    <div id="fileManager" class="attachments" style="display:none;">
       <apex:inputHidden id="uploadSuccessHidden" value="{!uploadSuccess}"/>
       <apex:inputHidden id="fieldExperienceIdHidden" value="{!fieldExperienceId}"/>
       <apex:inputHidden id="toDoIndexHidden" value="{!toDoIndex}"/>
       <apex:inputHidden id="fileAttachmentNameTextHidden" value="{!fileAttachmentName}"/>
       <p>Please select a file for upload:</p>
       <apex:inputFile title="Select a File" styleclass="" accept="doc, txt, pdf" contentType="{!fileContentType}" size="50" value="{!fileAttachment}"/><br/><br/>
       <apex:commandButton id="submitAttachFile" value="Upload" action="{!attachFile}"/>
       <p><br/></p>
    </div>
    <div id="generalFileUploadManager" class="attachments" style="display:none;">
       <apex:inputHidden id="generalFieldExperienceIdHidden" value="{!fieldExperienceId}"/>
       <apex:inputHidden id="generalUploadSuccessHidden" value="{!uploadSuccess}"/>
       <apex:inputHidden id="generalToDoIndexHidden" value="{!toDoIndex}"/>
       <p>If directed to do so by WGU staff, you may attach an additional file to your Field Experience profile (5MB limit) by uploading it below.</p><br/>
       <p>Enter a description for the file being uploaded:<br/>
       <apex:inputText id="generalFileAttachmentNameText" value="{!fileAttachmentName}" maxlength="80" size="80"/></p>
       <apex:inputFile title="Select a File" styleclass="" accept="doc, txt, pdf" contentType="{!fileContentType}" size="50" value="{!fileAttachment}"/>
       <br/><br/><apex:commandButton value="Upload" action="{!attachGeneralFile}" />
       <p><br/></p>
    </div>
    <!--<div id="footer-wrapper">
    </div>-->
                                                
    <script type="text/javascript" >
        $j = jQuery.noConflict();
        var templateRecords = new Array(20);
        var toDoRecords = new Array(20);
        var todoItemIndex = 0;
        var fieldExperience;
        var studentContact;
        var CARD = {
            "FieldExperiencesOverview":1,
            "PersonalInformationVerification":2,
            "TeacherCollegeCodeOfEthics":3,
            "StateIntendedForLicensing":4,
            "LicenseNameForCertification":5,
            "SFAWAssessment":6,
            "BasicSkillsExams":7,
            "PCEBackgroundClearance":8,
            "LiabilityInsuranceUpload":9,
            "FERPAUpload":10,
            "SchoolPreference":11,
            "PCEVerificationFormUpload":12,
            "Cohort":13,
            "DTAffidavit":14,
            "DTCohortTimelineUpload":15,
            "ContentExamsUpload":16,
            "AdditionalPlacementInformation":17,
            "DTBackgroundClearance":18,
            "PCETaskList":19,
            "MiscFileUploadPanel":20 
        };
        var WGUpanel;
        var cardStack;
        var currentPanel;
        var toDoList;
        var schoolPreferenceSearchGrid;
        var yesAdditionalInfoSameSchoolRadio;
        var noAdditionalInfoSameSchoolRadio;
        var whyDifferentSchoolAdditionalInfoText;
        var classroomExperienceAdditionalInfoCombo;
        var yesAdditionalInfoRelativesWorkInDistrictRadio;
        var noAdditionalInfoRelativesWorkInDistrictRadio;
        var districtWorkInAdditionalInfoCombo;
        var districtRelativesWorkInAdditionalInfoCombo;
        var yesAdditionalInfoChildrenInDistrictRadio;
        var noAdditionalInfoChildrenInDistrictRadio;
        var districtKidsInAdditionalInfoCombo;
        var schoolKidsInAdditionalInfoCombo;
        var yesAdditionalInfoDODRadio;
        var noAdditionalInfoDODRadio;
        var addCustomSchoolOrDistrictButton;
        var stateForSchoolPreferenceSearchCombo;
        var schoolPreferenceSearchTermField;
        var schoolPreferenceSearchButton;
        var districtSearchRadio;
        var FieldExperiencesOverviewCheckBox;
        var personalInformationVerificationCheckBox;
        var teacherCollegeCodeOfEthicsCheckBox;
        var stateForDTCombo;
        var stateForDTSaveButton;
        var licensingCombo;
        var licensingSaveButton;
        var cohortSelection;
        var dtAffidavitCheckBox;
        var createPlacementButton;
        var yesAdditionalInfoWorkInDistrictRadio;
        var noAdditionalInfoWorkInDistrictRadio;
        var addCustomSchoolDialog;
        var MiscFileUploadPanel;
        var fileUploadedSuccessfully = false;
        var continueAJAX = true;
        var btnSaveCohortSelection;
        var admissionStatusField;

        var isLoading;
        Ext.ns("Ext.WGU");   
        Ext.override(Ext.data.Store, {
            loadDataViaReader : function(data, append) {
                var me      = this,
                    result  = me.proxy.reader.read(data),
                    records = result.records;
        
                me.loadRecords(records, { addRecords: append });
                me.fireEvent('load', me, result.records, true);
            }            
        });
        
        
        Ext.onReady(function(){ 
            isLoading = true;
            Ext.QuickTips.init();
            Ext.tip.QuickTipManager.init();

            WGUpanel = new Ext.create('Ext.WGU.MyFieldExperienceViewPort',{}); 
            WGUpanel.render( 'extContent' ); 
            cardStack = Ext.getCmp( 'cardStack' );
            toDoList = Ext.getCmp( 'toDoList' );
            schoolPreferenceSearchGrid = Ext.getCmp('schoolPreferenceSearchGrid');
            yesAdditionalInfoSameSchoolRadio = Ext.getCmp('yesAdditionalInfoSameSchoolRadio');
            noAdditionalInfoSameSchoolRadio = Ext.getCmp('noAdditionalInfoSameSchoolRadio');
            whyDifferentSchoolAdditionalInfoText = Ext.getCmp('whyDifferentSchoolAdditionalInfoText');
            classroomExperienceAdditionalInfoCombo = Ext.getCmp('classroomExperienceAdditionalInfoCombo');
            yesAdditionalInfoWorkInDistrictRadio = Ext.getCmp('yesAdditionalInfoWorkInDistrictRadio');
            noAdditionalInfoWorkInDistrictRadio = Ext.getCmp('noAdditionalInfoWorkInDistrictRadio');
            yesAdditionalInfoRelativesWorkInDistrictRadio = Ext.getCmp('yesAdditionalInfoRelativesWorkInDistrictRadio');
            noAdditionalInfoRelativesWorkInDistrictRadio = Ext.getCmp('noAdditionalInfoRelativesWorkInDistrictRadio');
            districtWorkInAdditionalInfoCombo = Ext.getCmp('districtWorkInAdditionalInfoCombo');
            districtRelativesWorkInAdditionalInfoCombo = Ext.getCmp('districtRelativesWorkInAdditionalInfoCombo');
            yesAdditionalInfoChildrenInDistrictRadio = Ext.getCmp('yesAdditionalInfoChildrenInDistrictRadio');
            noAdditionalInfoChildrenInDistrictRadio = Ext.getCmp('noAdditionalInfoChildrenInDistrictRadio');
            districtKidsInAdditionalInfoCombo = Ext.getCmp('districtKidsInAdditionalInfoCombo');
            schoolKidsInAdditionalInfoCombo = Ext.getCmp('schoolKidsInAdditionalInfoCombo');
            yesAdditionalInfoDODRadio =  Ext.getCmp('yesAdditionalInfoDODRadio');
            noAdditionalInfoDODRadio = Ext.getCmp('noAdditionalInfoDODRadio');
            addCustomSchoolOrDistrictButton = Ext.getCmp('addCustomSchoolOrDistrictButton');
            stateForSchoolPreferenceSearchCombo = Ext.getCmp('stateForSchoolPreferenceSearchCombo');
            schoolPreferenceSearchTermField = Ext.getCmp('schoolPreferenceSearchTermField');
            schoolPreferenceSearchButton = Ext.getCmp('schoolPreferenceSearchButton');
            districtSearchRadio = Ext.getCmp('districtSearchRadio');
            FieldExperiencesOverviewCheckBox = Ext.getCmp('FieldExperiencesOverviewCheckBox');
            personalInformationVerificationCheckBox = Ext.getCmp('personalInformationVerificationCheckBox');
            teacherCollegeCodeOfEthicsCheckBox = Ext.getCmp('teacherCollegeCodeOfEthicsCheckBox');
            stateForDTCombo = Ext.getCmp('stateForDTCombo');
            stateForDTSaveButton = Ext.getCmp('stateForDTSaveButton');
            licensingCombo = Ext.getCmp('licensingCombo');
            licensingSaveButton = Ext.getCmp('licensingSaveButton');
            cohortSelection = Ext.getCmp('cohortSelectionCombo');
            dtAffidavitCheckBox = Ext.getCmp('dtAffidavitCheckBox');
            createPlacementButton = Ext.getCmp('createPlacementButton');
            MiscFileUploadPanel = Ext.getCmp('MiscFileUploadPanel');
            btnSaveCohortSelection = Ext.getCmp('btnSaveCohortSelection');
            admissionStatusField = Ext.getCmp('AdmissionStatusField');
            admissionStatusField.labelEl.setDisplayed( false );
            

           if ( "{!uploadSuccess}" == "true" ) {
                    $j("[id$=uploadSuccessHidden]").val(null);
                    if ( "{!toDoIndex}" != "" ) {
                      fileUploadedSuccessfully = true;
                    }
                    Ext.Msg.show({
                         title:'Upload Success',
                         msg: 'File Uploaded Successfully.',
                         buttons: Ext.Msg.OK,
                         icon: Ext.Msg.INFO
                    });
           }

            if ( "{!toDoIndex}" != ""  ) {
              refreshToDoList( ("{!toDoIndex}"==""?0:"{!toDoIndex}")*1 );
              $j("[id$=toDoIndexHidden]").val(null);
              $j("[id$=uploadSuccessHidden]").val(null);
            } else {
              refreshToDoList();
            }
            
            
            // Page Height
            function resizeViewPort(){
                var windowHeight = jQuery(window).height();
                var viewPort = Ext.getCmp("myFieldExperienceViewPort");
                var newViewPortHeight = windowHeight-50;
                if(windowHeight >= 720){
                    Ext.getCmp("myFieldExperienceViewPort").setHeight(windowHeight-50);
                }
            }
            resizeViewPort();
            function addWindowListener(){
                jQuery(window).resize(function() {
                    resizeViewPort();
                });
            }
            addWindowListener();
            
        }); //end Ext.onReady()
        
        function refreshToDoList(taskIndex) {
            WGUpanel.setLoading(false);
            WGUpanel.setLoading('Refreshing Tasks...');
            MyFieldExperienceController.getFEExtJSON(function(result, er){
               try {
                   if ( er.status ) {
                       var records = Ext.decode(result);
                       if ( records.Records != null ) { 
                           fieldExperience = records.Records[0];
                           if ( fieldExperience.Student__r == null ) {
                              refreshToDoList(taskIndex);
                           } else {
                             if ( fieldExperience.PCEPhaseStatus__c != null ) {
                               var subheaderContent = "<div>Field Experience Portal <span>- Welcome <b>"+fieldExperience.Student__r.Name+"</b> (&nbsp;&nbsp;&nbsp;PCE Phase Status: " +fieldExperience.PCEPhaseStatus__c+ "&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;DT Phase Status: "+(fieldExperience.DTPhaseStatus__c != null && fieldExperience.DTPhaseStatus__c != 'null'?fieldExperience.DTPhaseStatus__c:'none')+"&nbsp;&nbsp;&nbsp;)</span></div>";
                               Ext.get('subheader-wrapper').update(subheaderContent , false );
                             } else {
                               var subheaderContent = "<div>Field Experience Portal <span>- Welcome <b>"+fieldExperience.Student__r.Name+"</b></span></div>";
                               Ext.get('subheader-wrapper').update(subheaderContent , false );
                             }
                           }
                       }
                   } else {
                      continueAJAX = false;
                      WGUpanel.setLoading(false);
                      if ( er.type == "exception" ) {
                            if ( er.message.indexOf( 'Unexpected token <' ) != -1 ) {
                                setTimeout( function(){ 
                                    WGUpanel.setLoading('Reloading...');
                                    window.location = '/apex/myfieldexperience'; 
                                }, 250 );
                            } else {
                                var subheaderFEContent = "<div>Error Querying for Active Field Experience Record<span>- "+er.message+"</span></div>";
                                Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                            }
                          return false;
                      }
                   }
               } finally {
                   if ( continueAJAX ) {
                         MyFieldExperienceController.getAllToDosAsJSON(function(result, er){
                         if ( er.status ) {
                             try {
                              var res = Ext.decode(result);
                              todoitemsStore.loadRawData(res.Records);
                              var recordIndex = 1;
                              todoitemsStore.each( function(record) {
                                toDoRecords[recordIndex++] = record.data;
                              });
                              todoitemsStore.first();
                              if ( isLoading == true ) {
                                   isLoading = false;
                                   MyFieldExperienceController.getAllToDoTemplates(function(result, er){
                                     if ( er.status ) {
                                          var templates = Ext.decode(result);
                                          templatesStore.loadData(templates.Records);
                                          var recordIndex = 1;
                                          templatesStore.each( function(record) {
                                            templateRecords[recordIndex++] = record.data;
                                          });
                                          templatesStore.first();
                                          if ( taskIndex != null ) {
                                             if ( taskIndex != todoItemIndex ) {
                                               todoItemIndex = taskIndex;
                                               if (todoItemIndex > toDoRecords.length) {
                                                 todoItemIndex = toDoRecords.length;
                                               }
                                               toDoList.getSelectionModel().select(todoItemIndex-1); //selection change will call mainHandler()
                                             } else {
                                               var toDoItem = getToDoItemFromIndex(todoItemIndex);
                                               var isClosed = toDoItem != null? toDoItem.IsClosed : false;
                                               mainHandler( todoItemIndex, null, isClosed );
                                             }
                                          }
                                     } else {
                                         WGUpanel.setLoading(false);
                                         if ( er.type == "exception" ) {
                                            var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                            Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                         }
                                     }
                                   }, {escape:false});
                              } else { //not loading
                                  if ( taskIndex != null ) {
                                       if ( taskIndex != todoItemIndex ) {
                                         todoItemIndex = taskIndex;
                                         if (todoItemIndex > toDoRecords.length) {
                                           todoItemIndex = toDoRecords.length;
                                         }
                                         toDoList.getSelectionModel().select(todoItemIndex-1);  //selection change will call mainHandler()
                                       } else {
                                          var toDoItem = getToDoItemFromIndex(todoItemIndex);
                                          var isClosed = toDoItem != null? toDoItem.IsClosed : false;
                                          mainHandler( todoItemIndex, null, isClosed );
                                       }
                                  }
                              }
                             } finally {
                                 WGUpanel.setLoading(false);
                             }
                         } else {
                             WGUpanel.setLoading(false);
                             if ( er.type == "exception" ) {
                                var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                             }
                         }
                        
                        }, {escape:false});
                  } else {
                     WGUpanel.setLoading(false);
                  }
              }
            }, {escape:false});
        }
        
        function mainHandler(todoItemIndex, sender, isComplete){
            switch(todoItemIndex)
            {
            case CARD.FieldExperiencesOverview:
              doFieldExperiencesOverview(sender, isComplete);
              break;
            case CARD.PersonalInformationVerification:
              doPersonalInformationVerification(sender, isComplete);
              break;
            case CARD.TeacherCollegeCodeOfEthics:
              doTeacherCollegeCodeOfEthics(sender, isComplete);
              break;
            case CARD.StateIntendedForLicensing:
              doStateIntendedForLicensing(sender, isComplete);
              break;
            case CARD.LicenseNameForCertification:
              doLicenseNameForCertification(sender, isComplete);
              break;
            case CARD.Cohort:
              doCohort(sender, isComplete);
              break;
            case CARD.SFAWAssessment:
              doSFAWAssessment(sender, isComplete);
              break;
            case CARD.BasicSkillsExams:
              doBasicSkillsExams(sender, isComplete);
              break;
            case CARD.PCEBackgroundClearance:
              doPCEBackgroundClearance(sender,isComplete);
              break;
            case CARD.PCETaskList:
              doPCETaskList(sender, isComplete);
              break;
            case CARD.LiabilityInsuranceUpload:
              doLiabilityInsuranceUpload(sender, isComplete);
              break;
            case CARD.FERPAUpload:
              doFERPAUpload(sender, isComplete);
              break;
            case CARD.ContentExamsUpload:
              doContentExamsUpload(sender, isComplete);
              break;
            case CARD.SchoolPreference:
              doSchoolPreference(sender, isComplete);
              break;
            case CARD.PCEVerificationFormUpload:
              doPCEVerificationFormUpload(sender, isComplete);
              break;
            case CARD.AdditionalPlacementInformation:
              doAdditionalPlacementInformation(sender, isComplete);
              break;
            case CARD.DTBackgroundClearance:
              doDTBackgroundClearance(sender,isComplete);
              break;
            case CARD.DTCohortTimelineUpload:
              doDTCohortTimelineUpload(sender, isComplete);
              break;
            case CARD.DTAffidavit:
              doDTAffidavit(sender, isComplete);
              break;
            default:
              
            }
                    
        }; //mainHandler
        
        function getToDoItemFromIndex( index ) {
            for ( var i = 1; i <= toDoRecords.length; i++ ) {
              if (  toDoRecords[i] != null && toDoRecords[i].CardIndex__c == index ) {
                return toDoRecords[i];
                break;
              } 
            }
        }
        
        function getTemplateItemFromIndex( index ) {
            for ( var i = 1; i <= templateRecords.length; i++ ) {
              if (  templateRecords[i] != null && templateRecords[i].CardIndex__c == index ) {
                return templateRecords[i];
                break;
              } 
            }
        }
        
        function doFieldExperiencesOverview(sender, isComplete) {
          FieldExperiencesOverviewCheckBox.setRawValue(isComplete);
        }
              
        function doPersonalInformationVerification(sender, isComplete) {
          personalInformationVerificationCheckBox.setRawValue(isComplete);
        }
        
        function doTeacherCollegeCodeOfEthics(sender, isComplete) {
          teacherCollegeCodeOfEthicsCheckBox.setRawValue(isComplete);
        }
        
        function doStateIntendedForLicensing(sender, isComplete) {
          if ( isComplete || fieldExperience.State__c != null ) {
            var record = statesStore.findRecord( 'name', fieldExperience.State__c );
            stateForDTCombo.setRawValue( record.data.name );
            if ( fieldExperience.TeacherLicense__c != null && fieldExperience.TeacherLicense__c != "null" ) {
                stateForDTCombo.setDisabled(true);
                stateForDTSaveButton.setDisabled(true);
            }
          }
        }
        
        function doLicenseNameForCertification(sender, isComplete) {
            if ( fieldExperience.State__c != null && fieldExperience.State__c != "null" ) {
                  if ( isComplete && fieldExperience.TeacherLicense__c != null && fieldExperience.TeacherLicense__c != "null" ) {
                    licensingCombo.setDisabled(true);
                    licensingSaveButton.setDisabled(true);
                  }
              var record = statesStore.findRecord( 'name', fieldExperience.State__c );
              MyFieldExperienceController.getStateLicensesJSON(record.data.abbr,function(result, er){
                  if ( er.status ) {
                      licensesStore.clearData();
                      licensesStore.loadData( Ext.decode(result).Records, false );
                      if ( isComplete && fieldExperience.TeacherLicense__c != null && fieldExperience.TeacherLicense__c != "null" ) {
                        var record = licensesStore.findRecord( 'Id', fieldExperience.TeacherLicense__c );
                        licensingCombo.setRawValue( record.data.Name );
                      }
                  } else {
                        WGUpanel.setLoading(false);
                        if ( er.type == "exception" ) {
                            var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                            Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                        }
                  }
              }, {escape:false});
            } else {
                Ext.Msg.show({
                     title:'State for Licensing?',
                     msg: 'You have not yet selected a state for Licensure. Would you like to select a state now?',
                     buttons: Ext.Msg.YESNO,
                     icon: Ext.Msg.QUESTION,
                     fn: function(btn, text) {
                       if (btn == 'yes') {
                         todoItemIndex = CARD.StateIntendedForLicensing;
                         toDoList.getSelectionModel().select(CARD.StateIntendedForLicensing-1);
                       }
                     }
                  });
            }
        }
        
        function doCohort(sender, isComplete) {
          if (isComplete == true) {
            if ( fieldExperience.Cohort__c != null && fieldExperience.Cohort__c != "null" ) {
               var record = cohortsStore.findRecord( 'value', fieldExperience.Cohort__c );
               if  ( record != null ) {
                   cohortSelection.setRawValue( record.data.name );
               } else if ( fieldExperience.Cohort__r != null && fieldExperience.Cohort__r.Name != null ) {
                   cohortSelection.setRawValue( fieldExperience.Cohort__r.Name );
               } 
               if ( fieldExperience.AdmissionStatus__c != null && fieldExperience.AdmissionStatus__c != "null" ) {
                 cohortSelection.setDisabled( fieldExperience.AdmissionStatus__c == 'Provisional Accept'
                 || fieldExperience.AdmissionStatus__c == 'Pending Provisional Accept'
                 || fieldExperience.AdmissionStatus__c == 'Full Acceptance'
                 || fieldExperience.AdmissionStatus__c == 'Withdrawn' );  
                 btnSaveCohortSelection.setDisabled( cohortSelection.disabled );
                 btnSaveCohortSelection.setVisible( !btnSaveCohortSelection.disabled );
                 admissionStatusField.setValue(  btnSaveCohortSelection.disabled? fieldExperience.AdmissionStatus__c: '');
                 admissionStatusField.setVisible( btnSaveCohortSelection.disabled );
                 admissionStatusField.labelEl.setDisplayed( admissionStatusField.isVisible() );
               }             
            }
          }
          
          if ( cohortsStore.count() == 0 ) {
              if (cohortSelection.getRawValue() == '') {
                cohortSelection.setRawValue('ENROLLMENT CLOSED');
              }
              cohortSelection.setDisabled(true);
              btnSaveCohortSelection.setDisabled(true);
          } else if ( cohortsStore.count() == 1 ) {
              cohortSelection.setValue(cohortsStore.data.items[0].data.value);
          }
          
        }
        
        function doSFAWAssessment(sender, isComplete) {
            templateRecord = getTemplateItemFromIndex(CARD.SFAWAssessment);
            if ( isComplete == false && templateRecord  != null && templateRecord.StudentTaskCode__c ) {
              MyFieldExperienceController.isAssessmentComplete(templateRecord.StudentTaskCode__c,function(result, er){
                if ( er.status ) {
                       if (result == true) {
                            WGUpanel.setLoading(false);
                            WGUpanel.setLoading('Saving...');
                            var toDoItem = getToDoItemFromIndex(CARD.SFAWAssessment);
                            if (toDoItem != null) {
                                MyFieldExperienceController.setToDoComplete(
                                  toDoItem.Id,
                                 function(saveResult, er){ 
                                        WGUpanel.setLoading(false);
                                        if ( saveResult == true ) {
                                           //go to next task
                                           refreshToDoList(templateRecord.NextCardIndex__c);
                                        } 
                                 }, {escape:false});
                            }
                        } else {
                          Ext.Msg.show({
                             title:'SFAW Search Unsuccessful',
                             msg: 'A search has yet to find a successful SFAW assessment completion for you.<br/>It may take up to 48 hours for results to post from TaskStream.',
                             buttons: Ext.Msg.OK,
                             icon: Ext.Msg.INFO
                          });
                       }
                } else {
                    WGUpanel.setLoading(false);
                    if ( er.type == "exception" ) {
                        var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                        Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                    }
                }
              }, {escape:false});
            }
        }
        
        function doBasicSkillsExams(sender, isComplete) {
            //state of licensure is required to lookup Basic skills assessment completion
            templateRecord = getTemplateItemFromIndex(CARD.BasicSkillsExams);
            if ( fieldExperience.State__c != null && fieldExperience.State__c != "null" ) {
                  if ( isComplete == false ) {
                      MyFieldExperienceController.isBasicSkillsAssessmentComplete(function(result, er){
                      if ( er.status ) {
                           if (result == true) {
                                WGUpanel.setLoading(false);
                                WGUpanel.setLoading('Saving...');
                                var toDoItem = getToDoItemFromIndex(CARD.BasicSkillsExams);
                                if (toDoItem != null) {
                                    MyFieldExperienceController.setToDoComplete(
                                      toDoItem.Id,
                                     function(saveResult, er){ 
                                            WGUpanel.setLoading(false);
                                            if (er.status) {
                                                if ( saveResult == true ) {
                                                   //go to next task
                                                   refreshToDoList(templateRecord.NextCardIndex__c);
                                                }
                                            } else {
                                                if ( er.type == "exception" ) {
                                                    var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                    Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                }
                                            } 
                                     }, {escape:false});
                                }
                           } else {
                              Ext.Msg.show({
                                 title:'Basic Skills Search Unsuccessful',
                                 msg: 'A search has yet to find a successful Basic Skills assessment completion for you for '+fieldExperience.State__c+'.<br/>It may take up to 48 hours for results to post from TaskStream.',
                                 buttons: Ext.Msg.OK,
                                 icon: Ext.Msg.INFO
                              });
                           }
                        } else {
                          WGUpanel.setLoading(false);
                          if ( er.type == "exception" ) {
                                var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                          }
                        }
                      }, {escape:false});
                    }
             } else {
                Ext.Msg.show({
                     title:'State for Licensing?',
                     msg: 'You have not yet selected a state for Licensure. Would you like to select a state now?',
                     buttons: Ext.Msg.YESNO,
                     icon: Ext.Msg.QUESTION,
                     fn: function(btn, text) {
                       if (btn == 'yes') {
                         todoItemIndex = CARD.StateIntendedForLicensing;
                         toDoList.getSelectionModel().select(CARD.StateIntendedForLicensing-1);
                       }
                     }
                  });
            }
        }
        
        function doPCEBackgroundClearance(sender, isComplete) {
        }
        
        function doPCETaskList(sender, isComplete) {
          templateRecord = getTemplateItemFromIndex(CARD.PCETaskList);
           if ( fileUploadedSuccessfully == true ) {
                    fileUploadedSuccessfully = false;
                    var toDoItem = getToDoItemFromIndex(CARD.PCETaskList);
                    if (toDoItem != null) {
                         MyFieldExperienceController.setToDoComplete(
                         toDoItem.Id,
                         function(saveResult, er){ 
                           if ( er.status ) {
                                if ( saveResult == true ) {
                                   //go to next task
                                   refreshToDoList(templateRecord.NextCardIndex__c);
                                }
                           } else {
                               WGUpanel.setLoading(false);
                               if ( er.type == "exception" ) {
                                    var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                    Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                               }
                           }
                         }, {escape:false});
                    }
           } else {
               $j("[id$=toDoIndexHidden]").val(CARD.PCETaskList);
               $j("[id$=generalToDoIndexHidden]").val(CARD.PCETaskList);
               $j("[id$=fileAttachmentNameTextHidden]").val('PCE Task List Upload');
               $j("[id$=generalFileAttachmentNameText]").val('PCE Task List Upload');
               $j( '#fileManager' ).detach().prependTo( $j('#PCETaskListUploadPanel') );
               $j( '#fileManager' ).show();
           }
        }       

        
        function doLiabilityInsuranceUpload(sender, isComplete) {
          templateRecord = getTemplateItemFromIndex(CARD.LiabilityInsuranceUpload);
           if ( fileUploadedSuccessfully == true ) {
                    fileUploadedSuccessfully = false;
                    var toDoItem = getToDoItemFromIndex(CARD.LiabilityInsuranceUpload);
                    if (toDoItem != null) {
                         MyFieldExperienceController.setToDoComplete(
                         toDoItem.Id,
                         function(saveResult, er){ 
                            if (er.status) {
                                    if ( saveResult == true ) {
                                       //go to next task
                                       refreshToDoList(templateRecord.NextCardIndex__c);
                                    }
                            } else {
                                WGUpanel.setLoading(false);
                                if ( er.type == "exception" ) {
                                    var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                    Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                }
                            }
                         }, {escape:false});
                    }
           } else {
               $j("[id$=toDoIndexHidden]").val(CARD.LiabilityInsuranceUpload);
               $j("[id$=generalToDoIndexHidden]").val(CARD.LiabilityInsuranceUpload);
               $j("[id$=fileAttachmentNameTextHidden]").val('Liability Insurance Upload');
               $j("[id$=generalFileAttachmentNameText]").val('Liability Insurance Upload');
               $j( '#fileManager' ).detach().prependTo( $j('#LiabilityInsuranceUploadPanel') );
               $j( '#fileManager' ).show();
           }
        }
        
        function doFERPAUpload(sender, isComplete) {
           templateRecord = getTemplateItemFromIndex(CARD.FERPAUpload);
           if ( fileUploadedSuccessfully == true ) {
                    fileUploadedSuccessfully = false;
                    var toDoItem = getToDoItemFromIndex(CARD.FERPAUpload);
                    if (toDoItem != null) {
                        MyFieldExperienceController.setToDoComplete(
                         toDoItem.Id,
                         function(saveResult, er){ 
                            if ( er.status ) {
                                if ( saveResult == true ) {
                                   //go to next task
                                   refreshToDoList(templateRecord.NextCardIndex__c);
                                }
                            } else {
                                WGUpanel.setLoading(false);
                                if ( er.type == "exception" ) {
                                    var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                    Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                }
                            }
                         }, {escape:false});
                    }
           } else {
               $j("[id$=toDoIndexHidden]").val(CARD.FERPAUpload);
               $j("[id$=generalToDoIndexHidden]").val(CARD.FERPAUpload);
               $j("[id$=fileAttachmentNameTextHidden]").val('FERPA Upload');
               $j("[id$=generalFileAttachmentNameText]").val('FERPA Upload');
               $j( '#fileManager' ).detach().prependTo( $j('#FERPAUploadPanel') );
               $j( '#fileManager' ).show();
           }
        }
        
        function doContentExamsUpload(sender, isComplete) {
           templateRecord = getTemplateItemFromIndex(CARD.ContentExamsUpload);
           if ( fileUploadedSuccessfully == true ) {
                    fileUploadedSuccessfully = false;
                    var toDoItem = getToDoItemFromIndex(CARD.ContentExamsUpload);
                    if (toDoItem != null) {
                       MyFieldExperienceController.setToDoComplete(
                         toDoItem.Id,
                         function(saveResult, er){
                            if ( er.status ) { 
                                if ( saveResult == true ) {
                                   //go to next task
                                   refreshToDoList(templateRecord.NextCardIndex__c);
                                }
                            } else {
                                WGUpanel.setLoading(false);
                                if ( er.type == "exception" ) {
                                    var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                    Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                }
                            }
                         }, {escape:false});
                    }
           } else {
               $j("[id$=toDoIndexHidden]").val(CARD.ContentExamsUpload);
               $j("[id$=generalToDoIndexHidden]").val(CARD.ContentExamsUpload);
               $j("[id$=fileAttachmentNameTextHidden]").val('Content Exams Upload');
               $j("[id$=generalFileAttachmentNameText]").val('Content Exams Upload');
               $j( '#fileManager' ).detach().prependTo( $j('#ContentExamsUploadPanel') );
               $j( '#fileManager' ).show();
           }
        }
        
        function doSchoolPreference(sender, isComplete) {
          
              MyFieldExperienceController.getAllFEProcesses(function(result, er){
                if ( er.status ) {
                    if (result) {
                      feprocessesStore.clearFilter();
                      feprocessesStore.removeAll();
                      var fePlacementRecords = Ext.decode( result );
                      if ( fePlacementRecords.Records.length > 0 ) {
                        for ( var record in fePlacementRecords.Records ) {
                          if ( fePlacementRecords.Records[record].School__r == null ) {  //compensate for null value chain 
                            if ( fePlacementRecords.Records[record].NewSchool__c != null ) {
                                fePlacementRecords.Records[record].School__r = {
                                    attributes: {
                                        type: "Account",
                                        url: ""
                                    },
                                    Name: fePlacementRecords.Records[record].NewSchool__c,
                                    ShippingCity: ""
                                };
                            } else {
                                fePlacementRecords.Records[record].School__r = {
                                    attributes: {
                                        type: "Account",
                                        url: ""
                                    },
                                    Name: "",
                                    ShippingCity: ""
                                };
                            }
                          }
                          if ( fePlacementRecords.Records[record].District__r == null ) {  //compensate for null value chain
                            if ( fePlacementRecords.Records[record].NewDistrict__c != null ) {
                                fePlacementRecords.Records[record].District__r = {
                                    attributes: {
                                        type: "Account",
                                        url: ""
                                    },
                                    Name: fePlacementRecords.Records[record].NewDistrict__c,
                                    ShippingCity: ""
                                };
                            } else {
                                fePlacementRecords.Records[record].District__r = {
                                    attributes: {
                                        type: "Account",
                                        url: ""
                                    },
                                    Name: "",
                                    ShippingCity: ""
                                };
                            }
                          }
                        }
                        feprocessesStore.loadDataViaReader(fePlacementRecords);
                      }
                    } 
                } else {
                    WGUpanel.setLoading(false);
                    if ( er.type == "exception" ) {
                        var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                        Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                    }
                }
              }, {escape:false});

        }
        
        function doPCEVerificationFormUpload(sender, isComplete) {
           templateRecord = getTemplateItemFromIndex(CARD.PCEVerificationFormUpload);         
           if ( fileUploadedSuccessfully == true ) {
                    fileUploadedSuccessfully = false;
                    var toDoItem = getToDoItemFromIndex(CARD.PCEVerificationFormUpload);
                    if (toDoItem != null) {
                        MyFieldExperienceController.setToDoComplete(
                         toDoItem.Id,
                         function(saveResult, er){ 
                            if ( er.status ) {
                                if ( saveResult == true ) {
                                   //go to next task
                                   refreshToDoList(templateRecord.NextCardIndex__c);
                                }
                            } else {
                                WGUpanel.setLoading(false);
                                if ( er.type == "exception" ) {
                                    var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                    Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                }
                            }
                         }, {escape:false});
                    }
           } else {
               $j("[id$=toDoIndexHidden]").val(CARD.PCEVerificationFormUpload);
               $j("[id$=generalToDoIndexHidden]").val(CARD.PCEVerificationFormUpload);
               $j("[id$=fileAttachmentNameTextHidden]").val('PCE Verification Form Upload');
               $j("[id$=generalFileAttachmentNameText]").val('PCE Verification Form Upload');
               $j( '#fileManager' ).detach().prependTo( $j('#PCEVerificationFormUploadPanel') );
               $j( '#fileManager' ).show();
           }
        }
        
        function doAdditionalPlacementInformation(sender, isComplete) {
           doSchoolPreference(sender, isComplete); //loads the combo box data model
           
           //Load schoolsKidsAttendStore with School names for 'my kids attend' combobox
           MyFieldExperienceController.getSchoolNamesFromFEProcessDistricts(function(result, er){
                if ( er.status ) {
                    if (result) {
                      schoolsKidsAttendStore.clearFilter();
                      var schoolsKidsAttendRecords = Ext.decode( result );
                      if ( schoolsKidsAttendRecords.Records.length > 0 ) {
                        schoolsKidsAttendStore.loadDataViaReader(schoolsKidsAttendRecords);
                      }
                    } 
                } else {
                    WGUpanel.setLoading(false);
                    if ( er.type == "exception" ) {
                        var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                        Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                    }
                }
              }, {escape:false});
              
           if ( isComplete ) {
               if ( fieldExperience.SameSchoolasPCE__c ) {
                    yesAdditionalInfoSameSchoolRadio.setValue(true);
               } else {
                    noAdditionalInfoSameSchoolRadio.setValue(true);
               }
               if ( fieldExperience.NotPCEReason__c != null && fieldExperience.NotPCEReason__c != 'null' && Ext.String.trim( fieldExperience.NotPCEReason__c ) != '' ) {
                    whyDifferentSchoolAdditionalInfoText.setRawValue( fieldExperience.NotPCEReason__c );
               } 
               if ( fieldExperience.ClassroomExperience__c != null && fieldExperience.ClassroomExperience__c != 'null' && Ext.String.trim( fieldExperience.ClassroomExperience__c ) != '' ) { 
                    classroomExperienceAdditionalInfoCombo.setRawValue( fieldExperience.ClassroomExperience__c );
               } 
               if ( fieldExperience.WorkinSameDistrictasPlacement__c ) {
                    yesAdditionalInfoWorkInDistrictRadio.setValue( true );
               } else {
                    noAdditionalInfoWorkInDistrictRadio.setValue( true );
               }
               if ( fieldExperience.DistrictNameStudentWorksIn__c != null && fieldExperience.DistrictNameStudentWorksIn__c != 'null' && Ext.String.trim( fieldExperience.DistrictNameStudentWorksIn__c ) != '' )  {
                   districtWorkInAdditionalInfoCombo.setRawValue( fieldExperience.DistrictNameStudentWorksIn__c );
               } 
               if ( fieldExperience.RelativesinDistrict__c ) {
                  yesAdditionalInfoRelativesWorkInDistrictRadio.setValue( true );
               } else {
                  noAdditionalInfoRelativesWorkInDistrictRadio.setValue( true );
               }
               if ( fieldExperience.DistrictNameRelativeWorksIn__c != null && fieldExperience.DistrictNameRelativeWorksIn__c != 'null' && Ext.String.trim( fieldExperience.DistrictNameRelativeWorksIn__c ) != '' ) {
                    districtRelativesWorkInAdditionalInfoCombo.setRawValue( fieldExperience.DistrictNameRelativeWorksIn__c  );
               } 
               if ( fieldExperience.ChildreninDistrict__c ) {
                    yesAdditionalInfoChildrenInDistrictRadio.setValue( true );
               } else {
                    noAdditionalInfoChildrenInDistrictRadio.setValue( true );
               }
               if ( fieldExperience.DistrictNameChildrenAreIn__c != null && fieldExperience.DistrictNameChildrenAreIn__c != 'null' && Ext.String.trim( fieldExperience.DistrictNameChildrenAreIn__c ) != '' ) {
                    districtKidsInAdditionalInfoCombo.setRawValue( fieldExperience.DistrictNameChildrenAreIn__c );
               } 
               if ( fieldExperience.SchoolNameChildrenAreIn__c != null && fieldExperience.SchoolNameChildrenAreIn__c && 'null' && Ext.String.trim( fieldExperience.SchoolNameChildrenAreIn__c ) != '' ) {
                    schoolKidsInAdditionalInfoCombo.setRawValue( fieldExperience.SchoolNameChildrenAreIn__c );
               } 
               if ( fieldExperience.DODStudent__c ) { 
                    yesAdditionalInfoDODRadio.setValue( true );
               } else {
                    noAdditionalInfoDODRadio.setValue( true );
               }
           }
        }
        
        function doDTBackgroundClearance(sender, isComplete) {
        }
        
        function doDTCohortTimelineUpload(sender, isComplete) {
           templateRecord = getTemplateItemFromIndex(CARD.DTCohortTimelineUpload);         
           if ( fileUploadedSuccessfully == true ) {
                    fileUploadedSuccessfully = false;
                    var toDoItem = getToDoItemFromIndex(CARD.DTCohortTimelineUpload);
                    if (toDoItem != null) {
                         MyFieldExperienceController.setToDoComplete(
                         toDoItem.Id,
                         function(saveResult, er){ 
                           if ( er.status ) {
                                if ( saveResult == true ) {
                                   //go to next task
                                   refreshToDoList(templateRecord.NextCardIndex__c);
                                }
                           } else {
                               WGUpanel.setLoading(false);
                               if ( er.type == "exception" ) {
                                    var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                    Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                               }
                           }
                         }, {escape:false});
                    }
           } else {
               $j("[id$=toDoIndexHidden]").val(CARD.DTCohortTimelineUpload);
               $j("[id$=generalToDoIndexHidden]").val(CARD.DTCohortTimelineUpload);
               $j("[id$=fileAttachmentNameTextHidden]").val('DT Cohort Timeline Upload');
               $j("[id$=generalFileAttachmentNameText]").val('DT Cohort Timeline Upload');
               $j( '#fileManager' ).detach().prependTo( $j('#DTCohortTimelineUploadPanel') );
               $j( '#fileManager' ).show();
           }
        }
        
        function doDTAffidavit(sender, isComplete) {
          dtAffidavitCheckBox.setRawValue(isComplete);
          if (isComplete) {
            dtAffidavitCheckBox.disabled = true;
          }
        }

        Ext.define('Ext.WGU.MyFieldExperienceViewPort', {
            extend: 'Ext.container.Container',
            renderTo: 'extContent',
            id: 'myFieldExperienceViewPort',
            style: 'background-color:#F8F8F8;',
            layout: {
                align: 'stretch',
                type: 'hbox'
            },
            minHeight: 720,
            height: Ext.getBody().getViewRegion().bottom < 720? 720: Ext.getBody().getViewRegion().bottom,
            autoScroll: true,
        
            initComponent: function() {
                var me = this;
        
                Ext.applyIf(me, {
                    items: [
                        {
                            xtype: 'container',
                            id: 'spacerLeft',
                            flex: 1
                        },
                        {
                            xtype: 'container',
                            id: 'panelToDoList',
                            style: '{border-right: 1px solid #D9D9DC; float: left; padding: 0 30px 0 0; width: 320px;}',
                            layout: {
                                align: 'stretch',
                                type: 'vbox'
                            },
                            items: [
                                {
                                    xtype: 'component',
                                    id: 'contact-spacer'
                                },{
                                    xtype: 'component',
                                    id: 'contact-info',
                                    html: "<span>Field Experience Support Team</span><span id='contact-phone'>(866) 889-0132</span><span id='contact-email'>fieldplacement@wgu.edu</span>"
                                },{
                                    xtype: 'component',
                                    id: 'my-to-do-spacer',
                                    height: 1
                                },
                                {
                                    xtype: 'component',
                                    height: 45,
                                    html: '<h2 class="my-todo-list">my To Do List</h2>',
                                    id: 'myToDo',
                                    cls: 'dashboard'
                                },
                                {
                                    xtype: 'dataview',
                                    id: 'toDoList',
                                    height: 362,
                                    style: '{overflow-y : scroll; overflow-x: visible; }',
                                    cls: 'dashboard',
                                    tpl: Ext.create('Ext.XTemplate', 
                                        '<tpl for=".">',
                                          '<tpl if="IsClosed"><div id="{Id}" class="done"><span></span> {Subject}</div>',
                                          '</tpl>',
                                          '<tpl if="!IsClosed"><div id="{Id}" class="todo"><span></span> {Subject}</div>',
                                          '</tpl>',
                                        '</tpl>'),
                                    multiSelect: false,
                                    trackOver: true,
                                    overItemCls: 'x-item-over',
                                    selectedItemCls: 'x-item-selected',
                                    itemSelector: 'div',
                                    store:  todoitemsStore,
                                    listeners: {
                                        itemclick: { 
                                           fn: function(view, record, item, index, e, opts ) {
                                             if (record.data.CardIndex__c != null) {
                                               todoItemIndex = record.data.CardIndex__c;
                                             } else {
                                               todoItemIndex = index + 1;
                                             }
                                           }
                                         },
                                         selectionchange: {
                                            fn: function(dv,nodes,options){
                                                try {
                                                    if ( nodes != null && nodes.length > 0 ) {
                                                        currentPanel = cardStack.items.items[todoItemIndex];                                                       
                                                        currentPanel.setTitle( nodes[0].data.Subject );
                                                        var toDoItem = getToDoItemFromIndex(todoItemIndex);
                                                        var isClosed = toDoItem!=null? toDoItem.IsClosed: false;
                                                        mainHandler(todoItemIndex, cardStack, isClosed );
                                                    } else {
                                                        toDoList.getSelectionModel().deselectAll();
                                                        todoItemIndex = 0;
                                                    }
                                                } finally {
                                                    WGUpanel.setLoading(false);
                                                    cardStack.getLayout().setActiveItem(todoItemIndex);
                                                }
                                             }
                                        }
                                    } 
                                },
                                {
                                    xtype: 'component',
                                    id: 'generalFileUploadSpacer',
                                    height: 10
                                },
                                {
                                    xtype: 'button',
                                    id: 'uploadMiscFileButton',
                                    text: 'Upload an Additional File',
                                    disabled: false,
                                    height: 28,
                                    listeners: {
                                      click: function(button, event, eOpts ) {
                                           fileUploadedSuccessfully = false;
                                           toDoList.getSelectionModel().deselectAll();
                                           $j("[id$=toDoIndexHidden]").val(null);
                                           $j("[id$=generalToDoIndexHidden]").val(null);
                                           $j("[id$=generalFileAttachmentNameText]").val('');
                                           $j("[id$=fileAttachmentNameTextHidden]").val('');
                                           $j( '#generalFileUploadManager' ).detach().prependTo( $j('#MiscFileUploadPanel') );
                                           $j( '#generalFileUploadManager' ).show(); 
                                           todoItemIndex = CARD.MiscFileUploadPanel;
                                           currentPanel = cardStack.items.items[todoItemIndex];                                                       
                                           currentPanel.setTitle( 'Miscellaneous File Upload' );
                                           cardStack.layout.setActiveItem(todoItemIndex);
                                      }
                                    }
                                },
                                {
                                    xtype: 'tbspacer',
                                    height: 10
                                },
                                {
                                    xtype: 'button',
                                    id: 'ReportAnAbsenceButton',
                                    text: 'Report an Absence',
                                    disabled: false,
                                    hidden: false,
                                    height: 28,
                                    listeners: {
                                      click: function(button, event, eOpts ) {
                                         window.open( 'https://wguir.us.qualtrics.com/SE/?SID=SV_9REPlBlY4GBO9ql&sfFieldExperience={!fieldExperienceId}'+'&sfName='+encodeURIComponent(fieldExperience.Student__r.Name), '_WGUAbsenseForm');
                                         //window.open( 'https://wguir.us.qualtrics.com/SE/?SID=SV_9REPlBlY4GBO9ql', '_WGUAbsenseForm');
                                      
                                      /*
                                         MyFieldExperienceController.getCSRequestClinicalSupervisor( fieldExperience.Id, function(clinicalSupervisorId,er){
                                            if ( er.status && clinicalSupervisorId && clinicalSupervisorId.length == 18 ) {
                                                MyFieldExperienceController.getFEPlacements( fieldExperience.Id, function(results,er){
                                                    if (er.status) {
                                                          if ( results && Ext.isArray(results) && results.length > 0 ) {
                                                              MyFieldExperienceController.getRecordedAbsences( fieldExperience.Id, function(absences,er){
                                                                  absences = absences? Ext.decode(absences): [];
                                                                  var dialog = Ext.create('WGU.view.AbsenceDialog',{});
                                                                  dialog.show();
                                                                  if ( absences && absences.length && absences.length>0) {
                                                                     var tooltipHTML = '<table style="border:0;width:100%"><tr style="padding:0 0 5px 0;font-weight:bold"><td>Reason</td><td>Start</td><td>End</td><td style="text-align:center;">Days</td></tr>'; 
                                                                     var totalAbsences = 0;
                                                                     for (var a=0; a < absences.length; a++ ) {
                                                                        var record = absences[a];
                                                                        tooltipHTML += '<tr><td>'+record.AbsenceReason__c+'</td><td>'+record.FirstDayAbsent__c+'</td><td>'+record.LastDayAbsent__c+'</td><td style="text-align:center;">'+record.NumberofDaysAbsent__c+'</td></tr>';
                                                                        totalAbsences += record.NumberofDaysAbsent__c;
                                                                     }
                                                                     tooltipHTML += '<tr><td></td><td></td><td style="font-weight:bold;text-align:right;">Total Days:</td><td style="font-weight:bold;text-align:center;">'+totalAbsences+'</td></tr></table>';
                                                                     dialog.absencesTooltip = Ext.create('Ext.tip.ToolTip', {
                                                                        target: 'ViewAbsencesDiv',
                                                                        id: 'AbsencesTooltip',
                                                                        maxWidth: 350,
                                                                        width: 350,
                                                                        minWidth: 350,
                                                                        minHeight: 50,
                                                                        showDelay: 100,
                                                                        dismissDelay: 0
                                                                    });
                                                                    dialog.absencesTooltip.update(tooltipHTML);
                                                                  }
                                                                  for(var r=0; r<results.length; r++){
                                                                    results[r].PlacementName = results[r].SchoolName__c || results[r].District__r.Name;
                                                                    results[r].ClinicalSupervisor__c = clinicalSupervisorId;
                                                                  }
                                                                  
                                                                  setTimeout( function() {
                                                                    dialog.absenceRelatedLocationComboField.store.loadDataViaReader(results);
                                                                    dialog.absenceRelatedLocationComboField.setValue( results[0].Id );
                                                                    dialog.absenceRelatedLocationComboField.setReadOnly( results.length == 1 );
                                                                  }, 100);
                                                              }, {escape:false});
                                                              
                                                          } else {
                                                              Ext.Msg.show({
                                                                 title:'No School Placements',
                                                                 msg: 'You cannot submit an Absentee Form until you have an \'Accepted\' placement. Please work with your Placement Specialist on this matter by calling 866-889-0132, Option 1.',
                                                                 buttons: Ext.Msg.OK,
                                                                 icon: Ext.Msg.INFO
                                                              });
                                                          } 
                                                    } else {
                                                       WGUpanel.setLoading(false);
                                                       if ( er.type == "exception" ) {
                                                           var subheaderFEContent = "<div>Placement Query Error <span>- "+er.message+"</span></div>";
                                                           Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                       }
                                                    }
                                               });
                                               
                                            } else {
                                               WGUpanel.setLoading(false);
                                               if ( er.type == "exception" ) {
                                                   var subheaderFEContent = "<div>ClinicalSupervisor Query Error <span>- "+er.message+"</span></div>";
                                                   Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                               }
                                               if (!clinicalSupervisorId) {
                                                     Ext.Msg.show({
                                                        title:'Clinical Supervisor Assignment Required',
                                                        msg: 'You must have a confirmed placement and clinical supervisor assigned before you can submit an absence request.<br/><br/>Please contact your WGU Placement Specialist at <a style="text-decoration:none;" href="fieldexperiences@wgu.edu">fieldexperiences@wgu.edu</a><br/>or call 866-889-0132, Option 1.',
                                                        buttons: Ext.Msg.OK,
                                                        icon: Ext.Msg.WARNING
                                                     });
                                                   if( console && console.log) {
                                                     console.log( 'ClinicalSupervisor__c could not be determined for FieldExperience Id ' + fieldExperience.Id );
                                                   }
                                                   return false;
                                               }
                                            }
                                           });  
                                           */                                                                                
                                      }
                                    }
                                },
                                {
                                    xtype: 'component',
                                    id: 'to-do-list-spacer',
                                    flex: 1
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            id: 'rightColumn',
                            style: '{padding: 0 0 0 0; margin: 2px 30px 0 30px; width: 599px;}',
                            layout: {
                                align: 'stretch',
                                type: 'vbox'
                            },
                            defaults: {
                                border: false
                            },
                            items: [
                                {
                                    xtype: 'label',
                                    id: 'myFELabel',
                                    text: 'My Field Experience',
                                    style: '{padding: 5px 0 0 0;}',
                                    cls: 'myFELabel'
                                },
                                {
                                    xtype: 'container',
                                    style: '{;}',
                                    height: 660,
                                    //flex: 1,
                                    border: false,
                                    id: 'cardStack',
                                    activeItem:0,
                                    layout: {
                                        type: 'card'
                                    },
                                    defaults: {
                                        border: false
                                    },
                                    items: [
                                        {
                                            //initial view of right column, no to do item selected
                                            xtype: 'container',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            //example items for other panels
                                            items: [
                                                     {
                                                        xtype: 'component',
                                                        html: "<p>Select an item you wish to complete from the To Do List at left.</p>",
                                                        x: 5,
                                                        y: 0
                                                     }

                                                   ]
                                        },{
                                            //Field Experiences Application Overview
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'panel',
                                                        border: false,
                                                        html: '<div style="font: Arial, serif; font-size: 9pt"><p style="margin-bottom:10.1pt"><span style="font-size:9.0pt;color:black">The Field Experience Portal includes all requirements for approval into Pre Clinical Experiences (PCE) and Demonstration Teaching (DT) and will be approved in two phases: PCE approval and then DT approval.</span></p><p style="margin-bottom:10.1pt"><b><span style="font-size:9.0pt;color:black">Personal Information Verification:</span></b><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size: 9.0pt;color:black">Please check your information. If your address or contact information is incorrect, you must change this information on your Degree Plan. Go to the top of your Degree Plan and click on your name. Your name is a link that takes you to your personal information for editing.</span></p><p><b><span style="font-size:9.0pt;line-height:115%">Teachers College Code of Ethics, Professional Behaviors and Dispositions</span></b><span style="font-size:9.0pt;line-height:115%">: The Teachers College Code of Ethics, Professional Behaviors and Dispositions (the “Code”) sets forth standards regarding professional behavior and dispositions expected of WGU Students and graduates, and describes the process for corrective action if a Student violates these standards. You are required to read the Teachers College Code of Ethics, Professional Behaviors and Dispositions and acknowledge you have done so. See <a href="http://kb.wgu.edu/article.aspx?article=1489&amp;p=3" target="_blank">http://kb.wgu.edu/article.aspx?article=1489&amp;p=3</a> </span></p><br><p style="margin-bottom:10.1pt"><b><span style="font-size:14.0pt;color:black">PCE Phase Requirements</span></b></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">1.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt">Teachers College Code of Ethics, Professional Behaviors and Dispositions</span></b><span style="font-size:9.0pt">: <span style="color:black">Acknowledgement of </span>Teachers College Code of Ethics, Professional Behaviors and Dispositions.</span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">2.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">State Intended for Licensing:</span></b><span class=apple-converted-space><span style="font-size: 9.0pt;color:black">&nbsp;</span></span><span style="font-size:9.0pt;color:black">Select the state where you intend to license. </span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">3.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">License Name for Certification:<span class=apple-converted-space>&nbsp;</span></span></b><span style="font-size:9.0pt;color:black">Select the license you are seeking.</span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">4.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">SFAW Assessment:<span class=apple-converted-space>&nbsp;</span></span></b><span style="font-size: 9.0pt;color:black">SFAW is the professional resume, philosophy of teaching and professional photo assessment. See SFAW, Field Experience Application Documents, in TaskStream. If SFAW is not available in TaskStream, your mentor must manually refer you. Once this assessment is approved, you will receive a mark on your Degree Plan below the line indicating a pass.</span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">5.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">Basic Skills Exams:<span class=apple-converted-space>&nbsp;</span></span></b><span style="font-size: 9.0pt;color:black">All WGU teacher licensure programs require passing basic skills exams prior to PCE. See the Student Handbook<span class=apple-converted-space>&nbsp;</span></span><a href="http://www.wgu.edu/sh" target="_blank"><span style="font-size:9.0pt">www.wgu.edu/sh</span></a><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size:9.0pt;color:black">and search for your state’s basic skills exams requirements. If you have not yet submitted an official copy of your passing scores to<span class=apple-converted-space>&nbsp;</span></span><a href="mailto:scores@wgu.edu" target="_blank"><span style="font-size:9.0pt">scores@wgu.edu</span></a><span style="font-size:9.0pt;color:black">, please do so immediately.</span></p><p style="margin-left:.5in;text-indent:-.25in"><span style="font-size:9.0pt; color:black">6.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">Background Clearance for PCE:<span class=apple-converted-space>&nbsp;</span></span></b><span style="font-size:9.0pt;color:black">All students who will complete field experiences (PCE, DT, practicum and/or teacher work sample) as part of their program must provide WGU with verification of a cleared background check prior to entering the classroom.&nbsp; You must obtain the type of background check required for the state where you will do your field experiences.&nbsp; </span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">7.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">Liability Insurance Upload for PCE:</span></b><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size: 9.0pt;color:black">Students are required to provide proof of insurance and liability protection during field experiences. Professional liability coverage can be obtained through educators’ associations and personal insurance. See the<span class=apple-converted-space>&nbsp;</span></span><a href="http://kb.wgu.edu/article.aspx?article=1488&amp;p=3" target="_blank"><i><span style="font-size:9.0pt">Student Handbook article</span></i></a><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size:9.0pt;color:black">for more information on obtaining liability insurance.</span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">8.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">FERPA Upload:</span></b><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size:9.0pt;color:black">The Family Educational Rights and Privacy Act of 1974 (FERPA) is a Federal law designed to protect the privacy of student education records. Due to the FERPA laws, WGU may not give out your personal information without your written consent. Before we can begin working on your placement, which may require us to give out information to a district or school, we need you to fill out a FERPA information release form. See the<span class=apple-converted-space>&nbsp;</span></span><a href="http://kb.wgu.edu/article.aspx?article=1487&amp;p=3" target="_blank"><i><span style="font-size:9.0pt">Student Handbook article.</span></i></a> <span style="font-size:9.0pt">You will need to upload either a picture or scan of the physically signed FERPA form.  Typed or electronic signatures cannot be accepted.</span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">9.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">School Preference:<span class=apple-converted-space>&nbsp;</span></span></b><span style="font-size: 9.0pt;color:black">School and district choice for PCE and/or DT. You will be setting up your own PCE placement; however, there are some districts that require placement requests to come from the university.  Select your school and district. We will email you within two business days advising you to contact the school directly or work through your placement specialist. Please wait to hear from us before contacting the schools directly.  Note: all schools must have proper accreditation. Private and charter schools must be verified.</span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">10.<span style="font:7.0pt "Times New Roman"">&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">PCE Verification Form Upload:</span></b><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size:9.0pt;color:black">The PCE verification form is the document signed by the principal or school official agreeing to allow the student to volunteer for the pre-clinical experiences (classroom observations and tasks.)</span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">11.<span style="font:7.0pt "Times New Roman"">&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">Cohort:</span></b><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size:9.0pt;color:black">Select the month and year you intend to begin DT. </span></p><p style="margin-bottom:10.1pt"><b><span style="font-size:9.0pt;color:black">Content Exams: </span></b><span style="font-size:9.0pt">Consult with your mentor on when you should register to take your content exams.  <span style="color:black">See the Student Handbook for your state content exam and program requirements<span class=apple-converted-space>&nbsp;</span></span></span><a href="http://www.wgu.edu/sh" target="_blank"><span style="font-size:9.0pt">www.wgu.edu/sh</span></a>. <span style="font-size:9.0pt;color:black">You must take and pass all state certification and/or WGU program required content exams prior to DT and graduation. You will need to have taken or registered to take your content exams for DT phase approval. </span></p><p style="margin-bottom:12.0pt"><b><span style="font-size:9.0pt;color:black">PCE Phase Approval:</span></b><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size: 9.0pt;color:black">Once all the above items have been verified and accepted, your PCE phase will be approved and you may begin your in-class PCE tasks. No student is allowed to begin PCE without PCE phase approval.</span></p><p style="margin-bottom:10.1pt"><b><span style="font-size:14.0pt;color:black">DT Phase Requirements</span></b></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">1.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">Cohort:</span></b><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size:9.0pt;color:black"> Select the month and year you intend to begin DT.</span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">2.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">DT Affidavit:</span></b><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size:9.0pt;color:black">Acknowledgement of Requirements and Deadlines for DT.</span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">3.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">Cohort Timeline for DT:</span></b><span class=apple-converted-space><span style="font-size:9.0pt; color:black">&nbsp;</span></span><span style="font-size:9.0pt;color:black">The timeline is a guide for you to follow in order to complete requirements by the progress audit deadlines. You will acknowledge you have read and understand your program’s timeline requirements.</span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">4.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">School Preference:</span></b><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size:9.0pt;color:black">Additional schools for DT placement requests.  </span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">5.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">Content Exams:</span></b><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size:9.0pt;color:black">If content exams have not been taken and passed on your Degree Plan you must register to take all state certification required exams and upload the registration tickets.  See the <b>Cohort Timeline</b> for exam registration deadlines.  Go to the Student Handbook for your state content exam and program requirements.<span class=apple-converted-space>&nbsp;</span></span><a href="http://www.wgu.edu/sh" target="_blank"><span style="font-size:9.0pt">www.wgu.edu/sh</span></a></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">6.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">Additional Placement Information:</span></b><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size: 9.0pt;color:black">Information to help us best implement your placement.</span></p><p style="margin-top:5.0pt;margin-right:0in;margin-bottom:10.1pt;margin-left: .5in;text-indent:-.25in"><span style="font-size:9.0pt;color:black">7.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">DT Background Clearance:<span class=apple-converted-space>&nbsp;</span></span></b><span style="font-size:9.0pt;color:black">All students who will complete field experiences (PCE, DT, practicum and/or teacher work sample) as part of their program must provide WGU with verification of a cleared background check prior to entering the classroom.&nbsp; You must obtain the type of background check required for the state where you will do your field experiences.&nbsp; (Not required for DT Phase Approval or Provisional Acceptance in the cohort, but for entry in the classroom.)</span></p><p style="margin-left:.5in;text-indent:-.25in"><span style="font-size:9.0pt; color:black">8.<span style="font:7.0pt "Times New Roman"">&nbsp;&nbsp;&nbsp;</span></span><b><span style="font-size:9.0pt;color:black">Liability Insurance Upload for DT:</span></b><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size: 9.0pt;color:black">Students are required to provide proof of insurance and liability protection during field experiences. Professional liability coverage can be obtained through educators’ associations and personal insurance. See the<span class=apple-converted-space>&nbsp;</span></span><a href="http://kb.wgu.edu/article.aspx?article=1488&amp;p=3" target="_blank"><i><span style="font-size:9.0pt">Student Handbook article</span></i></a><span class=apple-converted-space><span style="font-size:9.0pt;color:black">&nbsp;</span></span><span style="font-size:9.0pt;color:black">for more information on obtaining liability insurance. (Not required for DT Phase Approval or Provisional Acceptance in the cohort, but for entry in the classroom.)</span></p><br><p><b><span style="font-size:9.0pt;color:black">Signed PCE Task Summary Upload:   </span></b><span style="font-size:9.0pt;color:black">The task list is a summary of in-class responsibilities. Program specific task lists can be found in the </span><a href="http://kb.wgu.edu/article.aspx?article=1637&amp;p=3" target="_blank"><span style="font-size:9.0pt">Student Handbook article</span></a><span style="font-size:9.0pt;color:black">.  Once it has been signed by your host teacher/s and principal, upload to your Field Experience Portal.</span></p><br><p><b><span style="font-size:9.0pt;color:black">Upload Additional Files: </span></b><span style="font-size:9.0pt;color:black">If directed to do so by Field Placement staff, you may attach additional files to your Field Experience Portal data.</span></p><br><br><br></div>',
                                                        autoScroll: true,
                                                        title: 'Please Read and Acknowledge',
                                                        x: 5,
                                                        y: 5,
                                                        width: 500,
                                                        height:455
                                                    },
                                                    {
                                                        xtype: 'checkbox',
                                                        id: 'FieldExperiencesOverviewCheckBox',
                                                        fieldLabel: 'I have read and understood the above overview',
                                                        x: 5,
                                                        y: 475,
                                                        labelWidth: 300,
                                                        width: 350,
                                                        handler: function (checkbox, checked) {
                                                          if (checked == true ) {
                                                                WGUpanel.setLoading('Saving...');
                                                                var toDoItem = getToDoItemFromIndex(CARD.FieldExperiencesOverview);
                                                                templateRecord = getTemplateItemFromIndex(CARD.FieldExperiencesOverview);         
                                                                if (toDoItem != null) {
                                                                    MyFieldExperienceController.setToDoComplete(
                                                                     toDoItem.Id,
                                                                     function(saveResult, er){ 
                                                                       if ( er.status ) {
                                                                            if ( saveResult == true ) {
                                                                               //go to next task
                                                                               refreshToDoList(templateRecord.NextCardIndex__c);
                                                                            }
                                                                       } else {
                                                                           WGUpanel.setLoading(false);
                                                                           if ( er.type == "exception" ) {
                                                                                var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                           }
                                                                       }
                                                                     }, {escape:false});
                                                                 }
                                                              }
                                                      }
                                                    }
                                                   ]
                                            
                                        },
                                        {
                                            //Personal Information Verification
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>Please verify that your personal information is accurate. <a href='{!VerifyPersonalInfoURL}' onclick='window.open(this.href);return false;'>Personal Link</a></p>",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                    {
                                                        xtype: 'checkbox',
                                                        id: 'personalInformationVerificationCheckBox',
                                                        value: 'Confirm personal information is accurate.',
                                                        fieldLabel: 'I verify that my personal information is accurate',
                                                        x: 5,
                                                        y: 30,
                                                        labelWidth: 300,
                                                        width: 350,
                                                        handler: function (checkbox, checked) {
                                                          if (checked == true ) {
                                                                WGUpanel.setLoading('Saving...');
                                                                var toDoItem = getToDoItemFromIndex(CARD.PersonalInformationVerification);
                                                                templateRecord = getTemplateItemFromIndex(CARD.PersonalInformationVerification); 
                                                                if (toDoItem != null) {
                                                                    MyFieldExperienceController.setToDoComplete(
                                                                     toDoItem.Id,
                                                                     function(saveResult, er){ 
                                                                       if ( er.status ) {
                                                                            if ( saveResult == true ) {
                                                                               //go to next task
                                                                               refreshToDoList(templateRecord.NextCardIndex__c);
                                                                            }
                                                                       } else {
                                                                           WGUpanel.setLoading(false);
                                                                           if ( er.type == "exception" ) {
                                                                                var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                            }
                                                                       }
                                                                     }, {escape:false});
                                                                }
                                                          }
                                                       }
                                                    }
                                                   ]
                                        },
                                        {
                                            //Teacher College Code of Ethics
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>Please read the <a href='http://kb.wgu.edu/article.aspx?article=1489&amp;p=3' target='_blank'>WGU Teacher's College Code of Ethics, Professional Behavior and Dispositions</a>.</p>",
                                                        x: 5,
                                                        y: 0
                                                    },
                                                    {
                                                        xtype: 'checkbox',
                                                        id: 'teacherCollegeCodeOfEthicsCheckBox',
                                                        value: 'Agree to abide by WGU Teacher\'s College Code of Ethics, Professional Behavior and Dispositions',
                                                        fieldLabel: 'I agree to abide by WGU Teacher\'s College Code of Ethics, Professional Behavior and Dispositions',
                                                        x: 5,
                                                        y: 30,
                                                        labelWidth: 505,
                                                        width: 510,
                                                        handler: function (checkbox, checked) {
                                                          if (checked == true)  {
                                                                WGUpanel.setLoading('Saving...');
                                                                var toDoItem = getToDoItemFromIndex(CARD.TeacherCollegeCodeOfEthics);
                                                                templateRecord = getTemplateItemFromIndex(CARD.TeacherCollegeCodeOfEthics); 
                                                                if (toDoItem != null) {
                                                                    MyFieldExperienceController.setToDoComplete(
                                                                     toDoItem.Id,
                                                                     function(saveResult, er){ 
                                                                        if ( er.status ) {
                                                                            if ( saveResult == true ) {
                                                                               //go to next task
                                                                               refreshToDoList(templateRecord.NextCardIndex__c);
                                                                            }
                                                                        } else {
                                                                            WGUpanel.setLoading(false);
                                                                            if ( er.type == "exception" ) {
                                                                                var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                            }
                                                                        }
                                                                     }, {escape:false});
                                                                }
                                                          }
                                                       }
                                                    }
                                            ]
                                        },
                                        {
                                            //State intended for DT & License Name for Certification
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [ {
                                                        xtype: 'component',
                                                        html: "<p>Please complete and save the following information.</p>",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                    {
                                                        xtype: 'combobox',
                                                        id: 'stateForDTCombo',
                                                        multiSelect: false,
                                                        fieldLabel: 'Select your intended state for Licensing',
                                                        x: 5,
                                                        y: 30,
                                                        store: statesStore,
                                                        queryMode: 'local',
                                                        typeAhead: true,
                                                        labelWidth: 245,
                                                        width: 460,
                                                        displayField: 'name',
                                                        valueField: 'name'
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        id: 'stateForDTSaveButton',
                                                        text: 'Save State',
                                                        x: 5,
                                                        y: 60,
                                                         handler: function() {
                                                            if ( stateForDTCombo.getRawValue() ) {
                                                              WGUpanel.setLoading('Saving...');
                                                              MyFieldExperienceController.setLicenseState(stateForDTCombo.getValue(),function(result, er){
                                                                   if ( er.status ) {
                                                                       if (result == true) {
                                                                            var toDoItem = getToDoItemFromIndex(CARD.StateIntendedForLicensing);
                                                                            templateRecord = getTemplateItemFromIndex(CARD.StateIntendedForLicensing);
                                                                            if (toDoItem != null) {
                                                                                MyFieldExperienceController.setToDoComplete(
                                                                                 toDoItem.Id,
                                                                                 function(saveResult, er){ 
                                                                                    if ( er.status ) {
                                                                                        if ( saveResult == true ) {
                                                                                           //go to next task
                                                                                           refreshToDoList(templateRecord.NextCardIndex__c);
                                                                                        }
                                                                                    } else {
                                                                                        WGUpanel.setLoading(false);
                                                                                        if ( er.type == "exception" ) {
                                                                                            var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                            Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                                        }
                                                                                    }
                                                                                 }, {escape:false});
                                                                             }
                                                                       } else {
                                                                            WGUpanel.setLoading(false);
                                                                       }
                                                                   } else {
                                                                       WGUpanel.setLoading(false);
                                                                       if ( er.type == "exception" ) {
                                                                            var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                            Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                       }
                                                                   }
                                                                }, {escape:false});
                                                           }
                                                        }
                                                    }
                                            ]
                                        },
                                        {
                                            //License Name for Certification
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [ 
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>Please complete and save the following information.</p>",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                   {
                                                        xtype: 'combobox',
                                                        id: 'licensingCombo',
                                                        multiSelect: false,
                                                        fieldLabel: 'Select your Licensing Goal',
                                                        store: licensesStore,
                                                        x: 5,
                                                        y: 30,
                                                        queryMode: 'local',
                                                        typeAhead: true,
                                                        labelWidth: 170,
                                                        width: 540,
                                                        displayField: 'Name',
                                                        valueField: 'Id'
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        id: 'licensingSaveButton',
                                                        text: 'Save License Goal',
                                                        x: 5,
                                                        y: 60,
                                                         handler: function() {
                                                            if ( licensingCombo.getRawValue() && fieldExperience.State__c != null && fieldExperience.State__c != "null" ) {
                                                                 WGUpanel.setLoading('Saving...');
                                                                 MyFieldExperienceController.setLicenseGoal(licensingCombo.getValue(),function(result, er){
                                                                     if ( er.status ) {
                                                                         if (result == true) {
                                                                            var toDoItem = getToDoItemFromIndex(CARD.LicenseNameForCertification);
                                                                            templateRecord = getTemplateItemFromIndex(CARD.LicenseNameForCertification);
                                                                            if (toDoItem != null) {
                                                                                MyFieldExperienceController.setToDoComplete(
                                                                                 toDoItem.Id,
                                                                                 function(saveResult, er){ 
                                                                                   if ( er.status ) {
                                                                                        if ( saveResult == true ) {
                                                                                           //go to next task
                                                                                           refreshToDoList(templateRecord.NextCardIndex__c);
                                                                                        }
                                                                                   } else {
                                                                                       WGUpanel.setLoading(false);
                                                                                       if ( er.type == "exception" ) {
                                                                                            var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                            Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                                       }
                                                                                   }
                                                                                 }, {escape:false});
                                                                             }
                                                                         } else {
                                                                            WGUpanel.setLoading(false);
                                                                         }
                                                                     } else {
                                                                         WGUpanel.setLoading(false);
                                                                         if ( er.type == "exception" ) {
                                                                            var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                            Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                         }
                                                                     }

                                                               }, {escape:false});
                                                           } else {
                                                              if ( fieldExperience.State__c != null && fieldExperience.State__c != "null" ) {
                                                                  Ext.Msg.show({
                                                                     title:'No License Selected',
                                                                     msg: 'Please select a valid license before clicking save.',
                                                                     buttons: Ext.Msg.OK,
                                                                     icon: Ext.Msg.INFO
                                                                  });
                                                              } else {
                                                                 Ext.Msg.show({
                                                                     title:'State for Licensing?',
                                                                     msg: 'You have not yet selected a state for Licensure. Would you like to select a state now?',
                                                                     buttons: Ext.Msg.YESNO,
                                                                     icon: Ext.Msg.QUESTION,
                                                                     fn: function(btn, text) {
                                                                       if (btn == 'yes') {
                                                                         todoItemIndex = CARD.StateIntendedForLicensing;
                                                                         toDoList.getSelectionModel().select(CARD.StateIntendedForLicensing-1);
                                                                       }
                                                                     }
                                                                 });
                                                             }
                                                           }
                                                        }
                                                    }
                                            ]
                                        },
                                        {
                                            //SFAW Assessment
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>SFAW is the professional resume, philosophy of teaching and professional photo assessment. See SFAW, Field Experience Application Documents, in TaskStream.  If SFAW is not available in TaskStream, your mentor must manually refer you.  Once this assessment is approved, you will receive a mark on your Degree Plan below the line indicating a pass.</p>",
                                                        x: 5,
                                                        y: 0
                                                   }
                                                   ]
                                        },
                                        {
                                            //Basic Skills Exams
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>All WGU teacher licensure programs require passing basic skills exams prior to PCE. See the <a href='http://www.wgu.edu/sh' onclick='window.open(this.href);return false;'>Student Handbook</a> and search for your state’s basic skills exams requirements. If you have not yet submitted an official copy of your passing scores to <a href='mailto:scores@wgu.edu' onclick='window.open(this.href);return false;'>scores@wgu.edu</a>, please do so immediately.</p>",
                                                        x: 5,
                                                        y: 0
                                                   }
                                                   ]
                                        },
                                        {
                                            //PCE Background Clearance
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>Go to the TC Licensure and Certification section of the <a href='http://www.wgu.edu/sh' onclick='window.open(this.href);return false;'>Student Handbook</a>, navigate to the folder for your state, and follow the instructions for obtaining the required Background Clearance(s).  Submit the completed Background Clearance by email to licensure@wgu.edu or by fax to (801) 401-7961.  <b>DO NOT</b> upload Background Clearances to this site.</p><br><p>The Licensure Department must review and verify all background clearances before posting them to your records, so the Background Clearance task may not immediately show as completed.  You will receive an email from the Licensure Department to confirm that your background clearance has been received.    </p>",
                                                        x: 5,
                                                        y: 0
                                                   }
                                                   ]
                                        },
                                        {
                                            //Liability Insurance Upload
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>Students are required to provide proof of insurance and liability protection during field experiences. Professional liability coverage can be obtained through educators’ associations and personal insurance. See the Student Handbook <a href='http://kb.wgu.edu/article.aspx?article=1488&p=3' onclick='window.open(this.href);return false;'>article for more information on obtaining liability insurance</a>.</p>",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                   {
                                                        xtype: 'component',
                                                        height: 200,
                                                        width: 500,
                                                        html: "<div id='LiabilityInsuranceUploadPanel'>",
                                                        x: 5,
                                                        y: 90
                                                   }
                                                   ]
                                        },
                                        {
                                            //FERPA Upload
                                            xtype: 'panel', 
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>The Family Educational Rights and Privacy Act of 1974 (FERPA) is a Federal law designed to protect the privacy of student education records. Due to the FERPA laws, WGU may not give out your personal information without your written consent. Before we can begin working on your placement, which may require us to give out information to a district or school, we need you to fill out a FERPA information release form. <a href='http://kb.wgu.edu/article.aspx?article=1487&p=3' onclick='window.open(this.href);return false;'>See the Student Handbook article</a>.</p>",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                   {
                                                        xtype: 'component',
                                                        height: 200,
                                                        width: 500,
                                                        html: "<div id='FERPAUploadPanel'>",
                                                        x: 5,
                                                        y: 90
                                                   }
                                                   ]
                                        },
                                        {
                                            //School Preference
                                            xtype: 'panel',
                                            id: 'schoolPref',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        style: 'font-size: 11px;',
                                                        html: "<p><b>PCE: School Preference</b></p><p>You will be setting up your own PCE placement; however, there are some districts that require placement requests to come from the university.</p> <br><p>Add a school or district preference. We will email you within two business days advising you to contact the school directly or work through your placement specialist. <u><i>Please wait to hear from us before contacting any school directly</i></u>.</p> <br><p><b>DT: School Preference</b></p><p>Add a school or district placement preference. Adding at least three (3) preferences is recommended.</p>",
                                                        x: 5,
                                                        y: 0
                                                   }, 
                                                   {
                                                        xtype: 'fieldset',
                                                        title: 'Find a School or District for Placement',
                                                        x: 5,
                                                        y: 175,
                                                        width: 330,
                                                        defaultType: 'radio', 
                                                        layout: 'anchor',
                                                        defaults: {
                                                            anchor: '100%',
                                                            hideEmptyLabel: false
                                                        },
                                                        items: [
                                                                {
                                                                    fieldLabel: 'Search for',
                                                                    labelWidth: 120,
                                                                    id: 'schoolSearchRadio',
                                                                    checked: true,
                                                                    boxLabel: 'School',
                                                                    name: 'searchBy',
                                                                    inputValue: 'School',
                                                                    handler: function(radioButton, checked ) {
                                                                      if (checked) {
                                                                        schoolPreferenceSearchTermField.labelEl.dom.innerHTML = 'Search for School:';
                                                                      }
                                                                    }
                                                                }, 
                                                                {
                                                                    labelWidth: 120,
                                                                    id: 'districtSearchRadio',
                                                                    boxLabel: 'District',
                                                                    name: 'searchBy',
                                                                    inputValue: 'District',
                                                                    handler: function(radioButton, checked ) {
                                                                      if (checked) {
                                                                        schoolPreferenceSearchTermField.labelEl.dom.innerHTML = 'Search for District:';
                                                                      }
                                                                    }
                                                                }, 
                                                                {
                                                                    xtype: 'combobox',
                                                                    labelWidth: 120,
                                                                    id: 'stateForSchoolPreferenceSearchCombo',
                                                                    multiSelect: false,
                                                                    fieldLabel: 'Select a State',
                                                                    store: statesStore,
                                                                    queryMode: 'local',
                                                                    typeAhead: true,
                                                                    displayField: 'name',
                                                                    valueField: 'abbr'
                                                                },
                                                                {
                                                                    xtype: 'textfield',
                                                                    labelWidth: 120,
                                                                    id: 'schoolPreferenceSearchTermField',
                                                                    fieldLabel: 'Search for School',
                                                                    enableKeyEvents : true,
                                                                    listeners: {
                                                                                   specialkey: function(field, event){
                                                                                        if ( event.getKey() == event.ENTER ) {
                                                                                           event.stopEvent();
                                                                                           schoolPreferenceSearchButton.fireEvent('click', schoolPreferenceSearchButton);
                                                                                        }
                                                                                   }
                                                                               }                                                                
                                                                },
                                                                {
                                                                    xtype: 'button',
                                                                    id: 'schoolPreferenceSearchButton',
                                                                    text: 'Search',
                                                                    listeners: {
                                                                      click: function(button, event, eOpts ) {
                                                                                                                                                if ( stateForSchoolPreferenceSearchCombo.getRawValue() ) {
                                                                          var statePreference = stateForSchoolPreferenceSearchCombo.getValue();
                                                                          if ( schoolPreferenceSearchTermField.getRawValue() && schoolPreferenceSearchTermField.getRawValue().length > 2 ) {
                                                                              var searchText = schoolPreferenceSearchTermField.getRawValue();
                                                                              var findDistrict = districtSearchRadio.getValue();
                                                                              schoolPreferenceSearchGrid.setLoading('Searching...');
                                                                              if ( findDistrict ) {
                                                                                  MyFieldExperienceController.findDistrict(searchText , statePreference ,function(result, er){
                                                                                    if ( er.status ) {
                                                                                          if (result) {
                                                                                              addCustomSchoolOrDistrictButton.setDisabled(false);
                                                                                              var rawDistrictRecords = Ext.decode( result );
                                                                                              if ( rawDistrictRecords.Records != null && rawDistrictRecords.Records.length > 0 ) {
                                                                                                  if ( feprocessesStore.getCount() > 0 ) {
                                                                                                    for ( var r=0; r < rawDistrictRecords.Records.length; r++ ) {
                                                                                                      var record = feprocessesStore.findRecord( 'SchoolDistrict', rawDistrictRecords.Records[r].Id );
                                                                                                      if ( record ) {
                                                                                                        rawDistrictRecords.Records.splice(r,1);
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                  districtsStore.loadDataViaReader( rawDistrictRecords );
                                                                                                  var columns = [
                                                                                                            {
                                                                                                                xtype: 'gridcolumn',
                                                                                                                dataIndex: 'string',
                                                                                                                text: 'District Name',
                                                                                                                dataIndex: 'Name',
                                                                                                                width: 60
                                                                                                            },
                                                                                                            {
                                                                                                                xtype: 'gridcolumn',
                                                                                                                dataIndex: 'string',
                                                                                                                text: 'City',
                                                                                                                dataIndex: 'City',
                                                                                                                width: 40
                                                                                                            }
                                                                                                        ];
                                                                                                  schoolPreferenceSearchGrid.reconfigure( districtsStore, columns );
                                                                                                  createPlacementButton.setDisabled(true);
                                                                                                  if ( districtsStore.getCount() == 0 ) {
                                                                                                            Ext.Msg.show({
                                                                                                                 title:'District Already Selected',
                                                                                                                 msg: 'This District is already listed in your placement requests.',
                                                                                                                 buttons: Ext.Msg.OK,
                                                                                                                 icon: Ext.Msg.INFO
                                                                                                                 }
                                                                                                            );                                                                                                
                                                                                                  } 
                                                                                              }  else {  // else rawDistrictRecords.Records.length == 0
                                                                                                Ext.Msg.show({
                                                                                                     title:'Add an Unlisted School or District?',
                                                                                                     msg: 'Your search did not find any school or district entries. Would you like to add a request for an unlisted School or District?',
                                                                                                     buttons: Ext.Msg.YESNO,
                                                                                                     icon: Ext.Msg.QUESTION,
                                                                                                     fn: function(btn, text) {
                                                                                                       if (btn == 'yes') {
                                                                                                         addCustomSchoolOrDistrictButton.fireEvent('click', addCustomSchoolOrDistrictButton);
                                                                                                       } 
                                                                                                     }
                                                                                                });
                                                                                              }
                                                                                              schoolPreferenceSearchGrid.setLoading(false);
                                                                                          } else {
                                                                                            schoolPreferenceSearchGrid.setLoading(false);
                                                                                          }
                                                                                      } else {
                                                                                          WGUpanel.setLoading(false);
                                                                                          if ( er.type == "exception" ) {
                                                                                                var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                                Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                                           }
                                                                                      }
                                                                                  }, {escape:false});
                                                                              } else { //find school
                                                                                  MyFieldExperienceController.findSchool(searchText , statePreference ,function(result, er){
                                                                                      if ( er.status ) {
                                                                                          if (result) {
                                                                                              addCustomSchoolOrDistrictButton.setDisabled(false);
                                                                                              var rawSchoolRecords = Ext.decode( result );
                                                                                              if ( rawSchoolRecords != null && rawSchoolRecords.Records.length > 0 ) {
                                                                                                  if ( feprocessesStore.getCount() > 0 ) {
                                                                                                    for ( var r=0; r< rawSchoolRecords.Records.length; r++ ) {
                                                                                                      var record = feprocessesStore.findRecord( 'School', rawSchoolRecords.Records[r].Id );
                                                                                                      if ( record  ) {
                                                                                                        rawSchoolRecords.Records.splice(r,1);
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                  schoolsStore.loadDataViaReader( rawSchoolRecords );
                                                                                                  var columns = [
                                                                                                            {
                                                                                                                xtype: 'gridcolumn',
                                                                                                                dataIndex: 'string',
                                                                                                                text: 'School Name',
                                                                                                                dataIndex: 'Name',
                                                                                                                width: 35
                                                                                                            },
                                                                                                            {
                                                                                                                xtype: 'gridcolumn',
                                                                                                                dataIndex: 'string',
                                                                                                                text: 'City',
                                                                                                                dataIndex: 'City',
                                                                                                                width: 30
                                                                                                            },
                                                                                                            {
                                                                                                                xtype: 'gridcolumn',
                                                                                                                dataIndex: 'string',
                                                                                                                text: 'District Name',
                                                                                                                dataIndex: 'SchoolDistrictName',
                                                                                                                width: 35
                                                                                                            }
                                                                                                        ];
                                                                                                  schoolPreferenceSearchGrid.reconfigure( schoolsStore, columns );
                                                                                                  if ( schoolsStore.getCount() == 0 ) {
                                                                                                        Ext.Msg.show({
                                                                                                             title:'School Already Selected',
                                                                                                             msg: 'This School is already listed in your placement requests.',
                                                                                                             buttons: Ext.Msg.OK,
                                                                                                             icon: Ext.Msg.INFO
                                                                                                             }
                                                                                                        );                                                                                                
                                                                                                  } 
                                                                                                  createPlacementButton.setDisabled(true);
                                                                                              } else {  //no schools found
                                                                                                Ext.Msg.show({
                                                                                                     title:'Search Again in Districts?',
                                                                                                     msg: 'Your search values were not found in Schools. Would you like to search again in Districts?',
                                                                                                     buttons: Ext.Msg.YESNO,
                                                                                                     icon: Ext.Msg.QUESTION,
                                                                                                     fn: function(btn, text) {
                                                                                                       if (btn == 'yes') {
                                                                                                         districtSearchRadio.setValue(true);
                                                                                                         schoolPreferenceSearchButton.fireEvent('click', schoolPreferenceSearchButton);
                                                                                                       } else {
                                                                                                         Ext.Msg.show({
                                                                                                             title:'Add an Unlisted School?',
                                                                                                             msg: 'You may add the school address and contact information manually. Would you like to add a request for an unlisted School?',
                                                                                                             buttons: Ext.Msg.YESNO,
                                                                                                             icon: Ext.Msg.QUESTION,
                                                                                                             fn: function(btn, text) {
                                                                                                               if (btn == 'yes') {
                                                                                                                   addCustomSchoolOrDistrictButton.fireEvent('click', addCustomSchoolOrDistrictButton);
                                                                                                               } 
                                                                                                             }
                                                                                                        }); 
                                                                                                       }
                                                                                                     }
                                                                                                });                                                                                          
                                                                                              }
                                                                                              schoolPreferenceSearchGrid.setLoading(false);
                                                                                          } else {
                                                                                            schoolPreferenceSearchGrid.setLoading(false);
                                                                                          }
                                                                                      } else {
                                                                                          WGUpanel.setLoading(false);
                                                                                          if ( er.type == "exception" ) {
                                                                                                var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                                Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                                           }
                                                                                      }
                                                                                  }, {escape:false});
                                                                              }
                                                                           } else {
                                                                              Ext.Msg.show({
                                                                                 title:'Search Term',
                                                                                 msg: 'Please specify at least three letters of a school or district name for search.',
                                                                                 buttons: Ext.Msg.OK,
                                                                                 icon: Ext.Msg.INFO
                                                                              });
                                                                           }
                                                                       } else {
                                                                          Ext.Msg.show({
                                                                             title:'State for Search',
                                                                             msg: 'Please select a state for search.',
                                                                             buttons: Ext.Msg.OK,
                                                                             icon: Ext.Msg.INFO
                                                                          });
                                                                       }
                                                                      }
                                                                    }
                                                                }, // end search button 
                                                                {
                                                                    xtype: 'component',
                                                                    height: 7
                                                                }
                                                          ]
                                                    }, // end fieldset
                                                    {
                                                        xtype: 'component',
                                                        html: '<p><b>Note:</b> Schools that do not belong to a district may be listed as Districts.</p>',
                                                        style: 'font-size: 11px;',
                                                        x: 340,
                                                        y: 190,
                                                    },
                                                    {
                                                        xtype: 'gridpanel',
                                                        id: 'schoolPreferenceSearchGrid',
                                                        title: '',
                                                        x: 5,
                                                        y: 325,
                                                        width: 583,
                                                        height: 110,
                                                        store: districtsStore,
                                                        multiSelect: false,
                                                        forceFit: true,
                                                        viewConfig: {
                                                            itemId: 'search-grid-view',
                                                            stripeRows: true,
                                                            listeners: {
                                                                itemclick: function( thisView, record, item, index, e, eOpts ){
                                                                   createPlacementButton.setDisabled(false); 
                                                                },
                                                                selectionchange: function( thisModel, selected, eOpts ) {
                                                                  if ( selected.length == 0 ) {
                                                                    //disable or enable button if selected record
                                                                    createPlacementButton.setDisabled(true);
                                                                  } else {
                                                                    createPlacementButton.setDisabled(false);
                                                                  }
                                                                }
                                                            }
                                                        },
                                                        columns: [
                                                            {
                                                                xtype: 'gridcolumn',
                                                                dataIndex: 'string',
                                                                text: 'School Name',
                                                                dataIndex: 'Name',
                                                                width: 35
                                                            },
                                                            {
                                                                xtype: 'gridcolumn',
                                                                dataIndex: 'string',
                                                                text: 'City',
                                                                dataIndex: 'City',
                                                                width: 30
                                                            },
                                                            {
                                                                xtype: 'gridcolumn',
                                                                dataIndex: 'string',
                                                                text: 'District Name',
                                                                dataIndex: 'SchoolDistrictName',
                                                                width: 35
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        id: 'createPlacementButton',
                                                        text: 'Add Preference',
                                                        x: 5,
                                                        y: 440,
                                                        disabled: true,
                                                        handler: function() {
                                                            if ( schoolPreferenceSearchGrid.getSelectionModel().getSelection().length == 1 ) {
                                                               var data = schoolPreferenceSearchGrid.getSelectionModel().getSelection()[0].data;
                                                               if ( districtSearchRadio.getValue() == true )  {
                                                                 var districtid = data.Id;
                                                                 schoolPreferenceSearchGrid.setLoading('Saving...');
                                                                 MyFieldExperienceController.addFEPlacementAttempt(null, districtid ,function(result, er){
                                                                     if ( er.status ) {
                                                                          if (result) { //placementAttempt (FEProcess) id
                                                                                var toDoItem = getToDoItemFromIndex(CARD.SchoolPreference);
                                                                                templateRecord = getTemplateItemFromIndex(CARD.SchoolPreference);
                                                                                if (toDoItem != null) {
                                                                                    MyFieldExperienceController.setToDoComplete(
                                                                                     toDoItem.Id,
                                                                                     function(saveResult, er){ 
                                                                                            if ( er.status ) {
                                                                                                if ( saveResult == true ) {
                                                                                                   schoolPreferenceSearchGrid.setLoading(false);
                                                                                                   //go to next task
                                                                                                   refreshToDoList(CARD.SchoolPreference);
                                                                                                }
                                                                                            } else {
                                                                                                WGUpanel.setLoading(false);
                                                                                                if ( er.type == "exception" ) {
                                                                                                    var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                                    Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                                               }
                                                                                            }
                                                                                    }, {escape:false});
                                                                                }
                                                                          } else {
                                                                            schoolPreferenceSearchGrid.setLoading(false);
                                                                          }
                                                                      } else {
                                                                          WGUpanel.setLoading(false);
                                                                          if ( er.type == "exception" ) {
                                                                            var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                            Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                          }
                                                                      }
                                                                  }, {escape:false});
                                                               } else {
                                                                 var districtid = data.SchoolDistrict=="null"?null:data.SchoolDistrict;
                                                                 var schoolid = data.Id;
                                                                 schoolPreferenceSearchGrid.setLoading('Saving...');
                                                                 MyFieldExperienceController.addFEPlacementAttempt(schoolid, districtid ,function(result, er){
                                                                     if ( er.status ) {
                                                                          if (result) { //placementAttempt (FEProcess) id
                                                                                var toDoItem = getToDoItemFromIndex(CARD.SchoolPreference);
                                                                                templateRecord = getTemplateItemFromIndex(CARD.SchoolPreference);
                                                                                if (toDoItem != null) {
                                                                                    MyFieldExperienceController.setToDoComplete(
                                                                                     toDoItem.Id,
                                                                                     function(saveResult, er){ 
                                                                                            if ( er.status ) {
                                                                                                if ( saveResult == true ) {
                                                                                                   schoolPreferenceSearchGrid.setLoading(false);
                                                                                                   //go to next task
                                                                                                   refreshToDoList(CARD.SchoolPreference);
                                                                                                }
                                                                                            } else {
                                                                                                WGUpanel.setLoading(false);
                                                                                                if ( er.type == "exception" ) {
                                                                                                    var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                                    Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                                               }
                                                                                            }
                                                                                    }, {escape:false});
                                                                                }
                                                                          } else {
                                                                            schoolPreferenceSearchGrid.setLoading(false);
                                                                          }
                                                                      } else {
                                                                          WGUpanel.setLoading(false);
                                                                          if ( er.type == "exception" ) {
                                                                            var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                            Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                          }
                                                                      }
                                                                  }, {escape:false});
                                                               }
                                                            } else {
                                                                  createPlacementButton.setDisabled(true);
                                                                  Ext.Msg.show({
                                                                     title:'No School or District Selected',
                                                                     msg: 'Please select an item from the search results.',
                                                                     buttons: Ext.Msg.OK,
                                                                     icon: Ext.Msg.INFO
                                                                  });
                                                            }
                                                         }
                                                    }, // end create placement button (save)
                                                    {
                                                        xtype: 'button',
                                                        id: 'addCustomSchoolOrDistrictButton',
                                                        text: 'Add an Unlisted School/District',
                                                        x: 427,
                                                        y: 440,
                                                        disabled: true,
                                                        listeners: {
                                                          click: function(button, event, eOpts ) {
                                                               if ( addCustomSchoolDialog == null ) {
                                                                 addCustomSchoolDialog = new Ext.create('WGU.view.PlacementDialog');
                                                               }
                                                               addCustomSchoolDialog.show();
                                                          }
                                                        }
                                                    }, //end add new School/District button
                                                    {
                                                        xtype: 'gridpanel',
                                                        id: 'feprocessesStore',
                                                        title: 'Current Placement Requests',
                                                        x: 5,
                                                        y: 475,
                                                        width: 583,
                                                        height: 134,
                                                        store: feprocessesStore,
                                                        multiSelect: false,
                                                        forceFit: true,
                                                        viewConfig: {
                                                            itemId: 'currentFeProcesses-grid-view',
                                                            stripeRows: true,
                                                            listeners: {
                                                                itemclick: function( thisView, record, item, index, e, eOpts ){
                                                                   //
                                                                },
                                                                selectionchange: function( thisModel, selected, eOpts ) {
                                                                  //
                                                                }
                                                            }
                                                        },
                                                         columns: [
                                                            {
                                                                xtype: 'gridcolumn',
                                                                dataIndex: 'string',
                                                                text: 'District Name',
                                                                dataIndex: 'SchoolDistrictName',
                                                                flex: 1
                                                            },
                                                            {
                                                                xtype: 'gridcolumn',
                                                                dataIndex: 'string',
                                                                text: 'District City',
                                                                dataIndex: 'SchoolDistrictCity',
                                                                flex: 1
                                                            },
                                                            {
                                                                xtype: 'gridcolumn',
                                                                dataIndex: 'string',
                                                                text: 'School Name',
                                                                dataIndex: 'SchoolName',
                                                                flex: 1
                                                            },
                                                            {
                                                                xtype: 'gridcolumn',
                                                                dataIndex: 'string',
                                                                text: 'School City',
                                                                dataIndex: 'SchoolCity',
                                                                flex: 1
                                                            },
                                                            {
                                                                xtype: 'gridcolumn',
                                                                dataIndex: 'int',
                                                                text: 'Priority',
                                                                dataIndex: 'Priority',
                                                                width: 60
                                                            }
                                                        ]
                                                    }
                                                   ]
                                        },
                                        {
                                            //PCE Verification Form Upload
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>The PCE verification form is the document signed by the principal or school official agreeing to allow the student to volunteer for the pre-clinical experiences (classroom observations and tasks).</p>",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                   {
                                                        xtype: 'component',
                                                        height: 200,
                                                        width: 500,
                                                        html: "<div id='PCEVerificationFormUploadPanel'>",
                                                        x: 5,
                                                        y: 90
                                                   }
                                                   ]
                                        },
                                        {
                                            //Cohort
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                    {
                                                        xtype: 'component',
                                                        //html: "<p>Please complete and save the following information.</p><p>Choose the month and year you intend to begin DT.</p>",
                                                        html: "Please complete and save the following information during the open application period. This task is only available to choose during a current application period.  See the <a href='http://www.wgu.edu/sh' onclick='window.open(this.href);return false;'>Student Handbook</a> (<a href='http://www.wgu.edu/sh' onclick='window.open(this.href);return false;'>www.wgu.edu/sh</a>) and search “timeline” for upcoming cohort deadlines.<br/><br/>Note: If you are currently <i>Provisionally Accepted</i> in a cohort you must contact your Mentor and Placement Specialist before you can apply for another cohort.",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                   {
                                                        xtype: 'combobox',
                                                        id: 'cohortSelectionCombo',
                                                        multiSelect: false,
                                                        fieldLabel: 'Cohort Selection',
                                                        x: 5,
                                                        y: 100,
                                                        store: cohortsStore,
                                                        queryMode: 'local',
                                                        typeAhead: true,
                                                        labelWidth: 125,
                                                        width: 310,
                                                        displayField: 'name',
                                                        valueField: 'value'
                                                    },
                                                   {
                                                        xtype: 'displayfield',
                                                        id: 'AdmissionStatusField',
                                                        fieldLabel: 'Admission Status',
                                                        x: 5,
                                                        y: 130,
                                                        labelWidth: 125,
                                                        width: 550,
                                                        visible: false,
                                                        labelStyle: 'padding:4px 0 0 0;color:darkblue',
                                                        labelAlign: 'left',
                                                        fieldStyle: 'font-weight:bold;font-style:italic;font-size:13px;color:darkblue'
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        text: 'Save Cohort Selection',
                                                        id: 'btnSaveCohortSelection',
                                                        x: 5,
                                                        y: 130,
                                                        width: 120,
                                                         handler: function() {
                                                            if ( cohortSelection.getRawValue() ) {
                                                              var cohortValue = cohortSelection.getValue();
                                                                  WGUpanel.setLoading('Saving...');
                                                                  MyFieldExperienceController.setCohort(cohortValue,function(result, er){
                                                                     if ( er.status ) {
                                                                          if (result == true) {
                                                                                var toDoItem = getToDoItemFromIndex(CARD.Cohort);
                                                                                templateRecord = getTemplateItemFromIndex(CARD.Cohort);
                                                                                if (toDoItem != null) {
                                                                                    MyFieldExperienceController.setToDoComplete(
                                                                                      toDoItem.Id,
                                                                                      function(saveResult, er){ 
                                                                                            if ( er.status ) {
                                                                                                if ( saveResult == true ) {
                                                                                                   //go to next task
                                                                                                   refreshToDoList(templateRecord.NextCardIndex__c);
                                                                                                }
                                                                                            } else {
                                                                                                WGUpanel.setLoading(false);
                                                                                                if ( er.type == "exception" ) {
                                                                                                    var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                                    Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                                                }
                                                                                            }
                                                                                     }, {escape:false});
                                                                                }
                                                                           } else {
                                                                            WGUpanel.setLoading(false);
                                                                           }
                                                                      } else {
                                                                          WGUpanel.setLoading(false);
                                                                          if ( er.type == "exception" ) {
                                                                            var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                            Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                          }
                                                                      }
                                                                  }, {escape:false});
                                                               
                                                           } else {
                                                              Ext.Msg.show({
                                                                 title:'No Cohort Selected',
                                                                 msg: 'Please select a cohort before clicking save.',
                                                                 buttons: Ext.Msg.OK,
                                                                 icon: Ext.Msg.INFO
                                                              });
                                                           }
                                                        }
                                                    }
                                            ]
                                        },
                                        {
                                            //DT Affidavit
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>By checking the box below, you are acknowledging that you are aware of, and are responsible for meeting, the requirements and deadlines for acceptance into the cohort, including eligibility requirements as well as progress audit requirements and content exam requirements. You are acknowledging that you will not be permitted to participate in demonstration teaching unless you have passed all tasks and assessments as well as content exams by the published deadline.  See published timelines for your cohort in the <a href='http://www.wgu.edu/sh' onclick='window.open(this.href);return false;'>Student Handbook</a> for deadlines and requirements that you must meet.</p>",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                   {
                                                        xtype: 'checkbox',
                                                        id: 'dtAffidavitCheckBox',
                                                        value: 'Acknowledge',
                                                        fieldLabel: 'I acknowledge',
                                                        x: 5,
                                                        y: 120,
                                                        labelWidth: 90,
                                                        width: 140,
                                                        handler: function (checkbox, checked) {
                                                           if ( checked == true ) {
                                                                WGUpanel.setLoading('Saving...');
                                                                var toDoItem = getToDoItemFromIndex(CARD.DTAffidavit);
                                                                templateRecord = getTemplateItemFromIndex(CARD.DTAffidavit);
                                                                if (toDoItem != null) {
                                                                    MyFieldExperienceController.setToDoComplete(
                                                                     toDoItem.Id,
                                                                     function(saveResult, er){ 
                                                                            if ( er.status ) {
                                                                                if ( saveResult == true ) {
                                                                                  if ( fieldExperience.DTPhaseStatus__c == null || fieldExperience.DTPhaseStatus__c == 'null' ) {
                                                                                      MyFieldExperienceController.setDTPhaseStatus(
                                                                                                 function(saveResult, er){ 
                                                                                                        if ( er.status ) {
                                                                                                            if ( saveResult == true ) {
                                                                                                               //go to next task
                                                                                                               refreshToDoList(templateRecord.NextCardIndex__c);
                                                                                                            }
                                                                                                        } else {
                                                                                                            WGUpanel.setLoading(false);
                                                                                                            if ( er.type == "exception" ) {
                                                                                                                var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                                                Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                                                            }
                                                                                                        }
                                                                                                 }, {escape:false});
                                                                                   } else {
                                                                                     refreshToDoList(templateRecord.NextCardIndex__c);
                                                                                   }
                                                                                }
                                                                            } else {
                                                                                WGUpanel.setLoading(false);
                                                                                if ( er.type == "exception" ) {
                                                                                    var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                    Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                               }
                                                                            }
                                                                     }, {escape:false});
                                                                }
                                                           }
                                                       }
                                                   }
                                                   ]
                                        },
                                        {
                                            //DT Cohort Timeline Upload
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>The timeline is a guide for you to follow in order to complete requirements by the progress audit deadlines.</p><br><p>Cohort specific timelines can be found in the student handbook <a href='www.wgu.edu/sh' target='_blank'>www.wgu.edu/sh</a> by searching timeline.</p><br><p>Please review with you mentor and upload your timeline.</p>",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                   {
                                                        xtype: 'component',
                                                        height: 200,
                                                        width: 500,
                                                        html: "<div id='DTCohortTimelineUploadPanel'>",
                                                        x: 5,
                                                        y: 90
                                                   }
                                                   ]
                                        },
                                        {
                                            //Content Exams Upload
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>You must take and pass all state certification and/or WGU program required content exams prior to DT and graduation.  If you have not taken and passed your required exams, upload your registration tickets here.  See the <a href='http://www.wgu.edu/sh' onclick='window.open(this.href);return false;'>Student Handbook</a> for your state content exam and program requirements and your program's Cohort Timeline for DT exam deadlines.</p><br><p>Send all score reports to scores@wgu.edu to be posted to your Degree Plan.</p>",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                   {
                                                        xtype: 'component',
                                                        height: 200,
                                                        width: 500,
                                                        html: "<div id='ContentExamsUploadPanel'>",
                                                        x: 5,
                                                        y: 95
                                                   }
                                                   ]
                                        },
                                        {
                                            //Additional Placement Information
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>Please answer the following:</p>",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                    {
                                                        xtype: 'radiogroup',
                                                        labelAlign: 'left',
                                                        labelWidth : 430,
                                                        width: 550,
                                                        fieldLabel: '1] Is your preferred school the same as your PCE School?',
                                                        columns: 2,
                                                        x: 5,
                                                        y: 30,
                                                        items: [
                                                            {
                                                                xtype: 'radiofield',
                                                                id: 'yesAdditionalInfoSameSchoolRadio',
                                                                name: 'additionalInfoSameSchoolRadio',
                                                                boxLabel: 'Yes'
                                                            },
                                                            {
                                                                xtype: 'radiofield',
                                                                id: 'noAdditionalInfoSameSchoolRadio',
                                                                name: 'additionalInfoSameSchoolRadio',
                                                                boxLabel: 'No'
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        xtype: 'textfield',
                                                        id: 'whyDifferentSchoolAdditionalInfoText',
                                                        fieldLabel: 'If not, why did you use another school for DT?',
                                                        x: 25,
                                                        y: 60,
                                                        labelWidth: 300,
                                                        width: 505
                                                    },
                                                    {
                                                        xtype: 'combobox',
                                                        id: 'classroomExperienceAdditionalInfoCombo',
                                                        multiSelect: false,
                                                        fieldLabel: '2] How much classroom experience do you have in years?',
                                                        x: 5,
                                                        y: 90,
                                                        store: classroomExperienceStore,
                                                        queryMode: 'local',
                                                        typeAhead: true,
                                                        labelWidth: 330,
                                                        width: 525,
                                                        displayField: 'name',
                                                        valueField: 'value'
                                                    },
                                                    {
                                                        xtype: 'radiogroup',
                                                        labelAlign: 'left',
                                                        labelWidth : 430,
                                                        width: 550,
                                                        fieldLabel: '3] Do you work in a requested district?',
                                                        columns: 2,
                                                        x: 5,
                                                        y: 120,
                                                        items: [
                                                            {
                                                                xtype: 'radiofield',
                                                                id: 'yesAdditionalInfoWorkInDistrictRadio',
                                                                name: 'additionalInfoWorkInDistrictRadio',
                                                                boxLabel: 'Yes',
                                                                handler: function(radiobtn, checked) {
                                                                  if (checked) {
                                                                    feprocessesStore.filterBy(
                                                                        function(record, id) { 
                                                                            return record.get("SchoolDistrictName") != '';
                                                                        }
                                                                    );
                                                                    if ( feprocessesStore.getCount() == 1 ) {
                                                                      districtWorkInAdditionalInfoCombo.setValue(feprocessesStore.first().get('SchoolDistrictName'));
                                                                    }
                                                                  }
                                                                }
                                                            },
                                                            {
                                                                xtype: 'radiofield',
                                                                id: 'noAdditionalInfoWorkInDistrictRadio',
                                                                name: 'additionalInfoWorkInDistrictRadio',
                                                                boxLabel: 'No'
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        xtype: 'combobox',
                                                        id: 'districtWorkInAdditionalInfoCombo',
                                                        multiSelect: false,
                                                        fieldLabel: 'If yes, which district do you work in?',
                                                        x: 25,
                                                        y: 150,
                                                        labelWidth: 430,
                                                        width: 505,
                                                        store: feprocessesStore,
                                                        emptyText: "",
                                                        lastQuery: '',
                                                        triggerAction: 'all',
                                                        queryMode: 'local',
                                                        typeAhead: true,
                                                        labelWidth: 245,
                                                        displayField: 'SchoolDistrictName',
                                                        valueField: 'SchoolDistrictName',
                                                        listeners: {
                                                            expand: function( field, eOpts ) {
                                                                feprocessesStore.filterBy(
                                                                    function(record, id) { 
                                                                        return record.get("SchoolDistrictName") != '';
                                                                    }
                                                                );
                                                                if ( feprocessesStore.getCount() == 1 && yesAdditionalInfoWorkInDistrictRadio ) {
                                                                  districtWorkInAdditionalInfoCombo.setValue(feprocessesStore.first().get('SchoolDistrictName'));
                                                                }
                                                            }
                                                        }
                                                    },
                                                     {
                                                        xtype: 'radiogroup',
                                                        labelAlign: 'left',
                                                        labelWidth : 430,
                                                        width: 550,
                                                        fieldLabel: '4] Do you have relatives that work in a requested district?',
                                                        columns: 2,
                                                        x: 5,
                                                        y: 180,
                                                        items: [
                                                            {
                                                                xtype: 'radiofield',
                                                                id: 'yesAdditionalInfoRelativesWorkInDistrictRadio',
                                                                name: 'additionalInfoRelativesWorkInDistrictRadio',
                                                                boxLabel: 'Yes',
                                                                handler: function(radiobtn, checked) {
                                                                  if (checked) {
                                                                    feprocessesStore.filterBy(
                                                                        function(record, id) { 
                                                                            return record.get("SchoolDistrictName") != '';
                                                                        }
                                                                    );
                                                                    if ( feprocessesStore.getCount() == 1 ) {
                                                                      districtRelativesWorkInAdditionalInfoCombo.setValue(feprocessesStore.first().get('SchoolDistrictName'));
                                                                    }
                                                                  }
                                                                }
                                                            },
                                                            {
                                                                xtype: 'radiofield',
                                                                id: 'noAdditionalInfoRelativesWorkInDistrictRadio',
                                                                name: 'additionalInfoRelativesWorkInDistrictRadio',
                                                                boxLabel: 'No'
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        xtype: 'combobox',
                                                        id: 'districtRelativesWorkInAdditionalInfoCombo',
                                                        multiSelect: false,
                                                        fieldLabel: 'If yes, which district?',
                                                        x: 25,
                                                        y: 210,
                                                        labelWidth: 430,
                                                        width: 505,
                                                        store: feprocessesStore,
                                                        queryMode: 'local',
                                                        typeAhead: true,
                                                        labelWidth: 245,
                                                        displayField: 'SchoolDistrictName',
                                                        valueField: 'SchoolDistrictName',
                                                        emptyText: "",
                                                        lastQuery: '',
                                                        triggerAction: 'all',
                                                        listeners: {
                                                            expand: function( field, eOpts ) {
                                                                feprocessesStore.filterBy(
                                                                    function(record, id) { 
                                                                        return record.get("SchoolDistrictName") != '';
                                                                    }
                                                                );
                                                                if ( feprocessesStore.getCount() == 1 && yesAdditionalInfoRelativesWorkInDistrictRadio.getValue() ) {
                                                                  districtRelativesWorkInAdditionalInfoCombo.setValue(feprocessesStore.first().get('SchoolDistrictName'));
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        xtype: 'radiogroup',
                                                        labelAlign: 'left',
                                                        labelWidth : 430,
                                                        width: 550,
                                                        fieldLabel: '5] Do you have children in a requested school/district?',
                                                        columns: 2,
                                                        x: 5,
                                                        y: 240,
                                                        items: [
                                                            {
                                                                xtype: 'radiofield',
                                                                id: 'yesAdditionalInfoChildrenInDistrictRadio',
                                                                name: 'additionalInfoChildrenInDistrictRadio',
                                                                boxLabel: 'Yes',
                                                                handler: function(radiobtn, checked) {
                                                                  if (checked) {
                                                                    feprocessesStore.filterBy(
                                                                        function(record, id) { 
                                                                            return record.get("SchoolDistrictName") != '';
                                                                        }
                                                                    );
                                                                    if ( feprocessesStore.getCount() == 1 ) {
                                                                      districtKidsInAdditionalInfoCombo.setValue(feprocessesStore.first().get('SchoolDistrictName'));
                                                                    }
                                                                    feprocessesStore.filterBy(
                                                                        function(record, id) { 
                                                                            return record.get("SchoolName") != '';
                                                                        }
                                                                    );
                                                                    if ( feprocessesStore.getCount() == 1 ) {
                                                                      schoolKidsInAdditionalInfoCombo.setValue(feprocessesStore.first().get('SchoolName'));
                                                                    }
                                                                  }
                                                                }
                                                            },
                                                            {
                                                                xtype: 'radiofield',
                                                                id: 'noAdditionalInfoChildrenInDistrictRadio',
                                                                name: 'additionalInfoChildrenInDistrictRadio',
                                                                boxLabel: 'No'
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        xtype: 'combobox',
                                                        id: 'districtKidsInAdditionalInfoCombo',
                                                        multiSelect: false,
                                                        fieldLabel: 'If yes, which district?',
                                                        x: 25,
                                                        y: 270,
                                                        labelWidth: 430,
                                                        width: 505,
                                                        store: feprocessesStore,
                                                        queryMode: 'local',
                                                        typeAhead: true,
                                                        labelWidth: 245,
                                                        displayField: 'SchoolDistrictName',
                                                        valueField: 'SchoolDistrictName',
                                                        emptyText: "",
                                                        lastQuery: '',
                                                        triggerAction: 'all',
                                                        listeners: {
                                                            expand: function( field, eOpts ) {
                                                                feprocessesStore.filterBy(
                                                                    function(record, id) { 
                                                                        return record.get("SchoolDistrictName") != '';
                                                                    }
                                                                );
                                                                if ( feprocessesStore.getCount() == 1 && yesAdditionalInfoChildrenInDistrictRadio.getValue() ) {
                                                                  districtKidsInAdditionalInfoCombo.setValue(feprocessesStore.first().get('SchoolDistrictName'));
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        xtype: 'combobox',
                                                        id: 'schoolKidsInAdditionalInfoCombo',
                                                        multiSelect: false,
                                                        fieldLabel: 'If yes, which school?',
                                                        x: 25,
                                                        y: 300,
                                                        labelWidth: 430,
                                                        width: 505,
                                                        store: schoolsKidsAttendStore,
                                                        queryMode: 'local',
                                                        typeAhead: true,
                                                        labelWidth: 245,
                                                        displayField: 'Name',
                                                        valueField: 'Name',
                                                        emptyText: "",
                                                        lastQuery: '',
                                                        triggerAction: 'all',
                                                        listeners: {
                                                            expand: function( field, eOpts ) {
                                                                schoolsKidsAttendStore.filterBy(
                                                                    function(record, id) { 
                                                                        return record.get("Name") != '';
                                                                    }
                                                                );
                                                                if ( schoolsKidsAttendStore.getCount() == 1 && yesAdditionalInfoChildrenInDistrictRadio.getValue() ) {
                                                                  schoolKidsInAdditionalInfoCombo.setValue(schoolsKidsAttendStore.first().get('Name'));
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        xtype: 'radiogroup',
                                                        labelAlign: 'left',
                                                        labelWidth : 430,
                                                        width: 550,
                                                        fieldLabel: '6] Are you requesting placement at a Department of Defense (DOD) school?',
                                                        columns: 2,
                                                        x: 5,
                                                        y: 330,
                                                        items: [
                                                            {
                                                                xtype: 'radiofield',
                                                                id: 'yesAdditionalInfoDODRadio',
                                                                name: 'additionalInfoDODRadio',
                                                                boxLabel: 'Yes'
                                                            },
                                                            {
                                                                xtype: 'radiofield',
                                                                id: 'noAdditionalInfoDODRadio',
                                                                name: 'additionalInfoDODRadio',
                                                                boxLabel: 'No'
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        text: 'Save Additional Info',
                                                        x: 5,
                                                        y: 380,
                                                        handler: function() {
                                                            if ( classroomExperienceAdditionalInfoCombo.getRawValue() != '' &&
                                                                    ( yesAdditionalInfoSameSchoolRadio.getValue() || noAdditionalInfoSameSchoolRadio.getValue() ) &&
                                                                    ( yesAdditionalInfoWorkInDistrictRadio.getValue() || noAdditionalInfoWorkInDistrictRadio.getValue() ) &&
                                                                    ( yesAdditionalInfoRelativesWorkInDistrictRadio.getValue() || noAdditionalInfoRelativesWorkInDistrictRadio.getValue() ) &&
                                                                    ( yesAdditionalInfoChildrenInDistrictRadio.getValue() || noAdditionalInfoChildrenInDistrictRadio.getValue() ) &&
                                                                    ( yesAdditionalInfoDODRadio.getValue() || noAdditionalInfoDODRadio.getValue() )
                                                                    ) {
                                                        
                                                                 // check that yes answers have supplemental answers
                                                                 if ( (noAdditionalInfoSameSchoolRadio.getValue() == true && Ext.String.trim( whyDifferentSchoolAdditionalInfoText.getRawValue() ) != '' ) ||
                                                                 yesAdditionalInfoSameSchoolRadio.getValue() == true) {
                                                                     if ( (yesAdditionalInfoWorkInDistrictRadio.getValue() && Ext.String.trim( districtWorkInAdditionalInfoCombo.getRawValue() ) != '' ) ||
                                                                           yesAdditionalInfoWorkInDistrictRadio.getValue() == false ) {
                                                                         if ( (yesAdditionalInfoRelativesWorkInDistrictRadio.getValue() && Ext.String.trim( districtRelativesWorkInAdditionalInfoCombo.getRawValue() ) != '' ) ||
                                                                               yesAdditionalInfoRelativesWorkInDistrictRadio.getValue() == false) {
                                                                             if ( (yesAdditionalInfoChildrenInDistrictRadio.getValue() &&
                                                                                 ( Ext.String.trim( districtKidsInAdditionalInfoCombo.getRawValue() ) != '' &&  Ext.String.trim( schoolKidsInAdditionalInfoCombo.getRawValue() ) != '' ) ) ||
                                                                                yesAdditionalInfoChildrenInDistrictRadio.getValue() == false ) {
                                                                                 //Field Validation Complete, Save Data to fieldExperience record, then to database.
                                                                        
                                                                                 fieldExperience.SameSchoolasPCE__c = yesAdditionalInfoSameSchoolRadio.getValue();
                                                                                 fieldExperience.NotPCEReason__c = Ext.String.trim( whyDifferentSchoolAdditionalInfoText.getRawValue() );
                                                                                 fieldExperience.ClassroomExperience__c = classroomExperienceAdditionalInfoCombo.getRawValue();
                                                                                 fieldExperience.WorkinSameDistrictasPlacement__c = yesAdditionalInfoWorkInDistrictRadio.getValue();
                                                                                 fieldExperience.DistrictNameStudentWorksIn__c = Ext.String.trim( districtWorkInAdditionalInfoCombo.getRawValue() );
                                                                                 fieldExperience.RelativesinDistrict__c = yesAdditionalInfoRelativesWorkInDistrictRadio.getValue();
                                                                                 fieldExperience.DistrictNameRelativeWorksIn__c = Ext.String.trim( districtRelativesWorkInAdditionalInfoCombo.getRawValue() );
                                                                                 fieldExperience.ChildreninDistrict__c = yesAdditionalInfoChildrenInDistrictRadio.getValue();
                                                                                 fieldExperience.DistrictNameChildrenAreIn__c = Ext.String.trim( districtKidsInAdditionalInfoCombo.getRawValue() );
                                                                                 fieldExperience.SchoolNameChildrenAreIn__c = Ext.String.trim( schoolKidsInAdditionalInfoCombo.getRawValue() );
                                                                                 fieldExperience.DODStudent__c =  yesAdditionalInfoDODRadio.getValue();
                                                                                 WGUpanel.setLoading('Saving...');
                                                                                 var feJSON = Ext.encode( fieldExperience );
                                                                                 MyFieldExperienceController.updateFieldExperience(feJSON,function(result, er){
                                                                                     if ( er.status ) {
                                                                                         if (result == true) {
                                                                                            var toDoItem = getToDoItemFromIndex(CARD.AdditionalPlacementInformation);
                                                                                            templateRecord = getTemplateItemFromIndex(CARD.AdditionalPlacementInformation);
                                                                                            if (toDoItem != null) {
                                                                                                 MyFieldExperienceController.setToDoComplete(
                                                                                                    toDoItem.Id,
                                                                                                    function(saveResult, er){
                                                                                                    if ( er.status ) {
                                                                                                         if ( saveResult == true ) {
                                                                                                             WGUpanel.setLoading(false);
                                                                                                             //go to next task
                                                                                                             refreshToDoList(templateRecord.NextCardIndex__c);
                                                                                                         }
                                                                                                     } else {
                                                                                                         WGUpanel.setLoading(false);
                                                                                                         if ( er.type == "exception" ) {
                                                                                                            var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                                            Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                                                         }
                                                                                                     }
                                                                                                 }, {escape:false});
                                                                                            }
                                                                                         } else {
                                                                                           WGUpanel.setLoading(false);
                                                                                         }
                                                                                     } else {
                                                                                         WGUpanel.setLoading(false);
                                                                                         if ( er.type == "exception" ) {
                                                                                            var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                                            Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                                         }
                                                                                     }
                                                                                 }, {escape:false});
                                                                        
                                                                             } else {
                                                                                 //no kids district or school
                                                                                 Ext.Msg.show({
                                                                                     title:'Required Response Missing',
                                                                                     msg: 'Please be sure to set the School and District where your child attends.',
                                                                                     buttons: Ext.Msg.OK,
                                                                                     icon: Ext.Msg.INFO
                                                                                 });
                                                                             }
                                                                         } else {
                                                                             //no relative district
                                                                             Ext.Msg.show({
                                                                                 title:'Required Response Missing',
                                                                                 msg: 'Please be sure to set the District where your relative works.',
                                                                                 buttons: Ext.Msg.OK,
                                                                                 icon: Ext.Msg.INFO
                                                                             });
                                                                         }
                                                                     } else {
                                                                         //no district
                                                                         Ext.Msg.show({
                                                                             title:'Required Response Missing',
                                                                             msg: 'Please be sure to set the District where you work.',
                                                                             buttons: Ext.Msg.OK,
                                                                             icon: Ext.Msg.INFO
                                                                         });
                                                                     }
                                                                 } else {
                                                                     //no why value
                                                                     Ext.Msg.show({
                                                                         title:'Required Response Missing',
                                                                         msg: 'Please be sure to specify why your PCE and DT placements are not the same.',
                                                                         buttons: Ext.Msg.OK,
                                                                         icon: Ext.Msg.INFO
                                                                     });
                                                                 }
                                                        
                                                            } else {
                                                                //not all yes/no fields answered
                                                                Ext.Msg.show({
                                                                    title:'Required Response Missing',
                                                                    msg: 'Please be sure to respond to all questions in the form.',
                                                                    buttons: Ext.Msg.OK,
                                                                    icon: Ext.Msg.INFO
                                                                });
                                                            }
                                                        } //handler
                                                    }
                                                   ]
                                        },
                                        {
                                            //DT Background Clearance
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>Go to the TC Licensure and Certification section of the <a href='http://www.wgu.edu/sh' onclick='window.open(this.href);return false;'>Student Handbook</a>, navigate to the folder for your state, and follow the instructions for obtaining the required Background Clearance(s).  Submit the completed Background Clearance by email to licensure@wgu.edu or by fax to (801) 401-7961.  <b>DO NOT</b> upload Background Clearances to this site.</p><br><p>The Licensure Department must review and verify all background clearances before posting them to your records, so the Background Clearance task may not immediately show as completed.  You will receive an email from the Licensure Department to confirm that your background clearance has been received.    </p>",
                                                        x: 5,
                                                        y: 0
                                                   }
                                                   ]
                                        },
                                        {
                                            //PCETaskList
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>The task list is a summary of in-class responsibilities. Program specific task lists can be found in the <a href='http://www.wgu.edu/sh' onclick='window.open(this.href);return false;'>Student Handbook</a> article <a href='http://kb.wgu.edu/article.aspx?article=1637&p=3' onclick='window.open(this.href);return false;'>http://kb.wgu.edu/article.aspx?article=1637&p=3</a>. Once it has been signed by your host teacher/s and principal, upload to your Field Experience Portal.</p>",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                   {
                                                        xtype: 'component',
                                                        height: 200,
                                                        width: 500,
                                                        html: "<div id='PCETaskListUploadPanel'>",
                                                        x: 5,
                                                        y: 90
                                                   }
                                                   ]
                                        },
                                        {
                                            //Persistent Misc File Upload
                                            xtype: 'panel',
                                            title: '',
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                   {
                                                        xtype: 'component',
                                                        html: "<p>If you have been directed by WGU to upload additional files, use this option. Be sure to specify a description for the file.  (Please <b>DO NOT</b> upload Background Clearance.)</p>",
                                                        x: 5,
                                                        y: 0
                                                   },
                                                   {
                                                        xtype: 'component',
                                                        height: 200,
                                                        width: 500,
                                                        html: "<div id='MiscFileUploadPanel'>",
                                                        x: 5,
                                                        y: 90
                                                   }
                                                   ]
                                        }
                                    ]
                                },
                                { 
                                    xtype: 'component',
                                    flex: 1
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            border: 'false',
                            id: 'spacerRight',
                            flex: 1
                        }
                    ]
                });
        
                me.callParent(arguments);
            }
        });

        Ext.define('WGU.view.PlacementDialog', {
            extend: 'Ext.window.Window',
        
            id: 'fePlacementDialog',
            height: 400,
            width: 440,
            modal: true,
            resizable: false,
            closeAction: 'hide',
            layout: {
                type: 'absolute'
            },
            title: 'New School or District Submission',
            listeners: {
              show: function(thisWindow, eOpts) {
                 Ext.getCmp('districtTypeDialogRadio').setValue(false);
                 Ext.getCmp('schoolTypeDialogRadio').setValue(false);
                 Ext.getCmp('addressInfoDialogText').setRawValue('');
                 Ext.getCmp('contactInfoDialogText').setRawValue('')
                 Ext.getCmp('addressInfoDialogText').focus(false,100);
                 thisWindow.center();
              }
            },
            initComponent: function() {
                var me = this;
        
                Ext.applyIf(me, {
                    items: [
                        {
                            xtype: 'label',
                            text: 'If you were unable to find your preferred school or district, please enter the school or district information below for your placement preference:',
                            x: 10,
                            y: 7
                        },
                        {
                            xtype: 'textareafield',
                            id: 'addressInfoDialogText',
                            height: 110,
                            width: 410,
                            fieldLabel: 'Name and Address',
                            labelWidth: 150,
                            x: 10,
                            y: 50
                        },
                        {
                            xtype: 'textareafield',
                            id: 'contactInfoDialogText',
                            width: 410,
                            fieldLabel: 'Contact Person and Telephone',
                            labelWidth: 150,
                            x: 10,
                            y: 170
                        },
                        {
                            xtype: 'radiogroup',
                            width: 234,
                            fieldLabel: 'This information is for a',
                            labelWidth: 150,
                            columns: 1,
                            x: 10,
                            y: 260,
                            items: [
                                {
                                    xtype: 'radiofield',
                                    id: 'schoolTypeDialogRadio',
                                    name: 'schoolDistrictType',
                                    boxLabel: 'School',
                                    disabled: false,
                                    checked: false
                                },
                                {
                                    xtype: 'radiofield',
                                    id: 'districtTypeDialogRadio',
                                    name: 'schoolDistrictType',
                                    boxLabel: 'District',
                                    disabled: false,
                                    checked: false
                                }
                            ]
                        },
                        {
                            xtype: 'button',
                            text: 'Cancel',
                            x: 158,
                            y: 333,
                            width: 123,
                            handler: function() {
                                Ext.getCmp('fePlacementDialog').hide();
                            }
                        },
                        {
                            xtype: 'button',
                            text: 'Save Placement Request',
                            x: 287,
                            y: 333,
                            handler: function() {
                              if ( Ext.getCmp('districtTypeDialogRadio').getValue() == false && Ext.getCmp('schoolTypeDialogRadio').getValue() == false ) {
                                 Ext.Msg.show({
                                     title:'School or District?',
                                     msg: 'Please indicate whether the new address and contact are for a School or District.',
                                     buttons: Ext.Msg.OK,
                                     icon: Ext.Msg.INFO
                                  });
                              } else if ( Ext.String.trim(Ext.getCmp('addressInfoDialogText').getRawValue()) == '' || Ext.String.trim( Ext.getCmp('contactInfoDialogText').getRawValue()) == '' ) {
                                 Ext.Msg.show({
                                     title:'Required Information Missing',
                                     msg: 'Please supply both address and contact information for submittal.',
                                     buttons: Ext.Msg.OK,
                                     icon: Ext.Msg.INFO
                                  });                              
                              } else {
                                var address = Ext.String.trim( Ext.getCmp('addressInfoDialogText').getRawValue());
                                var contact = Ext.String.trim( Ext.getCmp('contactInfoDialogText').getRawValue());
                                var fePlacementDialog = Ext.getCmp('fePlacementDialog');
                                fePlacementDialog.setLoading('Saving...');
                                 MyFieldExperienceController.addFEPlacementAttemptCustom(address, contact, Ext.getCmp('districtTypeDialogRadio').getValue() == true,function(result, er){
                                     if ( er.status ) {
                                          if (result) { //placementAttempt (FEProcess) id
                                                var toDoItem = getToDoItemFromIndex(CARD.SchoolPreference);
                                                templateRecord = getTemplateItemFromIndex(CARD.SchoolPreference);
                                                if (toDoItem != null) {
                                                    MyFieldExperienceController.setToDoComplete(
                                                     toDoItem.Id,
                                                     function(saveResult, er){ 
                                                            if ( er.status ) {
                                                                if ( saveResult == true ) {
                                                                   fePlacementDialog.setLoading(false);
                                                                   fePlacementDialog.hide();
                                                                   //go to next task
                                                                   refreshToDoList(CARD.SchoolPreference);
                                                                }
                                                            } else {
                                                                WGUpanel.setLoading(false);
                                                                if ( er.type == "exception" ) {
                                                                    var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                                                    Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                                                }
                                                            }
                                                    }, {escape:false});
                                                }
                                          } else {
                                            schoolPreferenceSearchGrid.setLoading(false);
                                          }
                                      } else {
                                          WGUpanel.setLoading(false);
                                          if ( er.type == "exception" ) {
                                            var subheaderFEContent = "<div>Access Error <span>- "+er.message+"</span></div>";
                                            Ext.get('subheader-wrapper').update(subheaderFEContent , false );
                                          }
                                      }
                                  }, {escape:false});
                              }
                            }
                        }
                    ]
                });
        
                me.callParent(arguments);
            }
        });
        
        
        Ext.define('TaskModel', { //Defining the Task data model for ToDo List
            extend  : 'Ext.data.Model',
            fields  : [
                        {name: 'Id', type: 'string'},
                        {name: 'Subject' , type: 'string'},
                        {name: 'IsClosed' , type: 'boolean', defaultValue: false},
                        {name: 'TemplateId__c' , type: 'string'},
                        {name: 'CardIndex__c' , type: 'int'}
        ]
        });
        
        Ext.define('LicenseModel', { //Defining the License data model for select License To Do Item Combobox
            extend  : 'Ext.data.Model',
            fields  : [ 
                        {name: 'Id', type: 'string'},
                        {name: 'Name' , type: 'string'},
                        {name: 'UtahLicenseTitle__c' , type: 'string'},
                        {name: 'UtahReciprocity__c' , type: 'boolean', defaultValue: false},
                        {name: 'Version__c' , type: 'string'},
                        {name: 'VersionChangeDate__c' , type: 'string'}
        ]
        });
        
        Ext.define('ToDoTemplateModel', { //Defining the License data model for select License To Do Item Combobox
            extend  : 'Ext.data.Model',
            fields  : [ 
                        {name: 'AfterCompletionMessage__c' , type: 'string'},
                        {name: 'Instructions__c' , type: 'string'},
                        {name: 'CompletionCriteria__c' , type: 'string'},
                        {name: 'CompletionURL__c' , type: 'string'},
                        {name: 'FEFieldName__c' , type: 'string'},
                        {name: 'Id', type: 'string'},
                        {name: 'IsBannerDataVerificationRequired__c' , type: 'boolean', defaultValue: false},
                        {name: 'Name' , type: 'string'},
                        {name: 'PrerequisiteToDo__c' , type: 'string'},
                        {name: 'SortOrder__c' , type: 'int'},
                        {name: 'StudentTaskCode__c' , type: 'string'},
                        {name: 'TaskDurationDays__c' , type: 'string'},
                        {name: 'CardIndex__c' , type: 'int'}
        ]
        });

        Ext.define('FEProcessModel', { //Defining the FEProcess data model for select School To Do Item
            extend  : 'Ext.data.Model',
            fields  : [ 
                        {name: 'Id', type: 'string'},
                        {name: 'Name' , type: 'string'},
                        {name: 'SchoolName' , mapping: 'School__r.Name', type: 'string'},
                        {name: 'SchoolCity' , mapping: 'School__r.ShippingCity', type: 'string'},
                        {name: 'School' , mapping: 'School__c', type: 'string'},
                        {name: 'SchoolDistrictName' , mapping: 'District__r.Name', type: 'string'},
                        {name: 'SchoolDistrictCity' , mapping: 'District__r.ShippingCity', type: 'string'},
                        {name: 'SchoolDistrict' , mapping: 'District__c', type: 'string'},
                        {name: 'NewSchool' , mapping: 'NewSchool__c', type: 'string'},
                        {name: 'NewDistrict' , mapping: 'NewDistrict__c', type: 'string'},
                        {name: 'NewSchoolContact' , mapping: 'NewSchoolContact__c', type: 'string'},
                        {name: 'NewDistrictContact' , mapping: 'NewDistrictContact__c', type: 'string'},
                        {name: 'Priority' , mapping: 'PreferredPriority__c', type: 'int'}
        ]
        });
        
        
        Ext.define('DistrictModel', { //Defining the District Account data model for select School To Do Item
            extend  : 'Ext.data.Model',
            fields  : [ 
                        {name: 'Id', type: 'string'},
                        {name: 'Name' , type: 'string'},
                        {name: 'County' , mapping: 'County__c', type: 'string'},
                        {name: 'IsWGUPlacementRequired' , mapping: 'IsWGUPlacementRequired__c', type: 'string'},
                        {name: 'City' , mapping: 'ShippingCity', type: 'string'},
                        {name: 'NCESCode' , mapping: 'NCESCode__c', type: 'string'}
        ]
        });
        
        Ext.define('SchoolModel', { //Defining the School Account data model for select School To Do Item
            extend  : 'Ext.data.Model',      
            fields  : [ 
                        {name: 'Id', type: 'string'},
                        {name: 'Name' , type: 'string'},
                        {name: 'County' , mapping: 'County__c', type: 'string'},
                        {name: 'IsWGUPlacementRequired' , mapping: 'IsWGUPlacementRequired__c', type: 'string'},
                        {name: 'City' , mapping: 'ShippingCity', type: 'string'},
                        {name: 'SchoolDistrictName' , mapping: 'SchoolDistrict__r.Name', type: 'string'},
                        {name: 'SchoolDistrictCity' , mapping: 'SchoolDistrict__r.ShippingCity', type: 'string'},
                        {name: 'SchoolDistrict' , mapping: 'SchoolDistrict__c', type: 'string'},
                        {name: 'NCESCode' , mapping: 'NCESCode__c', type: 'string'}
            ]
        });
        
        var todoitemsStore = Ext.create('Ext.data.Store', { model : 'TaskModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });
        var templatesStore = Ext.create('Ext.data.Store', { model : 'ToDoTemplateModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });
        var licensesStore = Ext.create('Ext.data.Store', { model : 'LicenseModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });
        var schoolsStore = Ext.create('Ext.data.Store', { model : 'SchoolModel', proxy : { type    : 'memory', reader  : { type : 'json', root: 'Records' } } });
        var schoolsKidsAttendStore = Ext.create('Ext.data.Store', { model : 'SchoolModel', proxy : { type    : 'memory', reader  : { type : 'json', root: 'Records' } } });
        var districtsStore = Ext.create('Ext.data.Store', { model : 'DistrictModel', proxy : { type    : 'memory', reader  : { type : 'json', root: 'Records' } } });
        var feprocessesStore = Ext.create('Ext.data.Store', { model : 'FEProcessModel', proxy : { type    : 'memory', reader  : { type : 'json', root: 'Records' } } });
        var statesStore = Ext.create('Ext.data.Store', {
            fields: ['abbr', 'name'],
            data : {!StatesExtJSON}
        });        
        var yesNoStore = Ext.create('Ext.data.Store', {
            fields: ['value', 'name'],
            data : [
                    {"value":"true", "name":"Yes"},
                    {"value":"false", "name":"No"}
            ]
        });  
        var classroomExperienceStore = Ext.create('Ext.data.Store', {
            fields: ['value', 'name'],
            data : {!ClassroomExperienceExtJSON}
        });  
        var cohortsStore = Ext.create('Ext.data.Store', {
            fields: ['value', 'name'],
            data : {!AvailableCohortsExtJSON}
        });  
        
        
    </script>
    
    <script>
    jQuery(document).ready(main);
    function main(){
            (function(){
                if (!window.console) console = {
                    log: function() {}
                }
            })();
            
            
            
    }
    
    </script>
            
    <script>

Ext.define('WGU.view.AbsenceDialog', {
    extend: 'Ext.window.Window',

    height: 348,
    id: 'AbsenceDialog',
    width: 601,
    layout: {
        type: 'card'
    },
    title: 'Report a Field Experience Absence',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    id: 'AbsenceIntroCard',
                    layout: {
                        type: 'absolute'
                    },
                    items: [
                        {
                            xtype: 'label',
                            x: 20,
                            y: 20,
                            width: 550,
                            text: 'WGU teacher candidates are expected to attend every day of demonstration teaching without any absences.  Occasionally emergencies arise such as illness or inclement weather.  In these emergency cases, you are permitted no more than a total of three approved absences of any type during your demonstration teaching assignment.  For absences of less than three hours, you may report a half day.  More than a total of three full day absences will require an extension of your placement. '
                        },
                        {
                            xtype: 'label',
                            x: 20,
                            y: 110,
                            width: 550,
                            text: 'You are required to submit this Absence Form for each absence event (consecutive days for the same event require only one submission).  Unless the absence is the result of an unexpected emergency, you must request permission from your clinical supervisor and host teacher prior to your absence.  For unexpected emergencies, notify your clinical supervisor and host teacher as soon as reasonably possible and then submit the Absence Form to WGU.  You will receive an email confirmation from Teacher Success notifying you of the approval or denial of your absence. '
                        },
                        {
                            xtype: 'label',
                            x: 20,
                            y: 220,
                            height: 40,
                            width: 550,
                            html: 'For questions about the absentee policy, please refer to the Field Experiences Handbook or contact Teacher Success at <a style="text-decoration:none" href="mailto:teachersuccess@wgu.edu">teachersuccess@wgu.edu</a> '
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            style: 'border-color: #81A4D0;',
                            text: 'Review Absences',
                            id: 'ViewAbsencesDiv',
                            x: 20,
                            y: 270,
                            width: 100,
                            height: 30
                        },
                        {
                            xtype: 'button',
                            x: 480,
                            y: 270,
                            height: 30,
                            width: 100,
                            text: 'Cancel',
                            listeners: {
                                click: {
                                    fn: me.onCancelButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            x: 370,
                            y: 270,
                            height: 30,
                            id: 'PageOneNextButton',
                            width: 100,
                            text: 'Next >>',
                            listeners: {
                                click: {
                                    fn: me.onPageOneNextButtonClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'container',
                    id: 'AbsenceSetDatesCard',
                    layout: {
                        type: 'absolute'
                    },
                    items: [
                        {
                            xtype: 'label',
                            x: 20,
                            y: 20,
                            width: 550,
                            text: 'Thank you for using the WGU Absentee Form to report your absence. Be sure to review all the information reported  to assure accuracy before the form is submitted.'
                        },
                        {
                            xtype: 'button',
                            x: 480,
                            y: 270,
                            height: 30,
                            width: 100,
                            text: 'Cancel',
                            listeners: {
                                click: {
                                    fn: me.onCancelButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            x: 370,
                            y: 270,
                            disabled: true,
                            height: 30,
                            id: 'PageTwoSubmitButton',
                            width: 100,
                            text: 'Submit',
                            listeners: {
                                click: {
                                    fn: me.onPageTwoSubmitButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            x: 260,
                            y: 270,
                            height: 30,
                            id: 'PageTwoBackButton',
                            width: 100,
                            text: '<< Back',
                            listeners: {
                                click: {
                                    fn: me.onPageTwoBackButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            x: 20,
                            y: 65,
                            id: 'AbsenceRelatedLocationComboField',
                            displayField: 'PlacementName',
                            queryMode: 'local',
                            typeAhead: true,
                            valueField: 'Id',
                            width: 550,
                            fieldLabel: 'Absence from School',
                            labelWidth: 125,
                            forceSelection: true,
                            store: Ext.create('Ext.data.Store', {
                                id: 'AbsenceRelatedLocationStore',
                                fields: ['Id', 'PlacementName','ClinicalSupervisor__c','HostTeacher__c'],
                                data : []
                            }), 
                            listeners: {
                                change: {
                                    fn: me.onFieldChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            x: 20,
                            y: 95,
                            id: 'ReasonForAbsenceComboField',
                            displayField: 'name',
                            queryMode: 'local',
                            typeAhead: true,
                            valueField: 'value',
                            width: 285,
                            fieldLabel: 'Reason for Absence',
                            labelWidth: 125,
                            forceSelection: true,
                            store: Ext.create('Ext.data.Store', {
                                fields: ['value', 'name'],
                                data : {!AbsenceReasonExtJSON}
                            }), 
                            listeners: {
                                change: {
                                    fn: me.onFieldChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'textareafield',
                            x: 20,
                            y: 125,
                            id: 'AbsenceDescriptionMemoField',
                            width: 550,
                            height: 60,
                            fieldLabel: 'Absence Description',
                            labelWidth: 125,
                            enforceMaxLength: true,
                            maxLength: 498,
                            selectOnFocus: true,
                            listeners: {
                                change: {
                                    fn: me.onFieldChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'datefield',
                            x: 20,
                            y: 194,
                            id: 'AbsenceStartDateField',
                            width: 280,
                            fieldLabel: 'Absence Start Date',
                            labelWidth: 125,
                            listeners: {
                                change: {
                                    fn: me.onFieldChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'datefield',
                            x: 310,
                            y: 194,
                            id: 'AbsenceEndDateField',
                            width: 260,
                            fieldLabel: 'Absence End Date',
                            labelAlign: 'right',
                            labelWidth: 115,
                            listeners: {
                                change: {
                                    fn: me.onFieldChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'numberfield',
                            x: 20,
                            y: 225,
                            id: 'TotalDaysAbsentField',
                            fieldLabel: 'Total Days Absent',
                            labelWidth: 125,
                            decimalPrecision: 1,
                            minValue: 0,
                            step: 0.5,
                            value: 1,
                            listeners: {
                                change: {
                                    fn: me.onFieldChange,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'container',
                    id: 'AbsenceConfirmSubmitCard',
                    layout: {
                        type: 'absolute'
                    },
                    items: [
                        {
                            xtype: 'label',
                            id: 'ConfirmValidationLabel',
                            x: 20,
                            y: 20,
                            width: 550,
                            text: 'You are requesting approval for an absence during your demonstration teaching for the dates (starting date) to (end date) for a total of (# of days from form) for this absence event. '
                            
                        },
                        {
                            xtype: 'label',
                            x: 20,
                            y: 225,
                            width: 550,
                            text: 'If the above summary is correct, please click [Confirm] to submit your request for evaluation.'
                        },
                        {
                            xtype: 'button',
                            x: 480,
                            y: 270,
                            height: 30,
                            width: 100,
                            text: 'Cancel',
                            listeners: {
                                click: {
                                    fn: me.onCancelButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            x: 370,
                            y: 270,
                            height: 30,
                            id: 'PageThreeConfirmButton',
                            width: 100,
                            text: 'Confirm',
                            listeners: {
                                click: {
                                    fn: me.onPageThreeConfirmButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            x: 260,
                            y: 270,
                            height: 30,
                            id: 'PageThreeBackButton',
                            width: 100,
                            text: '<< Back',
                            listeners: {
                                click: {
                                    fn: me.onPageThreeBackButtonClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            listeners: {
                show: {
                    fn: me.onAbsenceDialogShow,
                    scope: me
                },
                beforeshow: {
                    fn: me.onAbsenceDialogBeforeShow,
                    scope: me
                },
                hide: {
                    fn: me.onAbsenceDialogHide,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
        me.absenceConfirmSubmitCard = Ext.getCmp('AbsenceConfirmSubmitCard');
        me.absenceRelatedLocationComboField = Ext.getCmp('AbsenceRelatedLocationComboField');
        me.pageTwoSubmitButton = Ext.getCmp('PageTwoSubmitButton');
        me.reasonForAbsenceComboField = Ext.getCmp('ReasonForAbsenceComboField');
        me.absenceDescriptionMemoField = Ext.getCmp('AbsenceDescriptionMemoField');
        me.absenceStartDateField = Ext.getCmp('AbsenceStartDateField');
        me.absenceEndDateField = Ext.getCmp('AbsenceEndDateField');
        me.absenceEndDateField.beingAdjusted = false;
        me.totalDaysAbsentField = Ext.getCmp('TotalDaysAbsentField');
        me.totalDaysAbsentField.beingAdjusted = false;
        me.confirmValidationLabel = Ext.getCmp('ConfirmValidationLabel');
        me.absencesTooltip = null;
        
    },

    onPageOneNextButtonClick: function(button, e, eOpts) {
        var me = Ext.getCmp('AbsenceDialog');
        me.layout.setActiveItem(1);
    },

    onCancelButtonClick: function(button, e, eOpts) {
        var me = Ext.getCmp('AbsenceDialog');
        me.hide();
        Ext.destroy(me);
    },

    onPageTwoSubmitButtonClick: function(button, e, eOpts) {
        var me = Ext.getCmp('AbsenceDialog');
        var days = me.totalDaysAbsentField.getRawValue()*1;
        me.confirmValidationLabel.update( '<span style="color:blue;font-weight:bold;font-size:15px;">Absence Request Summary:</span><br><br><br>You are requesting approval for a field experience absence.<br><br>School: <span style="color:blue;font-weight:bold;">'+me.absenceRelatedLocationComboField.getRawValue()+'</span><br><br>Dates of Absence: <span style="color:blue;font-weight:bold;">'+me.absenceStartDateField.getRawValue()+'</span> to <span style="color:blue;font-weight:bold;">'+me.absenceEndDateField.getRawValue()+'</span><br><br>For a total absence of <span style="color:blue;font-weight:bold;">'+days+(days==1?' day':' days')+'</span>. ');
        me.layout.setActiveItem(2);
    },

    onPageTwoBackButtonClick: function(button, e, eOpts) {
        var me = Ext.getCmp('AbsenceDialog');
        me.layout.setActiveItem(0);
    },

    onPageThreeConfirmButtonClick: function(button, e, eOpts) {
        var me = Ext.getCmp('AbsenceDialog');
        var fep = {};
        fep.FieldExperience__c = fieldExperience.Id;
        fep.Name = 'Absence';
        fep.Student__c = fieldExperience.Student__c;
        fep.AbsenceReason__c = me.reasonForAbsenceComboField.getValue();
        fep.AbsenceDescription__c = me.absenceDescriptionMemoField.getValue().trim();
        fep.FirstDayAbsent__c = Ext.Date.format(me.absenceStartDateField.getValue(), 'm/d/Y');
        fep.LastDayAbsent__c = Ext.Date.format(me.absenceEndDateField.getValue(), 'm/d/Y');
        fep.NumberofDaysAbsent__c = me.totalDaysAbsentField.getRawValue();
        var placementRec = me.absenceRelatedLocationComboField.store.findRecord('Id', me.absenceRelatedLocationComboField.getValue() );
        fep.ClinicalSupervisor__c = placementRec.data.ClinicalSupervisor__c;
        fep.HostTeacher__c = placementRec.data.HostTeacher__c;
        fep.Mentor__c = fieldExperience.Mentor__c;
        
        me.setLoading('Saving Absence Report...');
        MyFieldExperienceController.addFEPAbsence( Ext.encode(fep), function(result,er) {
          var me = Ext.getCmp('AbsenceDialog');
          me.setLoading(false);
          if ( er.status ) {
             if ( result && result.trim().length == 18 ) {
                 setTimeout( function() {
                     me.absenceConfirmSubmitCard.setLoading('Absence Report Saved Successfully...');
                     setTimeout( function(){
                       me.absenceConfirmSubmitCard.setLoading(false);             
                       me.hide();
                       Ext.destroy(me);
                     },1500);
                 }, 250);
             } else {
                 me.setLoading('Absence Report could not be Saved, please report this to the IT help desk...');
                 setTimeout( function(){
                   me.setLoading(false);             
                   me.hide();
                   Ext.destroy(me);
                 },5000);
             }
          } else {
               me.setLoading(false);             
               me.hide();
               Ext.destroy(me);
               if ( er.type == "exception" ) {
                 var subheaderFEContent = "<div>Absence Save Error <span>- "+er.message+"</span></div>";
                 Ext.get('subheader-wrapper').update(subheaderFEContent , false );
               }
          }
        });

    },

    onPageThreeBackButtonClick: function(button, e, eOpts) {
        var me = Ext.getCmp('AbsenceDialog');
        me.layout.setActiveItem(1);
    },

    onFieldChange: function(field, newValue, oldValue, eOpts) {
        var me = Ext.getCmp('AbsenceDialog');
        me.pageTwoSubmitButton.setDisabled( 
            me.absenceRelatedLocationComboField.getValue() === null || 
            me.absenceRelatedLocationComboField.getValue() === '' || 
            me.reasonForAbsenceComboField.getValue() === null ||
            me.reasonForAbsenceComboField.getValue() === '' ||
            me.absenceDescriptionMemoField.getValue().trim() === '' ||
            me.absenceStartDateField.getRawValue() === '' ||
            me.absenceEndDateField.getRawValue() === '' ||
            me.totalDaysAbsentField.getValue() === 0 || 
            me.totalDaysAbsentField.getRawValue() === '' );
        
        if ( me.totalDaysAbsentField.getRawValue() === '' ) {
          me.totalDaysAbsentField.setRawValue('1');
          return false;
        }
        
        if ( field.getId() === me.totalDaysAbsentField.getId() && newValue !== oldValue && me.totalDaysAbsentField.beingAdjusted == false ) {
           var isHalfDay = (me.totalDaysAbsentField.getValue() % 1) > 0;
           if ( isHalfDay && Math.floor((me.totalDaysAbsentField.getValue() % 1)*10) != 5 ) {
             me.totalDaysAbsentField.setValue( Math.floor(me.totalDaysAbsentField.getValue()) + .5 );
             return false;
           }           
        }

        if ( field.getId() === me.absenceStartDateField.getId() || field.getId() === me.absenceEndDateField.getId() ){
            if ( me.absenceStartDateField.getRawValue() !== '' && me.absenceEndDateField.getRawValue() !== '' && newValue !== oldValue ) {
                me.absenceEndDateField.setMinValue( me.absenceStartDateField.getValue() );
                if ( me.absenceStartDateField.getValue() > me.absenceEndDateField.getValue() ) {
                   me.absenceEndDateField.setValue( me.absenceStartDateField.getValue() );
                   return false;
                }
        
               var numDaysCurr = Math.floor(me.totalDaysAbsentField.getValue());
               var diffDays = Math.abs(me.absenceEndDateField.getValue() - me.absenceStartDateField.getValue());
                   diffDays = Math.floor(diffDays/86400000) + 1;
                   var totalDays = diffDays + ((me.totalDaysAbsentField.getValue() % 1)>0?.5: 0 );
                   if ( me.totalDaysAbsentField.getValue() != totalDays && me.totalDaysAbsentField.beingAdjusted == false ) {
                     me.totalDaysAbsentField.setValue( totalDays );
                     return false;
                   }

            } else {
                me.absenceStartDateField.setValue( new Date() );
                me.absenceEndDateField.setValue( new Date() );
                return false;
            }
        }
    },

    onAbsenceDialogShow: function(component, eOpts) {
        var me = Ext.getCmp('AbsenceDialog');
        me.setPosition( (Ext.getBody().getViewSize().width - me.getWidth())/2, (Ext.getBody().getViewSize().height - me.getHeight())/2 );
        me.absenceStartDateField.setValue( Ext.Date.format(new Date(), 'm/d/Y') );
        me.absenceEndDateField.setValue( Ext.Date.format(new Date(), 'm/d/Y') );
        me.reasonForAbsenceComboField.focus();
    },

    onAbsenceDialogBeforeShow: function(component, eOpts) {
    },

    onAbsenceDialogHide: function(component, eOpts) {
       var me = Ext.getCmp('AbsenceDialog');
       Ext.destroy(me.absencesTooltip);
       me.absencesTooltip = null;
    },

    onEsc: function() {
        var me = Ext.getCmp('AbsenceDialog');
        me.hide();
        Ext.destroy(me);
    }

});
    </script>        
            
            
</apex:form>
</body>
</html>
</apex:page>