<apex:page title="Western Governors University - My Students" contentType="text/html; charset=UTF-8" StandardController="Contact" standardStylesheets="false" showHeader="false" sidebar="false" docType="html">
<apex:outputText escape="false" value="{!'<!DOCTYPE html>'}"/>
<html>
<head>
    <link href="{!$Resource.profile}/images/favicon.ico" rel="SHORTCUT ICON"/>
    <title>Western Governors University - My Students</title>
    <style>
        a {color:blue;}      /* unvisited link */
        a:hover {color:darkblue;}  /* mouse over link */
        a:visited {color:blue;}  /* visited link */
        a:active {color:darkblue;}  /* selected link */

        .x-grid-dirty-cell {
            background-image: none;
        }
        .wgu-grid-text {
            font-size: 9.2px;
            font-weight: bold;
        }
        div.subjectColumn span {
            font-weight: bold;
        }

        div#PerformanceSurveyPanelDlg-body .x-form-cb-label {
            font-size: 10px;
        }
        div#PerformanceSurveyPanelDlg .x-panel-default {
            border-color: #99BCE8;
        }
        div#PerformanceSurveyPanelDlg .x-panel-header {
            border-color: #C7C7C7;
            background-color: #D3D3D3;
            background-image: none;
        }
        div#PerformanceSurveyPanelDlg .x-panel-header-text {
            color: #414141;
        }
        div#PerformanceSurveyPanelDlg-body.x-panel-body-default {
            border-color: #C7C7C7;
        }
        
        div#performanceActionsPanel-body .x-form-cb-label {
            font-size: 10px;
        }
        div#performanceActionsPanel .x-panel-default {
            border-color: #99BCE8;
        }
        div#performanceActionsPanel .x-panel-header {
            border-color: #C7C7C7;
            background-color: #D3D3D3;
            background-image: none;
        }
        div#performanceActionsPanel .x-panel-header-text {
            color: #414141;
        }
        div#performanceActionsPanel-body.x-panel-body-default {
            border-color: #C7C7C7;
        }
        
        
        #fieldset .x-form-display-field {
            padding-top: 3px;
            color: white;
            font-weight: 700;
        }

    </style>
</head>
<body style="font-family:tahoma,arial,verdana,sans-serif;background-color: #F2F2F2;overflow:auto;min-width:1580px;min-height:800px" scroll="yes">

<div id="LoadingDiv" style="font-size:15px;text-align:center;margin:100px 0 0 0;"><strong>Loading Mentor View<br/>Please wait...</strong></div>

<apex:includeScript value="/soap/ajax/27.0/connection.js"/>
<apex:includeScript value="/support/console/27.0/integration.js"/>
<script type="text/javascript" charset="utf-8" src="{!$Resource.WGUMonkeyFix}" id="WGUMonkeyFix"></script>

<script type="text/javascript" >
    if(typeof String.prototype.trim !== 'function') {  //IE8 String.trim() compensator
        String.prototype.trim = function() {
            return this.replace(/^\s+|\s+$/g, '');
        }
    }

    sforce.connection.init( "{!$Api.session_id}", "/services/Soap/u/27.0" );
    $soap = sforce.connection;
    $sconsole = (sforce && sforce.console && sforce.console.isInConsole()? sforce.console: false);
    var hostparts = location.hostname.split(".");
    var orgName = hostparts[0].split("--")[1];
    var boxName = orgName;
    try {
        boxName = $soap.retrieve('Value__c','Runtime__c',["a0P30000009q4RYEAY"])[0].Value__c;
    } catch (e) {
        boxName = orgName;
    };
</script>

<script type="text/javascript" charset="utf-8" src="{!$Resource.downloadify}/js/swfobject.js" id="DownloadifySWF"></script>
<script type="text/javascript" charset="utf-8" src="{!$Resource.downloadify}/js/downloadify.min.js" id="Downloadify"></script>
<apex:stylesheet value="{!URLFOR($Resource.extjs_v420, 'resources/css/ext-all.css')}"/>

<script type="text/javascript" charset="utf-8" src="{!$Resource.extjs_v420}/ext-all.js"></script>

<script type="text/javascript" >
Ext.Date.intervals = {
    s : 1000,
    m : 60000,
    h : 3600000,
    d : 86400000,
    w : 604800000
}

Ext.Date.intervalDiff = function(interval,date1,date2) {
    if( "smhdw".indexOf(interval) == -1 ) {
        return "error";
    }
    var d1 = typeof date1 == 'string'? Ext.Date.parse(date1,'Y-m-d'): date1;
    if( !d1 ) {
        return 0;
    }
    var d2 = typeof date2 == 'string'? Ext.Date.parse(date2,'Y-m-d'): date2;
    if( !d2 ) {
        return 0;
    }

    var diff = Math.floor(Math.abs(d1 - d2) / Ext.Date.intervals[interval]) + ((Math.abs(d2 - d1) % Ext.Date.intervals[interval])==0? 0: 1);
    return diff;
}
Ext.Date.intervalDiffFloor = function(interval,date1,date2) {
    if( "smhdw".indexOf(interval) == -1 ) {
        return "error";
    }
    var d1 = typeof date1 == 'string'? Ext.Date.parse(date1,'Y-m-d'): date1;
    if( !d1 ) {
        return 0;
    }
    var d2 = typeof date2 == 'string'? Ext.Date.parse(date2,'Y-m-d'): date2;
    if( !d2 ) {
        return 0;
    }

    var diff = Math.floor(Math.abs(d1 - d2) / Ext.Date.intervals[interval]);
    return diff;
}

Ext.Loader.setConfig({enabled: true});
Ext.Loader.setPath('Ext.ux', '{!$Resource.extjs_v420}/examples/ux');
Ext.require([
    'Ext.grid.*',
    'Ext.data.*',
    'Ext.chart.*',
    'Ext.ux.grid.FiltersFeature',
    'Ext.grid.plugin.BufferedRenderer'
]);

var WGUpanel;

Ext.onReady(function(){

    window.thisUser = $soap.retrieve("Id,FirstName,LastName,Name,ProfileName__c,SmallPhotoUrl,PIDM__c","User",['{!$User.Id}'])[0];
    window.thisMentorRecord = {Id:null,NameLastFirst:thisUser.LastName+', '+thisUser.FirstName,CanSelectOtherMentorsinMyStudents__c:false};

    Ext.tip.QuickTipManager.init();
    //setup quick tip default values
    Ext.apply(Ext.tip.QuickTipManager.getQuickTip(), {
        maxWidth: 450,
        minWidth: 175,
        minHeight: 25,
        showDelay: 50,      // Show 50ms after entering target
        autoWidth: true,
        autoHeight: true
    });

    Ext.FocusManager.enable();

    $soap.batchSize = 2000;
    //Find out if the current user is a mentor and if hey can see other mentor's assignmments
    var mentorQuery = "SELECT Id,Name,User__r.Name,User__r.FirstName,User__r.LastName,User__r.Id,User__r.SmallPhotoUrl,MentorRole__c,AssignedCollege__c,CanSelectOtherMentorsinMyStudents__c FROM Mentor__c";
    var myMentorQuery = mentorQuery + " WHERE User__c = '" + thisUser.Id + "' LIMIT 1";
    var mentorRecords = [];
    queryResult = $soap.query( myMentorQuery );
    queryResult.size *= 1;
    queryResult.done = (queryResult.done == "true");
    thisMentorRecord = queryResult.size == 1? queryResult.records: {Id:null,NameLastFirst:thisUser.LastName+', '+thisUser.FirstName,CanSelectOtherMentorsinMyStudents__c:false};
    thisMentorRecord.NameLastFirst = thisMentorRecord.User__r? thisMentorRecord.User__r.LastName + ', ' + thisMentorRecord.User__r.FirstName: thisMentorRecord.NameLastFirst;
    thisMentorRecord.CanSelectOtherMentorsinMyStudents__c = thisMentorRecord.Id? thisMentorRecord.CanSelectOtherMentorsinMyStudents__c=="true": ( thisUser.ProfileName__c == 'System Administrator' || thisUser.ProfileName__c == 'Developer'? true: false ) ;


    //create main view panel and render automatically into HTML BODY (Ext Viewport)        
    WGUpanel = new Ext.create('WGU.viewport.MentorPanel',{});
    var loadingDiv = Ext.fly("LoadingDiv");
    loadingDiv.hide();
    Ext.destroy(loadingDiv);


    if ( thisMentorRecord.CanSelectOtherMentorsinMyStudents__c ) {
        $soap.batchSize = 1000;
        //get the other mentor records if this user can view others mentors' assignments
        var getAllMentorsQuery = mentorQuery + " WHERE MentorRole__c != 'None' AND isTestData__c = false AND User__r.isActive = true AND User__r.isEmployee__c = true";
        $soap.query(getAllMentorsQuery, function(queryResult) {
            queryResult.size *= 1;
            queryResult.done = (queryResult.done == "true");
            if ( queryResult.size > 0 ){
                var mentorResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
                for ( var mentorIndex=0; mentorIndex < mentorResultSet.length; mentorIndex++ ) {
                    mentorResultSet[mentorIndex].User__r = mentorResultSet[mentorIndex].User__r==null? {Id:null,Name:null,FirstName:null,LastName:null}: mentorResultSet[mentorIndex].User__r;
                    mentorResultSet[mentorIndex].NameLastFirst = mentorResultSet[mentorIndex].User__r.Name==null? mentorResultSet[mentorIndex].Name: (mentorResultSet[mentorIndex].User__r.LastName +", " + mentorResultSet[mentorIndex].User__r.FirstName);
                    if ( mentorResultSet[mentorIndex].Id !== thisMentorRecord.Id ) {
                        mentorRecords.push( mentorResultSet[mentorIndex] );
                    }
                }
                mentorStore.loadRawData(mentorRecords, true);

                if ( !queryResult.done ) {
                    setTimeout( function(){ WGUpanel.addMoreMentors( queryResult.queryLocator ) }, 1);
                } else {
                    setTimeout( function() {
                        WGUpanel.mentorNameField.setValue(thisMentorRecord.data? thisMentorRecord.data.Name :'No Mentor Record Found');
                        WGUpanel.mentorRoleField.setValue(thisMentorRecord.data? thisMentorRecord.data.MentorRole__c :'No Mentor Record Found');
                        WGUpanel.mentorAssignedCollegeField.setValue(thisMentorRecord.data? thisMentorRecord.data.AssignedCollege__c :'No Mentor Record Found');
                    }, 50);

                    if ( mentorStore.count()>1 ) {
                        mentorStore.sort('NameLastFirst','ASC');
                    }
                    //fabricate assigning the current user as the selected mentor when they are not a mentor, say an SA or Developer
                    setTimeout( function() {
                        var combo = WGUpanel.mentorListCombo;
                        if (thisMentorRecord.Id==null && combo && combo.getRawValue() == thisUser.Id ) {
                            combo.setRawValue( thisUser.LastName+", "+thisUser.FirstName );
                            setTimeout( function() { me.mentorFullNameField.setValue( thisUser.FirstName+" "+thisUser.LastName ); }, 50);
                        }
                    }, 100 );
                }
            }

        }); //end asynchrounous query

    }

    Ext.EventManager.onWindowResize( function(width, height) {

        Ext.callback( function(){
            //firefox bug handler, make sure refreshes and repaints occur after resize events
            if ( width < WGUpanel.minWidth || height < WGUpanel.minHeight ) {
                WGUpanel.getEl().setStyle('overflow-x','scroll');
                if (Ext.isIE) {
                    var body = Ext.getBody();
                    body.setStyle('overflow','scroll');
                    body.dom.setAttribute('scroll','yes');
                    body.dom.setAttribute('horizontalscrolling','yes');
                    body.dom.setAttribute('verticalscrolling','yes');
                }
            } else {
                WGUpanel.getEl().setStyle('overflow-x','scroll');
                if (Ext.isIE) {
                    var body = Ext.getBody();
                    body.setStyle('overflow','scroll');
                    body.dom.setAttribute('scroll','yes');
                    body.dom.setAttribute('horizontalscrolling','yes');
                    body.dom.setAttribute('verticalscrolling','yes');
                }
            }
            WGUpanel.doLayout();
            WGUpanel.studentsGridPanel.doLayout();
        }, window, null, 100);

    });


}); //end Ext.onReady()

//add the following properties to all Menu Items (note type and sub type items are used at least 5 differnt places in the UI), this permits a single menu handler
//to assign the note type and subtype to the note editor, regardless of the menu access point
Ext.override(Ext.menu.Item, {
    menuCategory: false,
    noteType: false,
    noteSubType: false
});

//define reusable properties and functions, mostly related to column rendering in grid layouts
WGU = {
    talismaLinkBaseUrl: 'http://webapp4.wgu.edu/MentorNotes?pidm=',
    onStudentNameRender: function(value, metaData, record, rowIndex, colIndex, store, view) {
        //value=value.replace("\'","&rsquo");
        if ( $sconsole ) {
            metaData.tdAttr = 'data-qwidth="'+record.get('Name').length*14+'" data-qtip="Open tab for '+record.get('Name')+'"';
            var nameLastFirst = "<a id='"+record.get('Id')+"' href='#' onclick='$sconsole.openPrimaryTab( null, \"/"+record.get('Id')+"\", true, \""+value.replaceAll("\'","&#39")+"\", function(){}, \""+value.replaceAll("\'","&#39")+"\" );return false;'>" + value  + "</a>";
            nameLastFirst =  record.get("IsNSE__c")? nameLastFirst + "&nbsp;<img src='{!$Resource.bluedot}'/>": nameLastFirst;
            nameLastFirst = (record.get('Status__c')=='TB'? nameLastFirst + "<code style='font-size: 8px;color:darkblue;'>&nbsp;&nbsp;[TERM&nbsp;BREAK]</code>":nameLastFirst);
            return nameLastFirst;
        } else {
            metaData.tdAttr = 'data-qwidth="'+record.get('Name').length*14+'" data-qwidth="200" data-qtip="Open view for '+record.get('Name')+'"';
            var nameLastFirst = "<a id='" + record.get('Id') + "' href='#' onclick='window.open(\"/"+record.get('Id')+"\", \""+record.get('Id')+"\" );window.focus();return false;'>" + value + "</a>";
            nameLastFirst =  record.get("IsNSE__c")? nameLastFirst + "&nbsp;<img src='{!$Resource.bluedot}'/>": nameLastFirst;
            nameLastFirst = (record.get('Status__c')=='TB'? nameLastFirst + "<code style='font-size: 8px;color:darkblue;'>&nbsp;&nbsp;[TERM&nbsp;BREAK]</code>":nameLastFirst);
            return nameLastFirst;
        }
    },
    onPercentRender: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return (Ext.isEmpty(value)? "0": value)+"%";
    },
    onSAPPercentRender: function(value, metaData, record, rowIndex, colIndex, store, view) {
        if ( Ext.isEmpty(value) || value*1 <= 66 ) {
            return "<span style='color:red'>"+ ( Ext.isEmpty(value)? "0" : value ) +"%</span>";
        } else {
            return "<span style='color:green'>"+value+"%</span>";
        }
    },
    onEmailRender: function(value, metaData, record, rowIndex, colIndex, store, view) {
        var email = record.get("WGUEmail__c")==""? record.get("Email"): record.get("WGUEmail__c");
        var link = record.get("ComposeEmailLink__c").split('href')[1].split('\"')[1];
        return "<a href='#' onclick='window.open(\""+link+"\", \"QEmail"+record.get("Id")+"\" );window.focus();return false;'>" + email + "</a>";
    },
    onPhoneRender: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return record.get("Phone")==""? record.get("HomePhone"): record.get("Phone");
    },
    onContactIdRender: function(value, metaData, record, rowIndex, colIndex, store, view) {
        var name = record.get("NameLastFirst");
        return "<a id='contact_"+value+"' href='#' onclick='window.open(\"/"+value+"\", \""+value+"\" );window.focus();return false;'>" + value + "</a>";
    },
    onStandingIconRender: function(value, metaData, record, rowIndex, colIndex, store, view) {
        metaData.tdAttr = 'data-qwidth="'+record.get('AcademicStanding').length*2+'" data-qtip="' + record.get('AcademicStanding')+ '"';
        return '<img src="'+record.get("AcademicStandingIcon")+'"/>';
    },
  //RISK FACTOR icon
    onRiskIconRender: function(value, metaData, record, rowIndex, colIndex, store, view) {
        metaData.tdAttr = 'data-qwidth="'+record.get('StudentAction').length*2+'" data-qtip="' + record.get('StudentAnalyticMessage')+ '"';
        var iconDirString =  '{!$Resource.riskTypesPNG}/riskTypesPNG/';
        //RISK FACTOR icon
        if(record.get("HasRiskData")==true && parseFloat(record.get('StudentAction'))==1)
        {
            return '<img src=\"'+iconDirString+'RedStar.png" />';
        }else if(record.get("HasRiskData")==true && parseFloat(record.get('StudentAction'))==2)
        {
            return '<img src=\"'+iconDirString+'YellowMark.png" />';
        }else if(record.get("HasRiskData")==true && parseFloat(record.get('StudentAction'))==3)
        {

            return '<img src=\"'+iconDirString+'GreenCheck.png" />';
        } 
    },
    //render the academic requirements
    // column for multiple assesements.
    //copy from Katarina's page. 
    onRequirementRender: function(value, metaData, record, rowIndex, colIndex, store, view)
    {
            //Custom render function for requirements data
            var reqString='';
            
            var reqRecords=AcademicRequirementStore.getGroups(value);
            var completiondate = '';
            //Verify that a group was actually retrieved
            if (reqRecords!=null && reqRecords.children!=null)
            {
                //Loop through all Student Academic Course Requirement records
                for (var i=0; i<reqRecords.children.length; i++)
                {
                    reqString=reqString+'<img src="{!$Resource.SmallAssessmentIcons}/';
                
                    //Determine whether to use the Performance or Objective icon versions
                    if (reqRecords.children[i].data.Type=='Performance')
                    {
                        reqString=reqString+'P-';
                    }
                    else
                    {
                        reqString=reqString+'O-';
                    }
                    
                    //If the requirement is Completed use the blue icon, otherwise use green
                    if (reqRecords.children[i].data.Completed)
                    {
                        reqString=reqString+'blue';
                    }
                    else if (reqRecords.children[i].data.Attempts>=1)
                    {
                        reqString=reqString+'red';
                    }
                    else
                    {
                        reqString=reqString+'green';
                    }
                    
                    //Dynamically set the mouse-over size based on the size of the title
                    var qtipWidth=reqRecords.children[i].data.FullTitle.length*10;
                    
                    //If the width is too small set to 200
                    if (qtipWidth<200)
                    {
                        qtipWidth=200;
                    }
                                
                    reqString=reqString+'.png" data-qwidth="'+qtipWidth+'" data-qtip="'+reqRecords.children[i].data.FullTitle+'<br/>Type:    '+reqRecords.children[i].data.Type+'<br/>Status:   '+reqRecords.children[i].data.Status+'<br/>Attempts: '+reqRecords.children[i].data.Attempts+'';
                    
                    //Preassessment Code is only displayed if populated
                    if (reqRecords.children[i].data.PreassessmentCode!='')
                    {
                        reqString=reqString+'<br/>Preassessment Code: '+reqRecords.children[i].data.PreassessmentCode+' ';
                    }
                    
                    //The following are displayed as a basic text flag if the associated boolean field is set to true
                    if (reqRecords.children[i].data.Engaged)
                    {
                        reqString=reqString+'<br/>Engaged';
                    }
                    
                    if (reqRecords.children[i].data.EngagedPreassessment)
                    {
                        reqString=reqString+'<br/>Preassessment Engaged';
                    }
                    
                    if (reqRecords.children[i].data.Completed)
                    {
                        reqString=reqString+'<br/>Completed';
                    }
                    
                    reqString=reqString+'" /> ';
                    
                    //find the max course requirement completiondate
                    if(reqRecords.children[i].data.CompletedDate__c > completiondate)
                    {
                    	completiondate =   reqRecords.children[i].data.CompletedDate__c  ;
                	}
                }
                
                //put the max completionDate to course
                if(record.get("CourseStatus")=='Passed' && completiondate!='')
                {
                	record.set("CourseCompletedDate",completiondate);
                //	record.commit();
                }
            } 
             
            return reqString; 
    },
    
    onMentorSuggestionRender: function(value, metaData, record, rowIndex, colIndex, store, view) {
    	metaData.tdAttr = 'data-qwidth="'+value.length +'" data-qtip="' + value+ '"';
        
    	var str = Ext.util.Format;
		var clearVal = str.stripTags(value);
		 
        return  clearVal.split('\n')[0];
    },
    onPlannedGraduationDateRender: function(value, metaData, record, rowIndex, colIndex, store, view) {
        return (value==null||value==""? "<span style='color:red;' data-qwidth='160' data-qtip='Date needs correction. Correct format is [MonthName YYYY]'>!! "+(record.raw.StudentPlannedGraduationDate__c==null?'Not Set':record.raw.StudentPlannedGraduationDate__c.replaceAll(' ','&nbsp;'))+"</span>": Ext.Date.format(value, 'F Y'));
    },
    onAcademicStandingRender: function(value, metaData, record, rowIndex, colIndex, store, view) {
        var renderHTML;
        if ( value == "New Student" || value == "Terminated" || value == "Suspended" || value == "Warning" || value.indexOf('Probation') != -1 ) {
            var bgcolor = (value == "New Student"? "#045685": false);
            if ( !bgcolor ) {
                bgcolor = ( value=="Terminated"||value=="Suspended" )? "red": (value == "Warning"? "orange": "yellow");
                renderHTML = "<div style='background-color:"+bgcolor+";'>"+value+"</div>";
            } else {
                renderHTML = "<div style='font-size:10.1px;font-weight:bold;color:white;background-color:"+bgcolor+";'>"+value+"</div>";
            }
        } else {
            renderHTML =  value;
        }
        return renderHTML;
    },
    onDegreeProgramRender: function(value, metaData, record, rowIndex, colIndex, store, view) {
        metaData.tdAttr = 'data-qwidth="'+record.get('ProgramName__c').length*6+'" data-qtip="' + record.get('ProgramName__c')+ '"';
        return record.get('ProgramCode__c')==""?"": (record.get('ProgramCode__c')+ "&nbsp;&nbsp;(" + record.get('ProgramCatalogTerm__c') + ")");
    },

    onHandleNoteMenuClick: function (menuItem, evt) {  //menu click handler for all notes-related menu items
        var me = WGUpanel;
        evt.stopEvent();
        var grid = me.studentsGridPanel.getLayout().getActiveItem();
        var selected = grid.getView().getSelectionModel().getSelection()[0];
        var student = selected.data;
        var note = false;
        if ( menuItem.itemId && (menuItem.itemId.indexOf("NotGridActionsButton") != -1 ||
                menuItem.itemId.indexOf("NotesGridMenu") != -1 ||
                menuItem.itemId.indexOf("GridActionsButton") != -1 ) ) {
            //action generated from notes grid
            var notesGrid = Ext.getCmp('NoteHistoryGridPanel');
            var selectedNotes = notesGrid.getView().getSelectionModel().getSelection();
            if ( !Ext.isEmpty(selectedNotes) && menuItem.itemId.indexOf('NewNoteMenuItem') == -1 ) {
                note = selectedNotes[0].data;
            }
        } else if ( menuItem.itemId && (menuItem.itemId.indexOf("PanelNotesButton") != -1 || menuItem.itemId.indexOf("SelectionGridMenu") != -1 )) {
            //TODO: nothing to do yet
        }

        if ( menuItem.menuCategory ) {
            note = note==false? {}: note;
            if (menuItem.menuCategory=="noteType") {
                note.Type__c = menuItem.noteType;
                note.Name = menuItem.noteType;
                note.SubType__c = null;
            } else if ( menuItem.menuCategory=="noteSubType") {
                note.Type__c = menuItem.noteType;
                note.SubType__c = menuItem.noteSubType;
                note.Name = menuItem.noteType;
            }
        }
        if (note && note.Id) {
            note.Id = (menuItem.text.indexOf('cc:') != -1? null: note.Id);
        }
        var notesDialog = Ext.create('WGU.dialog.WGUNotesDialog');
        notesDialog.showModal({"student": student, "note":note, modalCallback: WGU.onNoteDialogModalResult, cc: menuItem.text.indexOf('cc:')!= -1 });
    },

    onNoteDialogModalResult: function (result) {  //standard note editor callback
        if ( Ext.isChrome ) {
            console.log( 'Notes Dialog Modal Result:' );
            console.log( result );
        }
        if ( result && result.modalResult ) {
            if (result.modalResult == "mrSuccess") {
                var notesGrid = Ext.getCmp('NoteHistoryGridPanel');
                var notestore = notesGrid.store;
                if ( result.operation == 'insert' ) {
                    Ext.getCmp('NotesGridClearFiltersButton').handler();
                    Ext.getCmp('NotesGridViewCards').getLayout().setActiveItem(0);
                    notestore.insert( 0, result.note );
                    var noteCountField = Ext.getCmp('StudentNoteCountText');
                    noteCountField.setValue( (noteCountField.getValue()*1) + 1);
                    notesGrid.getSelectionModel().select(0);
                    notesGrid.getView().refresh();
                } else if ( result.operation == 'update' ) {
                    var record = notestore.findRecord('Id',result.note.Id );
                    record.beginEdit();
                    record.set('Text__c',result.note.Text__c);
                    record.set('ShortText__c',  Ext.String.ellipsis(result.note.ShortText__c,100,true) );
                    record.set('SubType__c', result.note.SubType__c );
                    record.set('Name', result.note.Name ); //subject
                    record.endEdit();
                    Ext.getCmp('EmbeddedStudentNoteView').loadNoteRecord(record.data);
                    notesGrid.getView().refresh();
                    notesGrid.getSelectionModel().select([record]);
                }
                var countResult = $soap.query("SELECT count() FROM WGUStudentNote__c WHERE Student__c = \'" + result.note.Student__c +"\'");
                if ( countResult.size*1 != notestore.count() ) {
                    setTimeout( function() {try { Ext.getCmp('EmbeddedStudentNoteView').onRefreshNoteHistoryButtonClick(); } catch(e) { if ( Ext.isChrome ) { console.log('Notes Grid Refresh Error:' + (e.description?e.description:e))} }}, 100);
                }
            }
        }
    }
};


//define default column configs for use in "reset columns" and initial views before User sets up their own preferences
WGU.defaultColumnConfig =  [{
    xtype: 'rownumberer',
    width: 50,
    sortable: false,
    filterable: false,
    text: 'Row#',
    cls: 'wgu-grid-text',
    resizable: true
},
    {
        xtype: 'gridcolumn',
        text: '&nbsp;',
        tooltip: 'Academic Standing',
        renderer: WGU.onStandingIconRender,
        renderFunc: 'WGU.onStandingIconRender',
        dataIndex: 'AcademicStanding',
        width: 45,
        align: 'center',
        sortable: true,
        filterable: false,
        hideable: false,
        resizable: false
    },
    {
        xtype: 'gridcolumn',
        text: 'Student Name (Last Name, First)',
        tooltip: 'Student\'s Name',
        dataIndex: 'NameLastFirst',
        cls: 'wgu-grid-text',
        width: 250,
        flex: 1,
        filterable: true,
        sortable: true,
        renderer: WGU.onStudentNameRender,
        renderFunc: 'WGU.onStudentNameRender',
        hideable: false,
        draggable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Student Action',
        tooltip: 'Student Action',
        dataIndex: 'StudentAction', 
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: false,
        hideable: true,
        disabled: false, 
        filterable: true,
        sortable: true, 
        renderer: WGU.onRiskIconRender,
        renderFunc: 'WGU.onRiskIconRender'
    },
    {
        xtype: 'gridcolumn',
        text: 'Student Id',
        tooltip: 'Student\'s Student Id [BannerId]',
        dataIndex: 'StudentID__c',
        cls: 'wgu-grid-text',
        width: 80,
        align: 'center',
        filterable: true,
        sortable: true
    },
    {
        xtype: 'gridcolumn',
        text: 'Status',
        tooltip: 'Student\'s Status',
        dataIndex: 'Status__c',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true
    },
    {
        xtype: 'gridcolumn',
        text: 'Email',
        tooltip: 'Student\'s WGUEmail__c Field Value',
        dataIndex: 'WGUEmail__c',
        cls: 'wgu-grid-text',
        width: 180,
        align: 'left',
        hidden: false,
        filterable: true,
        sortable: true,
        renderer: WGU.onEmailRender,
        renderFunc: 'WGU.onEmailRender'
    },
    {
        xtype: 'gridcolumn',
        text: 'Phone',
        tooltip: 'Student\'s Mobile or Home Phone Number',
        dataIndex: 'Phone',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'left',
        hidden: true,
        filterable: true,
        sortable: true,
        renderer: WGU.onPhoneRender,
        renderFunc: 'WGU.onPhoneRender'
    },
    {
        xtype: 'gridcolumn',
        text: 'ContactId',
        tooltip: 'Student\'s Salesforce Contact Id',
        dataIndex: 'Id',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'left',
        hidden: true,
        filterable: true,
        sortable: true,
        renderer: WGU.onContactIdRender,
        renderFunc: 'WGU.onContactIdRender'
    },
    {
        xtype: 'gridcolumn',
        text: 'Degree Program',
        tooltip: 'Student\'s Degree Program',
        dataIndex: 'ProgramCode__c',
        cls: 'wgu-grid-text',
        width: 150,
        align: 'left',
        filterable: true,
        sortable: true,
        renderer: WGU.onDegreeProgramRender,
        renderFunc: 'WGU.onDegreeProgramRender'
    },
    {
        xtype: 'datecolumn',
        text: 'Term Break Start Date',
        tooltip: 'Term Break Start Date',
        dataIndex: 'TermBreakStartDate__c',
        cls: 'wgu-grid-text',
        width: 125,
        align: 'center',
        filterable: true,
        sortable: true,
        hidden: true,
        format: 'm/d/Y'
    },
    {
        xtype: 'datecolumn',
        text: 'Term Break End Date',
        tooltip: 'Term Break End Date',
        dataIndex: 'TermBreakEndDate__c',
        cls: 'wgu-grid-text',
        width: 125,
        align: 'center',
        filterable: true,
        sortable: true,
        hidden: true,
        format: 'm/d/Y'
    },
    {
        xtype: 'datecolumn',
        text: 'Term Start Date',
        tooltip: 'Term Start Date',
        dataIndex: 'TermStartDate__c',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        filterable: true,
        sortable: true,
        format: 'm/d/Y'
    },
    {
        xtype: 'datecolumn',
        text: 'Term End Date',
        tooltip: 'Term End Date',
        dataIndex: 'TermEndDate__c',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        filterable: true,
        sortable: true,
        format: 'm/d/Y'
    },
    {
        xtype: 'numbercolumn',
        text: 'Term Weeks',
        tooltip: 'Number of Weeks in Term',
        dataIndex: 'TermWeeksCount',
        cls: 'wgu-grid-text',
        width: 110,
        align: 'center',
        filterable: true,
        hidden: true,
        format: '0',
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Term Days',
        tooltip: 'Number of Days in Term',
        dataIndex: 'TermDaysCount',
        cls: 'wgu-grid-text',
        width: 110,
        align: 'center',
        filterable: true,
        hidden: true,
        format: '0',
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Weeks Into Term',
        tooltip: 'Number of Weeks Into Term',
        dataIndex: 'WeeksInToTerm',
        cls: 'wgu-grid-text',
        width: 110,
        align: 'center',
        filterable: true,
        hidden: true,
        format: '0',
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Weeks Left in Term',
        tooltip: 'Number of Weeks to Term End',
        dataIndex: 'WeeksLeftInTerm',
        cls: 'wgu-grid-text',
        width: 110,
        align: 'center',
        filterable: true,
        hidden: true,
        format: '0',
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Days Into Term',
        tooltip: 'Number of Days Into Term',
        dataIndex: 'DaysInToTerm',
        cls: 'wgu-grid-text',
        width: 110,
        align: 'center',
        filterable: true,
        hidden: true,
        format: '0',
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Days Left in Term',
        tooltip: 'Number of Days to Term End',
        dataIndex: 'DaysLeftInTerm',
        cls: 'wgu-grid-text',
        width: 110,
        align: 'center',
        filterable: true,
        hidden: true,
        format: '0',
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Term Enrolled CUs',
        tooltip: 'Term Enrolled Credit Units',
        dataIndex: 'CurrentTermEnrolledCUs__c',
        cls: 'wgu-grid-text',
        width: 110,
        align: 'center',
        filterable: true,
        format: '0',
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Term Completed CUs',
        tooltip: 'Term Completed Credit Units',
        dataIndex: 'CurrentTermCompletedCUs__c',
        cls: 'wgu-grid-text',
        width: 120,
        align: 'center',
        filterable: true,
        format: '0',
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Term SAP%',
        tooltip: 'Term Satisfactory Academic Progress Percent',
        dataIndex: 'TermSap__c',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        renderer: WGU.onSAPPercentRender,
        renderFunc: 'WGU.onSAPPercentRender',
        filterable: true,
        format: '0.00',
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Total Attempted CUs',
        tooltip: 'Total Attempted Credit Units',
        dataIndex: 'TotalAttemptedCUs__c',
        cls: 'wgu-grid-text',
        width: 150,
        align: 'center',
        hidden: true,
        filterable: true,
        format: '0',
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Total Completed CUs',
        tooltip: 'Total Completed Credit Units',
        dataIndex: 'TotalCompletedCUs__c',
        cls: 'wgu-grid-text',
        width: 150,
        align: 'center',
        hidden: true,
        filterable: true,
        format: '0',
        sortable: true
    },
    {                               // 10-3-2013 SAP historical change
        xtype: 'numbercolumn',
        text: 'Historically Attempted CUs',
        tooltip: 'Historically Attempted Credit Units',
        dataIndex: 'HistoricallyAttemptedCUs__c',
        cls: 'wgu-grid-text',
        width: 150,
        align: 'center',
        hidden: true,
        filterable: true,
        format: '0',
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Historically Completed CUs',
        tooltip: 'Historically Completed Credit Units',
        dataIndex: 'HistoricallyCompletedCUs__c',
        cls: 'wgu-grid-text',
        width: 150,
        align: 'center',
        hidden: true,
        filterable: true,
        format: '0',
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Cumulative SAP%',
        tooltip: 'Cumulative Satisfactory Academic Progress Percent',
        dataIndex: 'CumulativeSAP__c',
        cls: 'wgu-grid-text',
        width: 120,
        align: 'center',
        renderer: WGU.onSAPPercentRender,
        renderFunc: 'WGU.onSAPPercentRender',
        filterable: true,
        format: '0.00',
        sortable: true
    },
    {
        xtype: 'datecolumn',
        text: 'Planned Graduation',
        tooltip: 'Planned Graduation Date',
        dataIndex: 'StudentPlannedGraduationDate__c',
        cls: 'wgu-grid-text',
        width: 120,
        align: 'left',
        hidden: true,
        filterable: true,
        sortable: true,
        format: 'F Y',
        renderer: WGU.onPlannedGraduationDateRender,
        renderFunc: 'WGU.onPlannedGraduationDateRender'
    },
    {
        xtype: 'gridcolumn',
        text: 'Program Term',
        tooltip: 'Program Catalog Term',
        dataIndex: 'ProgramCatalogTerm__c',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true
    },
    {
        xtype: 'gridcolumn',
        text: 'Time Zone',
        tooltip: 'Student\'s Time Zone',
        dataIndex: 'Timezone__c',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true
    },
    {
        xtype: 'gridcolumn',
        text: 'Current Term',
        tooltip: 'Student Current Term Code',
        dataIndex: 'CurrentTerm__c',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true
    },
    {
        xtype: 'numbercolumn',
        text: 'Student Term#',
        tooltip: 'Student Current Term Number',
        dataIndex: 'TermNumber__c',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true,
        format: '0'
    },
    {
        xtype: 'datecolumn',
        text: 'FAA Date',
        tooltip: 'Student\'s FAA Date',
        dataIndex: 'FAADate__c',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true,
        format: 'm/d/Y'
    },
    {
        xtype: 'gridcolumn',
        text: 'Academic Standing',
        tooltip: 'Student\'s Academic Standing',
        dataIndex: 'AcademicStanding',
        cls: 'wgu-grid-text',
        width: 150,
        align: 'center',
        hidden: false,
        renderer: WGU.onAcademicStandingRender,
        renderFunc: 'WGU.onAcademicStandingRender',
        filterable: true,
        sortable: true
    },
    {   //mentor want to see birthday(without year) https://jira.wgu.edu/jira/browse/SFMENTOR-465
        xtype: 'datecolumn',
        text: 'Birthday',
        tooltip: 'Student\'s Birthday',
        dataIndex: 'Birthday',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        hideable: false,
        filterable: true,
        sortable: true,
        format: 'M-d'
    },
    {   //last login time
        xtype: 'datecolumn',
        text: 'Last Login',
        tooltip: 'Last time the student login',
        dataIndex: 'LastPortalLogin__c',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true,
        format: 'Y-m-d H:i:s'
    },
    {   //campus
        xtype: 'gridcolumn',
        text: 'Campus',
        tooltip: 'WGU campus',
        dataIndex: 'CampusCode__c',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true 
    }];

WGU.defaultCourseColumnConfig = Ext.Array.clone(WGU.defaultColumnConfig);
Ext.Array.insert(WGU.defaultCourseColumnConfig, WGU.defaultCourseColumnConfig.length, [
    {
        xtype: 'gridcolumn',
        text: 'Course Term Code',
        tooltip: 'Course Term Code',
        dataIndex: 'CourseTermCode',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true
    },
    {
        xtype: 'gridcolumn',
        text: 'Course Code',
        tooltip: 'Course Code',
        dataIndex: 'CourseCode',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true
    },
    {
        xtype: 'gridcolumn',
        text: 'Course Status',
        tooltip: 'Course Status',
        dataIndex: 'CourseStatus',
        cls: 'wgu-grid-text',
        width: 110,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true
    },
    {
        xtype: 'datecolumn',
        text: 'Course Start Date',
        tooltip: 'Course Start Date',
        dataIndex: 'CourseStartDate',
        cls: 'wgu-grid-text',
        width: 110,
        align: 'center',
        hidden: false,
        filterable: true,
        sortable: true,
        format: 'm/d/Y'
    },
    {
        xtype: 'datecolumn',
        text: 'Course End Date',
        tooltip: 'Course End Date',
        dataIndex: 'CourseEndDate',
        cls: 'wgu-grid-text',
        width: 110,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true,
        format: 'm/d/Y'
    },
    {
        xtype: 'datecolumn',
        text: 'Completion Date',
        tooltip: 'Course Completion Date',
        dataIndex: 'CourseCompletedDate',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true,
        format: 'm/d/Y'
    },
    {
        xtype: 'booleancolumn',
        text: 'Completed',
        tooltip: 'Course Completed',
        dataIndex: 'CourseCompleted',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        filterable: true,
        sortable: true
    },//11/7/2013 columns for Case Load
    {
        xtype: 'datecolumn',
        text: 'Assignment Start Date',
        tooltip: 'Assignment Start Date',
        dataIndex: 'CourseMentorAssignedStartDate',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: false,
        filterable: true,
        sortable: true,
        format: 'm/d/Y'
    },
    {
        xtype: 'gridcolumn',
        text: 'Assignment Type',
        tooltip: 'Assignment Type',
        dataIndex: 'CourseMentorAssignedReason',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: false,
        filterable: true,
        sortable: true
    },
    {   //1-1-14 academic course
        xtype: 'gridcolumn',
        text: 'Assessments',
        tooltip: 'Assessments',
        dataIndex: 'StudentAcademicCourse__c',
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: false,
        hideable: true,
        disabled: false, 
        filterable: true,
        sortable: true, 
        renderer:  WGU.onRequirementRender,
        renderFunc: 'WGU.onRequirementRender'
    }  
    ] );

//for risk factor
/*WGU.riskColumn=[
    {
        xtype: 'numbercolumn',
        text: 'Overall Student Ability',
        tooltip: 'Overall Student Ability',
        dataIndex: 'StudentAction', 
        cls: 'wgu-grid-text',
        width: 150,
        align: 'center',
        hidden: true,
        hideable: false,
        disabled: false, 
        filterable: true,
        sortable: true, 
        renderer: WGU.onRiskIconRender,
        renderFunc: 'WGU.onRiskIconRender'
    },{
        xtype: 'numbercolumn',
        text: 'Math Ability',
        tooltip: 'Math Ability',
        dataIndex: 'MathRisk', 
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        hideable: false,
        disabled: false, 
        filterable: true,
        sortable: true
    },{
        xtype: 'numbercolumn',
        text: 'English Ability',
        tooltip: 'English Ability',
        dataIndex: 'EnglishRisk', 
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        hideable: false,
        disabled: false, 
        filterable: true,
        sortable: true
    },{
        xtype: 'numbercolumn',
        text: 'Writing Ability',
        tooltip: 'Writing Ability',
        dataIndex: 'WrittingRisk', 
        cls: 'wgu-grid-text',
        width: 100,
        align: 'center',
        hidden: true,
        hideable: false,
        disabled: false, 
        filterable: true,
        sortable: true
    },{
        xtype: 'numbercolumn',
        text: 'Prior College Experience',
        tooltip: 'Relative Prior College Experience',
        dataIndex: 'TransferRisk', 
        cls: 'wgu-grid-text',
        width: 150,
        align: 'center',
        hidden: true,
        hideable: false,
        disabled: false, 
        filterable: true,
        sortable: true
    }
    ];
Ext.Array.insert(WGU.defaultCourseColumnConfig, WGU.defaultCourseColumnConfig.length, WGU.riskColumn);*/
  
//gather six current term codes for mentor queries
WGU.loadDate = new Date();
WGU.mySixTerms = " ('"+Ext.Date.format(WGU.loadDate, 'Ym')+"'";
for ( var t = 0; t < 5; t++ ) {
    WGU.loadDate.setMonth( WGU.loadDate.getMonth()-1 );
    WGU.mySixTerms += ",'"+Ext.Date.format(WGU.loadDate, 'Ym')+"'";
}
WGU.mySixTerms += ") ";

//function to parse out dependent picklist values based on validFor meta data per picklist value
WGU.getSubTypePickListValues = function(typeValue, index) {
    var returnObj = {
        success: true,
        message: 'Operation Ran Successfully',
        values: []
    };

    try {
        var picklistValues = WGU.WGUStudentNoteSubTypeMeta.picklistValues;

        // sub function to do the meata validFor test
        function isDependentValue(index, validFor) {
            var base64 = new sforce.Base64Binary("");
            var decoded = base64.decode(validFor);
            var bits = decoded.charCodeAt(index >> 3);

            return ((bits & (0x80 >> (index % 8))) != 0);
        }

        for (var i = 0; i < picklistValues.length; i++) {
            if (isDependentValue(index, picklistValues[i].validFor)) {
                var newValue = new Object();
                newValue.label = picklistValues[i].label;
                newValue.value = picklistValues[i].value;
                newValue.defaultValue = picklistValues[i].defaultValue;
                newValue.validFor = picklistValues[i].validFor;
                newValue.validForName = typeValue;
                returnObj.values.push(newValue);
            }
        }

    } catch (exception) {
        returnObj.success = false;
        returnObj.message = exception;
        if ( Ext.isChrome ) {
            console.log( 'getSubPickListValues Exception: ' + (exception.description? exception.description: exception) );
        }
    }
    return returnObj;
}

//gather Student Note Types and SubTypes from their PickList meta data, create are usable menu object as a JSON string
WGU.WGUStudentNoteMeta = $soap.describeSObject("WGUStudentNote__c");
WGU.WGUStudentNoteMenuArray = { title:'<div style="text-align: center;">Note Types</div>',items:[], width: 200 };
//Capture Note Type and Note Sub Type Meta data
for ( var f = 0; f < WGU.WGUStudentNoteMeta.fields.length; f++ ) {
    var field = WGU.WGUStudentNoteMeta.fields[f];
    if ( field.name == "Type__c" ) {
        WGU.WGUStudentNoteTypeMeta = field;
    } else if ( field.name == "SubType__c" ) {
        WGU.WGUStudentNoteSubTypeMeta = field;
    }
}

//create NoteType Menu Array
for (var x = 0; x < WGU.WGUStudentNoteTypeMeta.picklistValues.length; x++ ) {
    var pickValue = WGU.WGUStudentNoteTypeMeta.picklistValues[x];
    var noteTypeValue = pickValue.value;
    var iconPath = "{!$Resource.noteTypesPNG}"+'/';
    var dependent = WGU.getSubTypePickListValues( noteTypeValue, x );
    if ( dependent.success ) {
        if ( dependent.values.length == 0 ) {
            WGU.WGUStudentNoteMenuArray.items.push( {
                menuCategory: "noteType",
                noteType: noteTypeValue,
                noteSubType: false,
                text: noteTypeValue,
                handler: WGU.onHandleNoteMenuClick,
                icon: iconPath+noteTypeValue.replace(/\s+/g, '').replace('/', '').replace('(', '').replace(')', '')+'.png'
            });
        } else {
            WGU.WGUStudentNoteMenuArray.items.push( {
                menuCategory: "noteType",
                noteType: noteTypeValue,
                noteSubType: false,
                text:noteTypeValue,
                handler:WGU.onHandleNoteMenuClick,
                icon:iconPath+noteTypeValue.replace(/\s+/g, '').replace('/', '').replace('(', '').replace(')', '')+'.png',
                menu:{
                    title:'<div style="text-align: center;">'+noteTypeValue+'&nbsp;&nbsp;-&nbsp;&nbsp;Sub Types</div>',
                    items:[],
                    width: 240
                }
            });
        }
        for ( y=0; y< dependent.values.length; y++ ) {
            if ( dependent.values[y].validForName == noteTypeValue ) {
                var noteSubTypeValue = dependent.values[y].value;
                WGU.WGUStudentNoteMenuArray.items[x].menu.items.push( {
                    menuCategory: "noteSubType",
                    noteType: noteTypeValue,
                    noteSubType: noteSubTypeValue,
                    text: noteSubTypeValue,
                    handler: WGU.onHandleNoteMenuClick,
                    icon: iconPath+noteTypeValue.replace(/\s+/g, '').replace('/', '').replace('(', '').replace(')', '')+'.png'});
            }
        }
    }
}//end for loop, create NoteType Menu Array

WGU.WGUStudentNoteMenuArrayJSON = Ext.encode(WGU.WGUStudentNoteMenuArray);

//Define the main UI component
Ext.define('WGU.viewport.MentorPanel', {
    extend: 'Ext.container.Viewport',
    alias: 'widget.mentorsdesktop',
    minHeight: 800,
    minWidth: 1580,
    margin: '0 10 0 0',
    autoScroll: true,
    //position: 'relative',
    id: 'WGUpanel',
    suppressColumnResizeEvent: true,
    listeners: {
        afterrender: {
            fn: function() {
                var me = Ext.getCmp('WGUpanel');

                setTimeout( function() {
                    setTimeout( function() {
                        me.onRefreshCourseSearchStore();
                    }, 100);

                    //gather select Ext components into vars for later reference 
                    me.mentorListCombo.setReadOnly( thisMentorRecord.CanSelectOtherMentorsinMyStudents__c == false );
                    me.mentorListCombo.setVisible( !me.mentorListCombo.readOnly );
                    me.mentorFullNameField.setVisible( !me.mentorListCombo.isVisible() );
                    if (thisMentorRecord.Id) {
                        if ( mentorStore.findExact('Id', thisMentorRecord.Id) == -1 ) {
                            mentorStore.loadRawData([thisMentorRecord], true);
                        }
                    }
                    me.mentorListCombo.setValue( thisUser.Id );
                    me.mentorListCombo.setRawValue( thisUser.LastName+", "+thisUser.FirstName );
                    me.mentorFullNameField.setValue( thisUser.FirstName+" "+thisUser.LastName );

                    me.mentorPhoto.setSrc(thisUser.SmallPhotoUrl);
                    me.mentorPhoto.getEl().setStyle('border','1px solid lightgray');


                    Ext.create('Ext.tip.ToolTip', {
                        target: 'MentorCourseListFilterCombo',
                        id: 'MentorCourseListFilterComboToolTip',
                        width: 650,
                        minWidth: 650,
                        minHeight: 25,
                        showDelay: 100,
                        dismissDelay: 2000,
                        html: 'Please select My Case Load or a Course Roster '
                    });
                    me.mentorCourseListFilterComboToolTip = Ext.getCmp('MentorCourseListFilterComboToolTip');
                   
                    Ext.create('Ext.tip.ToolTip', {
                        target: 'MentorPhoto',
                        id: 'ProfilePhotoToolTip',
                        height: 25,
                        width: 182,
                        showDelay: 100,
                        dismissDelay: 0,
                        html: 'Click to Update Your Profile Photo'
                    });

                    Ext.create('Ext.tip.ToolTip', {
                        target: 'CourseListSearchCombo',
                        id: 'CourseListSearchComboToolTip',
                        height: 25,
                        width: 180,
                        showDelay: 100,
                        dismissDelay: 0,
                        html: 'Select one or more courses...'
                    });

                    Ext.create('Ext.tip.ToolTip', {
                        target: 'StudentStatusSearchCombo',
                        id: 'StudentStatusSearchComboToolTip',
                        height: 25,
                        width: 180,
                        showDelay: 100,
                        dismissDelay: 0,
                        html: 'Select one or more statuses...'
                    });

                    me.studentsGridPanel.getLayout().setActiveItem(2);
                    me.suppressColumnResizeEvent = false;
                    setTimeout( function(){
                        me.studentsGrid.isSavingView = false;
                        me.coursesGrid.isSavingView = false;
                        me.searchGrid.isSavingView = false;
                    }, 2000);

                    //get user preferences for column layouts
                    $soap.query("SELECT Id,Name,JsonConfigData__c,RecordTypeId,RecordType.Name FROM UserAttributes__c WHERE User__c = '"+thisUser.Id+"'", function(queryResult){
                        queryResult.size *= 1;
                        queryResult.done = (queryResult.done == "true");
                        if ( queryResult.size > 0 ){
                            WGU.initialGridViewConfigs = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
                            for ( var v = 0; v < WGU.initialGridViewConfigs.length; v++ ) {
                                var attribute = WGU.initialGridViewConfigs[v];
                                var grid = Ext.getCmp( attribute.RecordType.Name );
                                if (grid) {
                                    attribute.RecordType.Id = attribute.RecordTypeId;
                                    grid.UserAttributeRecordType =  attribute.RecordType;
                                    grid.savedColumnConfig = attribute;
                                    var columns = Ext.decode(grid.savedColumnConfig.JsonConfigData__c);
                                    for ( var c=0; c < columns.length; c++ ) {
                                        var column = columns[c];
                                        if (column.renderFunc) {
                                            column.renderer = Ext.decode(column.renderFunc);
                                        }
                                    }
                                    grid.reconfigure( grid.store, columns);
                                }
                            }
                            if ( Ext.isChrome ) {
                                console.log( 'Grid Column Configs Loaded: ' + queryResult.size );
                            }
                        }
                    });

                    //optimize query performance by executing a dummy query (establishing an open data path for salesforce to optimize and reuse for actual user queries)
                    var dummySearchQuery = "SELECT Id,Timezone__c,Email,Phone,HomePhone,AcademicStanding__c,StudentPlannedGraduationDate__c,WGUEmail__c,ComposeEmailLink__c,AccountId,MailingCity,MailingState,ProgramCode__c,ProgramName__c,FAADate__c,StudentID__c,TermNumber__c,CurrentTerm__c,CurrentTermCompletedCUs__c,CurrentTermEnrolledCUs__c,TotalAttemptedCUs__c,TotalCompletedCUs__c,ProgramCatalogTerm__c,Status__c,FirstName,LastName,Name,Mentor__c,Mentor__r.Name,Mentor__r.Email,Mentor__r.Phone,CumulativeSAP__c,TermStartDate__c,TermSap__c,TermEndDate__c,WGUDegreeProgram__c,WGUDegreeProgram__r.Title__c,IsNSE__c,PIDM__c, (Select s.Type__c, s.Term__c, s.StudentContact__c, s.Status__c, s.StartDate__c, s.RequirementsReferred__c, s.RequirementsEngaged__c, s.RequirementsEngagedPreassessment__c, s.RequirementsCompleted__c, s.Name, s.MentorVerifiedEngagementNotedDate__c, s.MentorVerifiedEngagementNotedBy__c, s.MentorVerifiedCurrentEngagement__c, s.Id, s.FullCourseTitle__c, s.EndDate__c, s.CourseCode__c, s.CompositeKey__c, s.CompetencyUnits__c, s.Attempts__c From StudentAcademicCourses__r s )  FROM Contact WHERE RecordType.DeveloperName = 'StudentRecord'  AND  (StudentID__c LIKE '%1232%')  AND  ((LastName LIKE '%Asdfda%') OR (LastName LIKE '%asdfda%'))  AND  ((FirstName LIKE 'Asdfa%') OR (FirstName LIKE '%asdfa%'))  AND Status__c  IN ('AS','TB') LIMIT 1";
                    $soap.query( dummySearchQuery, function(){
                        if ( Ext.isChrome ) {
                            console.log('Search Query Optimization complete.')
                        }
                        //1/1/14 StudentAcademicChange
                        var dummyRosterQuery = "Select  Type__c,  Term__c,  StudentContact__c, StudentContact__r.Status__c,StudentContact__r.StudentRiskScore__c, Status__c,  StartDate__c,  RequirementsReferred__c,  RequirementsEngaged__c,  RequirementsEngagedPreassessment__c,  RequirementsCompleted__c,  Name,  MentorVerifiedEngagementNotedDate__c,  MentorVerifiedEngagementNotedBy__c,  MentorVerifiedCurrentEngagement__c,  Id,  FullCourseTitle__c,  EndDate__c,  CourseCode__c,  CompositeKey__c,  CompetencyUnits__c,  Attempts__c "+
                                                " From StudentAcademicCourse__c "+
                                                " where  StudentContact__c != null "+
                                                " AND StudentContact__r.Status__c IN (\'AS\',\'TB\')"+
                                                " AND (Term__c  IN "+WGU.mySixTerms+"  AND ActiveCurrentTermCourse__c = true)" +
                                                 " AND CourseCode__c = \'AADDD\' LIMIT 1";
 //"SELECT Student__c, CompletedDate__c, CompletedTermCode__c, EnrollTermCode__c, WGUCourseVersion__r.WGUCourse__r.Name, Completed__c, Status__c, StudentCourseRegistration__r.startdate__c, StudentCourseRegistration__r.enddate__c from StudentCourseVersion__c WHERE Student__c != null AND Student__r.Status__c IN ('AS','TB') AND (StudentCompletionCourse__c != null OR StudentCourseRegistration__c != null)  AND (EnrollTermcode__c  IN "+WGU.mySixTerms+" OR CompletedTermCode__c IN "+WGU.mySixTerms+" OR ActiveCurrentTermCourse__c = true) AND WGUCourseVersion__c != null AND WGUCourseVersion__r.WGUCourse__r.Name = \'AADDD\' LIMIT 1";
                        $soap.query( dummyRosterQuery, function(){
                            if ( Ext.isChrome ) {
                                console.log('Roster Query Optimization complete.')
                            }
                            var dummyRosterCountQuery ="Select CourseCode__c BannerCourseCode, count(StudentContact__c) Enrollment "+
                                                "From StudentAcademicCourse__c "+
                                                " where  StudentContact__c != null "+
                                                " AND StudentContact__r.RecordType.DeveloperName = \'StudentRecord\' "+
                                                " AND StudentContact__r.Status__c IN (\'AS\',\'TB\')"+
                                                " AND (Term__c  IN "+WGU.mySixTerms+"  AND ActiveCurrentTermCourse__c = true)" +
                                                " AND CourseCode__c IN (\'DUMMYCOURSE\') GROUP BY CourseCode__c ";
                                                // "SELECT Name BannerCourseCode, count(Student__c) Enrollment from StudentCourseRegistration__c WHERE Student__c != null AND Student__r.RecordType.DeveloperName = 'StudentRecord' AND Student__r.Status__c IN ('AS','TB') AND Termcode__c  IN "+WGU.mySixTerms+" AND Name IN ('DUMMYCOURSE') GROUP BY Name ";
                            $soap.query( dummyRosterCountQuery, function(){
                                if ( Ext.isChrome ) {
                                    console.log('Roster Count Query Optimization complete.')
                                }
                            });
                        });

                    });


                }, 50);
            },
            scope: this
        }
    },
    requires: [
        'Ext.grid.plugin.BufferedRenderer'
    ],

    layout: {
        type: 'border'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    region: 'north',
                    id: 'wgu-header-container',
                    minHeight: 120,
                    minWidth: 1500,
                    height: 120,
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    items: [
                        {
                            xtype: 'container',
                            flex: 1,
                            id: 'wgu-header',
                            layout: {
                                align: 'stretch',
                                type: 'vbox'
                            },
                            items: [
                                {
                                    xtype: 'container',
                                    id: 'MentorTopContainer',
                                    height: 120,
                                    layout: {
                                        type: 'absolute'
                                    },
                                    items: [
                                        {
                                            xtype: 'imagecomponent',
                                            id: 'MentorPhoto',
                                            x: 10,
                                            y: 10,
                                            width: 64,
                                            height: 64,
                                            frame: false,
                                            style: 'border: 0;',
                                            src: Ext.BLANK_IMAGE_URL,
                                            listeners: {
                                                el: {
                                                    click: {
                                                        fn: function(){ window.open("/"+thisUser.Id, thisUser.Id); },
                                                        scope: me
                                                    }
                                                }
                                            }
                                        },
                                        { xtype: 'displayfield',
                                            id: 'MentorFullNameField',
                                            x: 80,
                                            y: 10,
                                            width: 220,
                                            visible: true,
                                            fieldStyle: 'font-weight: 600;font-size:15px',
                                            fieldLabel: ''
                                        },
                                        {
                                            xtype: 'combobox',
                                            id: 'MentorListCombo',
                                            x: 80,
                                            y: 10,
                                            width: 220,
                                            typeAhead: true,
                                            forceSelection: true,
                                            selectOnFocus: true,
                                            queryMode: 'local',
                                            store: mentorStore,
                                            displayField: 'NameLastFirst',
                                            valueField: 'UserId',
                                            fieldStyle: 'font-weight: 600;',
                                            fieldLabel: '',
                                            emptyText: 'Select a Mentor...',
                                            value: 'Loading...',
                                            labelAlign: 'top',
                                            multiSelect: false,
                                            readOnly: true,
                                            visible: false,
                                            listConfig: {
                                                maxHeight: 111,
                                                resizable: false,
                                                matchFieldWidth: true
                                            },
                                            listeners: {
                                                change: {
                                                    fn: me.onMentorsComboChange,
                                                    scope: me
                                                },
                                                blur: {
                                                    fn: me.onMentorsComboBlur,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'fieldset',
                                            x: 599,
                                            y: 6,
                                            hidden: true,
                                            height: 89,
                                            id: 'MentorSummaryPanel',
                                            width: 370,
                                            layout: {
                                                type: 'absolute'
                                            },
                                            title: 'My Student Mentor Summary Statistics',
                                            items: [
                                                {
                                                    xtype: 'displayfield',
                                                    x: 5,
                                                    y: 0,
                                                    id: 'MentorOnSAPTextField',
                                                    width: 200,
                                                    fieldLabel: 'On Cumulative SAP',
                                                    labelWidth: 140,
                                                    fieldStyle: 'font-weight:bold',
                                                    value: 0
                                                },
                                                {
                                                    xtype: 'displayfield',
                                                    x: 5,
                                                    y: 15,
                                                    id: 'MentorOffSAPTextField',
                                                    width: 200,
                                                    fieldLabel: 'Off Cumulative SAP',
                                                    labelWidth: 140,
                                                    fieldStyle: 'font-weight:bold',
                                                    value: 0
                                                },
                                                {
                                                    xtype: 'displayfield',
                                                    x: 5,
                                                    y: 30,
                                                    id: 'MentorTermEndingThisMonthTextField',
                                                    width: 200,
                                                    fieldLabel: 'Term Ending this Month',
                                                    labelWidth: 140,
                                                    fieldStyle: 'font-weight:bold',
                                                    value: 0
                                                },
                                                {
                                                    xtype: 'displayfield',
                                                    x: 5,
                                                    y: 45,
                                                    id: 'MentorInFirstMonthOfTermTextField',
                                                    width: 200,
                                                    fieldLabel: 'In First Month of Term',
                                                    labelWidth: 140,
                                                    fieldStyle: 'font-weight:bold',
                                                    value: 0
                                                },
                                                {
                                                    xtype: 'displayfield',
                                                    x: 215,
                                                    y: 0,
                                                    id: 'MentorFAWarningTextField',
                                                    width: 140,
                                                    fieldLabel: 'FA Warning',
                                                    labelWidth: 98,
                                                    fieldStyle: 'font-weight:bold',
                                                    value: 0
                                                },
                                                {
                                                    xtype: 'displayfield',
                                                    x: 215,
                                                    y: 15,
                                                    id: 'MentorFASuspendedTextField',
                                                    width: 140,
                                                    fieldLabel: 'FA Suspended',
                                                    labelWidth: 98,
                                                    fieldStyle: 'font-weight:bold',
                                                    value: 0
                                                },
                                                {
                                                    xtype: 'displayfield',
                                                    x: 215,
                                                    y: 30,
                                                    id: 'MentorOnTermBreakTextField',
                                                    width: 140,
                                                    fieldLabel: 'On Term Break',
                                                    labelWidth: 98,
                                                    fieldStyle: 'font-weight:bold',
                                                    value: 0
                                                },
                                                {
                                                    xtype: 'displayfield',
                                                    x: 215,
                                                    y: 45,
                                                    id: 'MentorNewStudentsTextField',
                                                    width: 140,
                                                    fieldLabel: 'New Students',
                                                    labelWidth: 98,
                                                    fieldStyle: 'color:#045685;font-weight:bold',
                                                    value: 0
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'displayfield',
                                            id: 'MentorNameField',
                                            x: 80,
                                            y: 10,
                                            fieldLabel: '',
                                            value: 'Loading...',
                                            width: 280,
                                            hidden: true,
                                            fieldStyle: 'font-size: 12px;'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            id: 'MentorRoleField',
                                            x: 80,
                                            y: 35,
                                            fieldLabel: 'Role',
                                            value: 'Loading...',
                                            labelWidth: 50,
                                            width: 280,
                                            fieldStyle: 'font-size: 12px;'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            id: 'MentorAssignedCollegeField',
                                            x: 80,
                                            y: 55,
                                            value: 'Loading...',
                                            fieldLabel: 'College',
                                            labelWidth: 50,
                                            width: 280,
                                            fieldStyle: 'font-size: 12px;'
                                        },
                                        {
                                            xtype: 'radiogroup',
                                            x: 10,
                                            y: 90,
                                            id: 'GridViewRadioGroup',
                                            width: 400,
                                            fieldLabel: 'Current View',
                                            labelStyle: 'padding:2px 0 0 0;font-weight:bold;font-size:8.5px;',
                                            hidden: false,
                                            labelWidth: 70,
                                            items: [
                                                {
                                                    xtype: 'radiofield',
                                                    id: 'MyStudentsViewRadio',
                                                    boxLabel: 'My Students',
                                                    disabled: true,
                                                    name: 'gridview',
                                                    listeners: {
                                                        change: {
                                                            fn: me.onViewRadioChange,
                                                            scope: me
                                                        }
                                                    }
                                                },
                                                {
                                                    xtype: 'radiofield',
                                                    hidden: false,
                                                    id: 'MyCoursesViewRadio',
                                                    name: 'gridview',
                                                    boxLabel: 'My Courses',
                                                    disabled: true,
                                                    listeners: {
                                                        change: {
                                                            fn: me.onViewRadioChange,
                                                            scope: me
                                                        }
                                                    }
                                                },
                                                {
                                                    xtype: 'radiofield',
                                                    hidden: false,
                                                    id: 'SearchViewRadio',
                                                    name: 'gridview',
                                                    boxLabel: 'Student Search',
                                                    value: true,
                                                    checked: true,
                                                    listeners: {
                                                        change: {
                                                            fn: me.onViewRadioChange,
                                                            scope: me
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'container',
                    region: 'center',
                    minWidth: 1500,
                    style: '{ background-color: #F2F2F2;}',
                    itemId: 'wgu-center',
                    id: 'wgu-center',
                    layout: {
                        align: 'stretch',
                        type: 'hbox'
                    },
                    items: [
                        { xtype: 'tbspacer', width: 10},
                        {
                            xtype: 'container',
                            minWidth: 1500,
                            flex: 1,
                            layout: {
                                align: 'stretch',
                                type: 'vbox'
                            },
                            items: [
                                {
                                    xtype: 'container',
                                    height: 195,
                                    minWidth: 1500,
                                    minHeight: 195,
                                    id: 'wgu-header-center',
                                    itemId: 'wgu-header-center',
                                    maintainFlex: true,
                                    layout: {
                                        align: 'stretch',
                                        type: 'hbox'
                                    },
                                    items: [
                                        {
                                            xtype: 'tabpanel',
                                            id: 'StudentPropertiesPanel',
                                            x: 10,
                                            y: 117,
                                            height: 195,
                                            minHeight: 195,
                                            title: 'Student Information',
                                            tools: [
                                                {
                                                    type: 'restore',
                                                    tooltip: 'Reset Panel to Default Size',
                                                    handler: function() {
                                                        Ext.getCmp('wgu-header-center').setHeight(me.studentPropertiesPanel.minHeight);
                                                        me.studentPropertiesPanel.setWidth(  me.studentPropertiesPanel.minWidth );
                                                    }
                                                }
                                            ],
                                            width: 960,
                                            minWidth: 960,
                                            activeTab: 0,
                                            minTabWidth: 100,
                                            tabPosition: 'bottom',
                                            listeners: {
                                                tabchange: {
                                                    fn: me.onStudentPropertiesPanelTabChange,
                                                    scope: me
                                                }
                                            },
                                            items: [
                                                {
                                                    xtype: 'panel',
                                                    id: 'StudentTab',
                                                    layout: {
                                                        type: 'fit'
                                                    },
                                                    title: 'Student',
                                                    tabConfig: {
                                                        xtype: 'tab',
                                                        id: 'StudentTabConfig',
                                                        tooltip: "View Student\'s Data"
                                                    },
                                                    items: [
                                                        {
                                                            xtype: 'container',
                                                            layout: {
                                                                type: 'absolute'
                                                            },
                                                            title: 'Student Details',
                                                            items: [
                                                                {
                                                                    xtype: 'image',
                                                                    id: 'StudentPhoto',
                                                                    x: 12,
                                                                    y: 12,
                                                                    width: 54,
                                                                    height: 54,
                                                                    frame: false,
                                                                    style: 'border: 0;',
                                                                    src: Ext.BLANK_IMAGE_URL
                                                                },
                                                                {
                                                                    xtype: 'displayfield',
                                                                    id: 'StudentIdField',
                                                                    x: 85,
                                                                    y: 5,
                                                                    width: 300,
                                                                    fieldLabel: 'Student Id',
                                                                    labelWidth: 100,
                                                                    hidden: true,
                                                                    fieldStyle: 'font-size: 12px;font-weight: bold;'
                                                                },
                                                                {
                                                                    xtype: 'displayfield',
                                                                    id: 'ProgramStartDateField',
                                                                    x: 400,
                                                                    y: 5,
                                                                    width: 280,
                                                                    fieldLabel: 'Program Start Date',
                                                                    labelWidth: 160,
                                                                    labelAlign: 'left',
                                                                    hidden: true,
                                                                    fieldStyle: 'font-size: 12px;font-weight: bold;'
                                                                },
                                                                {
                                                                    xtype: 'displayfield',
                                                                    id: 'CurrentTermField',
                                                                    x: 85,
                                                                    y: 25,
                                                                    width: 300,
                                                                    fieldLabel: 'Current Term',
                                                                    labelWidth: 100,
                                                                    hidden: true,
                                                                    fieldStyle: 'font-size: 12px;font-weight: bold;'
                                                                },
                                                                {
                                                                    xtype: 'displayfield',
                                                                    id: 'PlannedGraduationDateField',
                                                                    x: 400,
                                                                    y: 25,
                                                                    width: 280,
                                                                    fieldLabel: 'Planned Graduation Date',
                                                                    labelWidth: 160,
                                                                    labelAlign: 'left',
                                                                    hidden: true,
                                                                    fieldStyle: 'font-size: 12px;font-weight: bold;'
                                                                },
                                                                {
                                                                    xtype: 'displayfield',
                                                                    id: 'DegreeProgramNameField',
                                                                    x: 85,
                                                                    y: 45,
                                                                    width: 730,
                                                                    fieldLabel: 'Program',
                                                                    labelWidth: 100,
                                                                    hidden: true,
                                                                    fieldStyle: 'font-size: 12px;font-weight: bold;'
                                                                },
                                                                {
                                                                    xtype: 'displayfield',
                                                                    id: 'StudentCourseListField',
                                                                    x: 85,
                                                                    y: 65,
                                                                    width: 730,
                                                                    fieldLabel: 'Course List',
                                                                    labelWidth: 100,
                                                                    hidden: true,
                                                                    fieldStyle: 'font-size: 12px;font-weight: bold;'
                                                                },
                                                                {
                                                                    xtype: 'displayfield',
                                                                    id: 'StudentTimeZoneField',
                                                                    x: 85,
                                                                    y: 85,
                                                                    width: 300,
                                                                    fieldLabel: 'Time Zone',
                                                                    labelWidth: 100,
                                                                    hidden: true,
                                                                    fieldStyle: 'font-size: 12px;font-weight: bold;'
                                                                },
                                                                {
                                                                    xtype: 'displayfield',
                                                                    id: 'StudentMentorNameField',
                                                                    x: 85,
                                                                    y: 105,
                                                                    width: 730,
                                                                    fieldLabel: 'Mentor',
                                                                    labelWidth: 100,
                                                                    hidden: true,
                                                                    fieldStyle: 'font-size: 12px;font-weight: bold;'
                                                                },
                                                                {
                                                                    xtype: 'displayfield',
                                                                    id: 'StudentMentorEmailField',
                                                                    x: 85,
                                                                    y: 120,
                                                                    width: 300,
                                                                    fieldLabel: '',
                                                                    labelWidth: 100,
                                                                    hideEmptyLabel: false,
                                                                    hidden: true,
                                                                    fieldStyle: 'font-size: 11px;'
                                                                },
                                                                {
                                                                    xtype: 'displayfield',
                                                                    id: 'StudentMentorPhoneField',
                                                                    x: 400,
                                                                    y: 120,
                                                                    width: 200,
                                                                    hidden: true,
                                                                    fieldStyle: 'font-size: 11px;'
                                                                },
                                                                {
                                                                    xtype: 'container',
                                                                    id: 'StudentActionButtons',
                                                                    x: 825,
                                                                    y: 12,
                                                                    width: 120,
                                                                    height: 120,
                                                                    hidden: true,
                                                                    layout: {
                                                                        type: 'vbox'
                                                                    },
                                                                    items: [
                                                                        {
                                                                            xtype: 'button',
                                                                            id: 'OpenStudentButton',
                                                                            flex: 1,
                                                                            width: '120',
                                                                            tooltip: 'Open Student\'s Record',
                                                                            text: 'Open Student',
                                                                            handler: function() {
                                                                                var grid = me.studentsGridPanel.getLayout().getActiveItem();
                                                                                var record = grid.getView().getSelectionModel().getSelection()[0];
                                                                                if (record && record.data){
                                                                                    if ( $sconsole ) {
                                                                                        $sconsole.openPrimaryTab( null, "/"+record.get('Id'), true, record.get('NameLastFirst'), function(){}, record.get('NameLastFirst') );
                                                                                    } else {
                                                                                        window.open( "/"+record.get('Id'), "Student_"+record.get('Id') );
                                                                                        window.focus();
                                                                                    }
                                                                                }
                                                                                return false;
                                                                            }
                                                                        },
                                                                        { xtype: 'tbspacer', height: 7 },
                                                                        {
                                                                            xtype: 'button',
                                                                            id: 'EmailStudentButton',
                                                                            flex: 1,
                                                                            width: '120',
                                                                            tooltip: 'Send a Quick Email',
                                                                            text: 'Email Student',
                                                                            handler: function() {
                                                                                var grid = me.studentsGridPanel.getLayout().getActiveItem();
                                                                                var selected = grid.getView().getSelectionModel().getSelection()[0];
                                                                                if ( selected.data.ComposeEmailLink__c ) {
                                                                                    var link = selected.get("ComposeEmailLink__c").split('href')[1].split('\"')[1];
                                                                                    window.open( link, 'QEmail'+selected.data.Id);
                                                                                    window.focus();
                                                                                }
                                                                                return false;
                                                                            }
                                                                        },
                                                                        { xtype: 'tbspacer', height: 7 },
                                                                        {
                                                                            xtype: 'button',
                                                                            id: 'GoToDegreePlanButton',
                                                                            flex: 1,
                                                                            width: '120',
                                                                            tooltip: 'Open Student\'s Degree Plan',
                                                                            text: 'Go to Degree Plan',
                                                                            handler: function() {
                                                                                var grid = me.studentsGridPanel.getLayout().getActiveItem();
                                                                                var selected = grid.getView().getSelectionModel().getSelection()[0];
                                                                                if ( selected.data.Id ) {
                                                                                    if ( boxName == 'prod' || boxName == 'train' || orgName == 'train') {
																                                    window.open("https://webapp18.wgu.edu/fdp/for/"+selected.data.PIDM__c, 'FDP'+selected.data.Id);
																                     } else if(boxName=='qafull') {
																                                     window.open("https://l1webapp18.wgu.edu/fdp/for/"+selected.data.PIDM__c, 'FDP'+selected.data.Id);
																                     } else if(boxName=='devfull') {
																                                     window.open("https://l2webapp18.wgu.edu/fdp/for/"+selected.data.PIDM__c, 'FDP'+selected.data.Id);
																                     } 

                                                                                }
                                                                                return false;
                                                                            }
                                                                        },
                                                                        { xtype: 'tbspacer', height: 7 },
                                                                        {
                                                                            xtype: 'button',
                                                                            id: 'GoToNotesButton',
                                                                            text: 'Notes',
                                                                            menu: [
                                                                                {
                                                                                    text: 'Add New Note',
                                                                                    hidden: false,
                                                                                    itemId: 'PanelNotesButtonNewNoteMenuItem',
                                                                                    handler: WGU.onHandleNoteMenuClick,
                                                                                    menu: WGU.WGUStudentNoteMenuArray
                                                                                },
                                                                                {
                                                                                    text: 'Open Student Notes',
                                                                                    tooltip: 'Open Student Notes in new window',
                                                                                    itemId: 'PanelNotesButtonOpenNotesMenuItem',
                                                                                    handler: function() {
                                                                                        var grid = me.studentsGridPanel.getLayout().getActiveItem();
                                                                                        var selected = grid.getView().getSelectionModel().getSelection()[0];
                                                                                        if ( selected.data.Id ) {
                                                                                            window.open('/apex/Notes?contactId='+selected.data.Id, 'Notes'+selected.data.Id);
                                                                                        }
                                                                                        return false;
                                                                                    }
                                                                                },
                                                                                {
                                                                                    text: 'Open Talisma Notes',
                                                                                    tooltip: 'Open Legacy Notes (Talisma) in a new window',
                                                                                    itemId: 'PanelNotesButtonOpenTalismaNotesMenuItem',
                                                                                    handler: function(){
                                                                                        var grid = me.studentsGridPanel.getLayout().getActiveItem();
                                                                                        var record = grid.getView().getSelectionModel().getSelection()[0];
                                                                                        if ( record.data.PIDM__c ) {
                                                                                            talismaWindow = window.open(WGU.talismaLinkBaseUrl+record.data.PIDM__c, "Talisma_"+record.data.PIDM__c, "location=1,status=1,scrollbars=1,width=800,height=600");
                                                                                            talismaWindow.moveTo(0, 0);
                                                                                        }
                                                                                        return false;
                                                                                    }
                                                                                }

                                                                            ],
                                                                            flex: 1,
                                                                            width: '120'
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    xtype: 'container',
                                                                    id: 'PieChartsContainer',
                                                                    hidden: true,
                                                                    x: 720,
                                                                    y:6,
                                                                    height: 135,
                                                                    width: 65,
                                                                    layout: {
                                                                        align: 'stretch',
                                                                        type: 'vbox'
                                                                    },
                                                                    items: [
                                                                        {
                                                                            xtype: 'tbspacer',
                                                                            height: 5,
                                                                            hidden: false
                                                                        },
                                                                        {
                                                                            xtype: 'label',
                                                                            style: 'font-size: 9px;text-align: center',
                                                                            height: 1,
                                                                            text: 'Weeks in Term'
                                                                        },
                                                                        {
                                                                            xtype: 'component',
                                                                            id: 'WeeksInTermLabel',
                                                                            style: 'margin:10 0 0 0;font-weight:bold;font-size: 11px;text-align: center',
                                                                            height: 65,
                                                                            hidden: true,
                                                                            text: '10 of 26'
                                                                        },
                                                                        {
                                                                            xtype: 'chart',
                                                                            id: 'WeeksInTermChart',
                                                                            padding: '4 0 0 0',
                                                                            height: 65,
                                                                            animate: false,
                                                                            store: Ext.create('Ext.data.Store', {
                                                                                fields: [{
                                                                                    name: 'Name',
                                                                                    type: 'string'
                                                                                },
                                                                                    {
                                                                                        name: 'Value',
                                                                                        type: 'int'
                                                                                    }],
                                                                                data : [
                                                                                    {"Name":"Weeks Left","Value":181},
                                                                                    {"Name":"Weeks Into Term","Value":10}
                                                                                ]
                                                                            }),
                                                                            series: [
                                                                                {
                                                                                    type: 'pie',
                                                                                    label: {
                                                                                        field: 'Value',
                                                                                        contrast: true,
                                                                                        font: '10.5px tahoma,arial,verdana,sans-serif bold',
                                                                                        display: 'rotate',
                                                                                        minMargin: 100
                                                                                    },
                                                                                    tips: {
                                                                                        trackMouse: true,
                                                                                        width: 150,
                                                                                        height: 28,
                                                                                        renderer: function(storeItem, item) {
                                                                                            this.setTitle(storeItem.get('Name') + ":&nbsp;&nbsp;" + storeItem.get('Value'));
                                                                                        }
                                                                                    },
                                                                                    angleField: 'Value'
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            xtype: 'tbspacer',
                                                                            height: 3,
                                                                            hidden: true
                                                                        },
                                                                        {
                                                                            xtype: 'label',
                                                                            style: 'font-size: 9px;text-align: center',
                                                                            height: 1,
                                                                            hidden: true,
                                                                            text: 'Days in Term'
                                                                        },
                                                                        {
                                                                            xtype: 'component',
                                                                            id: 'DaysInTermLabel',
                                                                            style: 'margin:10 0 0 0;font-weight:bold;font-size: 11px;text-align: center',
                                                                            height: 65,
                                                                            hidden: true,
                                                                            text: '32 of 186'
                                                                        },
                                                                        {
                                                                            xtype: 'chart',
                                                                            id: 'DaysInTermChart',
                                                                            height: 65,
                                                                            hidden: true,
                                                                            animate: false,
                                                                            store: Ext.create('Ext.data.Store', {
                                                                                fields: [{
                                                                                    name: 'Name',
                                                                                    type: 'string'
                                                                                },
                                                                                    {
                                                                                        name: 'Value',
                                                                                        type: 'int'
                                                                                    }],
                                                                                data : [
                                                                                    {"Name":"Days Left","Value":181},
                                                                                    {"Name":"Days Into Term","Value":10}
                                                                                ]
                                                                            }),
                                                                            series: [
                                                                                {
                                                                                    type: 'pie',
                                                                                    label: {
                                                                                        field: 'Value',
                                                                                        contrast: true,
                                                                                        font: '10.5px tahoma,arial,verdana,sans-serif bold',
                                                                                        display: 'rotate',
                                                                                        minMargin: 100
                                                                                    },
                                                                                    tips: {
                                                                                        trackMouse: true,
                                                                                        width: 150,
                                                                                        height: 28,
                                                                                        renderer: function(storeItem, item) {
                                                                                            this.setTitle(storeItem.get('Name') + ":&nbsp;&nbsp;" + storeItem.get('Value'));
                                                                                        }
                                                                                    },
                                                                                    angleField: 'Value'
                                                                                }
                                                                            ]
                                                                        }

                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    xtype: 'panel',
                                                    id: 'NotesTab',
                                                    layout: {
                                                        type: 'fit'
                                                    },
                                                    title: 'Notes',
                                                    hidden: false,
                                                    disabled: true,
                                                    tabConfig: {
                                                        xtype: 'tab',
                                                        id: 'NotesTabConfig',
                                                        tooltip: 'View Notes for Student'
                                                    },
                                                    items: [
                                                        {
                                                            xtype: 'embeddednotesgridpanel'
                                                        }
                                                    ]
                                                },
                                                {
                                                    xtype: 'panel',
                                                    id: 'StudentCoursesTab',
                                                    layout: {
                                                        type: 'fit'
                                                    },
                                                    title: 'Courses',
                                                    hidden: true,
                                                    disabled: true,
                                                    tabConfig: {
                                                        xtype: 'tab',
                                                        id: 'StudentCoursesTabConfig',
                                                        tooltip: 'View Student\'s Courses'
                                                    },
                                                    items: [
                                                        {
                                                            xtype: 'component',
                                                            html: 'Under Construction...'
                                                        }
                                                    ]
                                                }
                                                ,{
                                                    xtype: 'panel',
                                                    id: 'AnalyticTab',
                                                    layout: { 
                                        				align: 'stretch' 
                                                    },
                                                    title: 'Analytic',
                                                    hidden: false,
                                                    disabled: true, 
                                                    tabConfig: {
                                                        xtype: 'tab',
                                                        id: 'AnalyticTabConfig',
                                                        tooltip: 'View Analytic of Student'
                                                    },
                                                    items: [
                                                         
                                                        {
                                                            xtype: 'gridpanel',
                                                            id: 'analyticGrid',
                                                            hidden: false, 
                                                            x :2,
                                                            y:2,
				                                            height: 155,
				                                            minHeight: 155,
                                                            width: 955, 
                                                            minWidth: 955, 
                                                            store: studentAnalyticStore,
        									/*forceFit: false,
                                            enableColumnHide: true,
                                            columnLines: false,
                                            multiSelect: false,
                                            viewConfig: { 
                                                autoScroll: true,
                                                maintainFlex: true,
                                                stripeRows: false,
                                                floating: false,
                                                trackOver: true
                                            },*/
                                                            columns: [{
																    xtype: 'rownumberer',
																    width: 25,
																    sortable: false,
																    filterable: false,
																    text: '#',
																    cls: 'wgu-grid-text',
																    resizable: true
																},
	                                                            {
											                        
															        xtype: 'numbercolumn',
															        text: 'Student Action',
															        tooltip: 'Student Action',
															        dataIndex: 'StudentAction', 
															        cls: 'wgu-grid-text',
															        width: 100,
															        align: 'center',
															        hidden: false,
															        hideable: true,
															        disabled: false, 
															        filterable: true,
															        sortable: false, 
															        renderer: WGU.onRiskIconRender,
															        renderFunc: 'WGU.onRiskIconRender'
											                    },
											                    {
											                        xtype: 'gridcolumn',
											                        text: 'High Drop Risk',
											                        dataIndex: 'HighRiskDropAlert__c',
															        cls: 'wgu-grid-text',
											                        width: 150,
															        align: 'center',
															        hidden: false,
															        filterable: true,
															        sortable: false,
															        renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
																        metaData.tdAttr = 'data-qwidth="'+record.get('HighRiskDropAlert__c').length*2+'" data-qtip="' + record.get('HighRiskDropAlert__c')+ '"';
																        var iconDirString =  '{!$Resource.riskTypesPNG}/riskTypesPNG/';
																        //RISK FACTOR icon
																        if( parseFloat(record.get('HighRiskDropAlert__c'))==1)
																        {
																            return '<img src=\"'+iconDirString+'RedStar.png" />';
																        }else if( parseFloat(record.get('HighRiskDropAlert__c'))==2)
																        {
																            return '<img src=\"'+iconDirString+'YellowMark.png" />';
																        }else if( parseFloat(record.get('HighRiskDropAlert__c'))==3)
																        {
																
																            return '<img src=\"'+iconDirString+'GreenCheck.png" />';
																        } 
																    }
											                    }, 
											                    {
											                        xtype: 'numbercolumn',
    																format: '0',
											                        text: 'Courses Left to Make OTP',
											                        dataIndex: 'CoursesOTP__c',
															        cls: 'wgu-grid-text',
											                        width: 150,
															        align: 'center',
															        hidden: false,
															        filterable: true,
															        sortable: false 
											                    },
											                    {
											                        xtype: 'gridcolumn',
											                        text: 'Courses To Graduation',
											                        dataIndex: 'CoursesForGraduation__c',
															        cls: 'wgu-grid-text',
											                        width: 150,
															        align: 'center',
															        hidden: false,
															        filterable: true,
															        sortable: false
											                    },
											                    {
											                        xtype: 'datecolumn',
											                        text: 'Date',
											                        dataIndex: 'CreatedDate',
															        cls: 'wgu-grid-text',
											                        width: 150,
															        align: 'center',
															        hidden: false,
															        filterable: true,
															        sortable: false,
		 															format: 'm/d/Y'
											                    },
											                    {
											                        xtype: 'gridcolumn',
											                        text: 'Change Reasons',
											                        dataIndex: 'StudentAnalyticMessage', 
											                        width: 255,  
															        cls: 'wgu-grid-text',
															        align: 'left',
															        hidden: false,
															        filterable: true,
															        sortable: false, 
               														//css: 'white-space:nowrap;overflow:hidden;',
															        renderer: WGU.onMentorSuggestionRender,
															        renderFunc: WGU.onMentorSuggestionRender
											                    }
                                                             
                                                            ]
                                                        }
                                                    ]
                                                     
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'splitter',
                                            id: 'StudentPropertyPanelVerticalSplitter',
                                            width: 10
                                        },
                                        {
                                            xtype: 'tbspacer',
                                            flex: 1

                                        }
                                    ]
                                },
                                {
                                    xtype: 'splitter',
                                    id: 'StudentGridsHorizontalSplitter',
                                    minWidth: 1500,
                                    height: 10,
                                    listeners: {
                                        move: {
                                            fn: function(splitter, x, y, eOpts) {
                                                Ext.callback( function(){
                                                            Ext.getCmp('StudentsGridPanel').getLayout().getActiveItem().getView().refresh();
                                                            Ext.getCmp('StudentsGridPanel').getLayout().getActiveItem().doLayout();
                                                        },
                                                        window, null, 10 );
                                            }
                                        }
                                    }
                                },
                                {
                                    xtype: 'container',
                                    flex: 1,
                                    maintainFlex: true,
                                    activeItem: 2,  //which card to display initially
                                    minHeight: 220,
                                    margin: '0 10 0 0',
                                    minWidth: 1500,
                                    id: 'StudentsGridPanel',
                                    layout: {
                                        type: 'card'
                                    },
                                    items: [
                                        {
                                            xtype: 'gridpanel',
                                            store: studentsStore,
                                            id: 'MyStudentsGridPanel',
                                            minWidth: 1500,
                                            title: '',
                                            isSavingView: true,
                                            forceFit: false,
                                            enableColumnHide: true,
                                            columnLines: false,
                                            multiSelect: false,
                                            viewConfig: {
                                                id: 'MyStudentsGridPanelView',
                                                itemId: 'student-grid-view',
                                                autoScroll: true,
                                                maintainFlex: true,
                                                stripeRows: true,
                                                floating: false,
                                                trackOver: true,
                                                listeners: {
                                                    itemdblclick: {
                                                        fn: me.onStudentGridviewItemDblClick,
                                                        scope: me
                                                    },
                                                    itemclick: {
                                                        fn: me.onStudentGridviewItemClick,
                                                        scope: me
                                                    },
                                                    itemcontextmenu: {
                                                        fn: me.onStudentGridViewItemContextMenu,
                                                        scope: me
                                                    }

                                                }
                                            },
                                            listeners : {
                                                itemcontextmenu :  function( grid, record, item, index, event){
                                                    event.stopEvent();
                                                },
                                                columnresize: function( ct, column, width, eOpts ){
                                                    if ( !me.suppressColumnResizeEvent ) {
                                                        me.onSaveColumnsConfig( me.studentsGrid, true );
                                                    }
                                                },
                                                columnmove: function( ct, column, fromIdx, toIdx, eOpts ){
                                                    if ( !me.suppressColumnResizeEvent ) {
                                                        me.onSaveColumnsConfig( me.studentsGrid, false );
                                                    }
                                                },
                                                columnhide: function( ct, column, eOpts ){
                                                    if ( !me.suppressColumnResizeEvent ) {
                                                        me.onSaveColumnsConfig( me.studentsGrid, false );
                                                    }
                                                },
                                                columnshow: function( ct, column, eOpts ){
                                                    if ( !me.suppressColumnResizeEvent ) {
                                                        me.onSaveColumnsConfig( me.studentsGrid, false );
                                                    }
                                                },
                                                resize: function( grid, width, height, oldWidth, oldHeight, eOpts ) {
                                                    view = me;
                                                    if (view){
                                                        view.suppressColumnResizeEvent = true;
                                                        setTimeout( function() { view.suppressColumnResizeEvent = false; }, 1000);
                                                    }
                                                },
                                                beforeshow: function( grid, eOpts ) {
                                                    view = me;
                                                    if (view){
                                                        view.suppressColumnResizeEvent = true;
                                                        setTimeout( function() { view.suppressColumnResizeEvent = false; }, 2000);
                                                    }
                                                }
                                            },
                                            columns: WGU.defaultColumnConfig,
                                            features: [
                                                {
                                                    ftype: 'filters',
                                                    encode: true,
                                                    local: true
                                                }
                                            ],
                                            dockedItems: [
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'bottom',
                                                    minHeight: 22,
                                                    items: [
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            xtype: 'label',
                                                            id: 'StudentGridStatusBarText',
                                                            anchor: '100%',
                                                            text: ''
                                                        }
                                                    ]
                                                },
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'top',
                                                    minHeight: 55,
                                                    items: [
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            xtype: 'combobox',
                                                            id: 'StudentCourseListFilterCombo',
                                                            width: 250,
                                                            queryMode: 'local',
                                                            typeAhead: true,
                                                            forceSelection: true,
                                                            store: studentFilterCoursesStore,
                                                            displayField: 'CodeTitle',
                                                            valueField: 'BannerCourseCode__c',
                                                            fieldLabel: 'Filter Students by Course',
                                                            labelAlign: 'top',
                                                            multiSelect: false,
                                                            listConfig: {
                                                                maxHeight: 111,
                                                                resizable: false,
                                                                width: 650,
                                                                matchFieldWidth: false,
                                                                minWidth: 650
                                                            },
                                                            listeners: {
                                                                change: {
                                                                    fn: function(field, newValue, oldValue, options){
                                                                        me.onStudentsGridFilter(field, newValue, options);
                                                                    },
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'textfield',
                                                            id: 'StudentNameFilterTextField',
                                                            selectOnFocus: true,
                                                            fieldLabel: 'Filter by Name',
                                                            enableKeyEvents: true,
                                                            labelWidth: 82,
                                                            labelAlign: 'top',
                                                            width: 155,
                                                            listeners: {
                                                                keyup: {
                                                                    fn: function(field, e){
                                                                        me.onStudentsGridFilter(field, field.getValue(), e);
                                                                    },
                                                                    buffer: 500
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'textfield',
                                                            id: 'StudentIdFilterTextField',
                                                            selectOnFocus: true,
                                                            fieldLabel: 'Filter by Student Id',
                                                            enableKeyEvents: true,
                                                            labelWidth: 82,
                                                            labelAlign: 'top',
                                                            width: 115,
                                                            listeners: {
                                                                keyup: {
                                                                    fn: function(field, e){
                                                                        me.onStudentsGridFilter(field, field.getValue(), e);
                                                                    },
                                                                    buffer: 500
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'combobox',
                                                            id: 'StudentDegreeProgramFilterCombo',
                                                            fieldLabel: 'Filter by Degree Program',
                                                            selectOnFocus: true,
                                                            enableKeyEvents: true,
                                                            labelWidth: 100,
                                                            labelAlign: 'top',
                                                            width: 175,
                                                            queryMode: 'local',
                                                            typeAhead: true,
                                                            forceSelection: true,
                                                            store: degreeProgramStore,
                                                            displayField: 'CodeTitle',
                                                            valueField: 'ProgramCode__c',
                                                            multiSelect: false,
                                                            listConfig: {
                                                                maxHeight: 111,
                                                                resizable: false,
                                                                width: 550,
                                                                matchFieldWidth: false,
                                                                minWidth: 550
                                                            },
                                                            listeners: {
                                                                change: {
                                                                    fn: function(field, e){
                                                                        me.onStudentsGridFilter(field, field.getValue(), e);
                                                                    },
                                                                    buffer: 500
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'combobox',
                                                            id: 'StudentStatusFilterCombo',
                                                            selectOnFocus: true,
                                                            width: 85,
                                                            queryMode: 'local',
                                                            typeAhead: true,
                                                            forceSelection: true,
                                                            store: Ext.create('Ext.data.Store', {
                                                                fields: ['Value', 'Name'],
                                                                data : [
                                                                    {"Value":"All", "Name":"All"},
                                                                    {"Value":"AS", "Name":"AS - Active"},
                                                                    {"Value":"IN", "Name":"IN - New"},
                                                                    {"Value":"TB", "Name":"TB - Term Break"}
                                                                ]
                                                            }),
                                                            displayField: 'Name',
                                                            value: 'All',
                                                            valueField: 'Value',
                                                            fieldLabel: 'Filter by Status',
                                                            labelAlign: 'top',
                                                            multiSelect: false,
                                                            listConfig: {
                                                                maxHeight: 111,
                                                                resizable: false,
                                                                width: 120,
                                                                matchFieldWidth: false,
                                                                minWidth: 120
                                                            },
                                                            listeners: {
                                                                change: {
                                                                    fn: function(field, newValue, oldValue, options){
                                                                        me.onStudentsGridFilter(field, newValue, options);
                                                                    },
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 10 },
                                                        {
                                                            text: 'Clear Filters',
                                                            style: 'border-color: #81A4D0;',
                                                            width: 83,
                                                            height: 38,
                                                            tooltip: 'View all students (remove all filters)',
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onClearStudentFiltersButtonClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        '->',
                                                        {
                                                        	xtype: 'button', 
                                                            text: 'Export to CSV',
                                                            id: 'ExportAllMentorStudentsToCSVButton', 
                                                            style: 'border-color: #81A4D0;',
                                                            width: 100,
                                                            height: 38,
                                                            menu: [
	                                                        { 
	                                                            id: 'ExportStudentGridToCSVButton',
	                                                            text: 'Current Columns', 
	                                                            tooltip: 'Export data of current columns to CSV format',
	                                                            handler: me.onExportGridData
	                                                        },{ 
	                                                            id: 'ExportStudentStoreToCSVButton',
	                                                            text: 'All', 
	                                                            tooltip: 'Export all of the grid\'s data content to CSV format',
	                                                            handler: me.onExportStoreData
	                                                        }]
						                                },
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            xtype: 'button',
                                                            id: 'ForceFitStudentsGridButton',
                                                            text: 'Force Fit',
                                                            style: 'border-color: #81A4D0;',
                                                            width: 100,
                                                            height: 38,
                                                            tooltip: 'Attempt to stretch/fit all visible columns within the grid\'s view area',
                                                            handler: me.onForceFitGrid
                                                        },
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            text: 'Reset Columns',
                                                            id: 'ResetStudentGridColumnsButton',
                                                            style: 'border-color: #81A4D0;',
                                                            width: 100,
                                                            height: 38,
                                                            tooltip: "Reset the grid columns to default view configuration",
                                                            listeners: {
                                                                click: {
                                                                    fn: function() {
                                                                       // me.onCourseRosterComboChangeRiskColumn(me.mentorCourseListFilterCombo.getValue());
                                                                        me.studentsGrid.reconfigure( me.studentsGrid.store, WGU.defaultColumnConfig ); 
                                                                    },
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            text: 'Refresh List',
                                                            id: 'RefreshStudentsButton',
                                                            style: 'border-color: #81A4D0;',
                                                            width: 100,
                                                            height: 38,
                                                            tooltip: "Reload the Students List",
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onRefreshStudentsButtonClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 2 }
                                                    ]
                                                }],
                                            selModel: Ext.create('Ext.selection.RowModel', {
                                                enableKeyNav: true,
                                                mode: 'SINGLE',
                                                allowDeselect: false,
                                                ignoreRightMouseSelection: true,
                                                listeners: {
                                                    selectionchange: function( thisModel, selected, eOpts ) {
                                                        if ( selected.length > 0 ) {
                                                            me.onStudentGridviewItemClick( null, selected[0], null, null, null, eOpts );
                                                        }
                                                    }
                                                }
                                            })
                                        },
                                        {
                                            xtype: 'gridpanel',
                                            id: 'MyCoursesGridPanel',
                                            minWidth: 1500,
                                            title: '',
                                            store: coursesGridStore,
                                            isSavingView: true,
                                            plugins: {
                                                ptype: 'bufferedrenderer',
                                                trailingBufferZone: 100,
                                                leadingBufferZone:  100
                                            },
                                            columns: WGU.defaultCourseColumnConfig,
                                            viewConfig: {
                                                id: 'MyCoursesGridPanelView',
                                                itemId: 'course-grid-view',
                                                loadMask: false,
                                                autoScroll: true,
                                                maintainFlex: true,
                                                singleSelect: true,
                                                trackOver: true,
                                                listeners: {
                                                    itemdblclick: {
                                                        fn: me.onCourseTreeGridItemDblClick,
                                                        scope: me
                                                    },
                                                    itemclick: {
                                                        fn: me.onStudentGridviewItemClick,
                                                        scope: me
                                                    },
                                                    itemcontextmenu: {
                                                        fn: me.onCourseTreeGridViewItemContextMenu,
                                                        scope: me
                                                    }
                                                }
                                            },
                                            listeners : {
                                                itemcontextmenu :  function( grid, record, item, index, event){
                                                    event.stopEvent();
                                                },
                                                columnresize: function( ct, column, width, eOpts ){
                                                    if ( !me.suppressColumnResizeEvent ) {
                                                        me.onSaveColumnsConfig( me.coursesGrid, true );
                                                    }
                                                },
                                                columnmove: function( ct, column, fromIdx, toIdx, eOpts ){
                                                    if ( !me.suppressColumnResizeEvent ) {
                                                        me.onSaveColumnsConfig( me.coursesGrid, false );
                                                    }
                                                },
                                                columnhide: function( ct, column, eOpts ){
                                                    if ( !me.suppressColumnResizeEvent ) {
                                                        me.onSaveColumnsConfig( me.coursesGrid , false );
                                                    }
                                                },
                                                columnshow: function( ct, column, eOpts ){
                                                    if ( !me.suppressColumnResizeEvent ) {
                                                        me.onSaveColumnsConfig( me.coursesGrid, false );
                                                    }
                                                },
                                                resize: function( grid, width, height, oldWidth, oldHeight, eOpts ) {
                                                    view = me;
                                                    if ( view && !view.suppressColumnResizeEvent ){
                                                        view.suppressColumnResizeEvent = true;
                                                        setTimeout( function() { view.suppressColumnResizeEvent = false; }, 1000);
                                                    }
                                                },
                                                beforeshow: function( grid, eOpts ) {
                                                    view = me;
                                                    if ( view && !view.suppressColumnResizeEvent ){
                                                        view.suppressColumnResizeEvent = true;
                                                        setTimeout( function() { view.suppressColumnResizeEvent = false; }, 2000);
                                                    }
                                                }
                                            },
                                            features: [
                                                {
                                                    ftype: 'filters',
                                                    encode: true,
                                                    local: true
                                                }
                                            ],
                                            dockedItems: [
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'bottom',
                                                    minHeight: 22,
                                                    items: [
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            xtype: 'label',
                                                            id: 'CourseGridStatusBarText',
                                                            anchor: '100%',
                                                            text: ''
                                                        }
                                                    ]
                                                },
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'top',
                                                    minHeight: 55,
                                                    items: [
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            xtype: 'combobox',
                                                            id: 'MentorCourseListFilterCombo',
                                                            width: 250,
                                                            queryMode: 'local',
                                                            typeAhead: true,
                                                            forceSelection: true,
                                                            store: mentorsCoursesStore,
                                                            displayField: 'CodeTitle',
                                                            valueField: 'BannerCourseCode__c',
                                                            fieldLabel: 'Select My Case Load or a Course Roster',
                                                            emptyText: 'Please select My Case Load or a Course Roster...',
                                                            labelAlign: 'top',
                                                            multiSelect: false,
                                                            listConfig: {
                                                                maxHeight: 111,
                                                                resizable: false,
                                                                width: 650,
                                                                matchFieldWidth: false,
                                                                minWidth: 650
                                                            },
                                                            listeners: {
                                                                change: {
                                                                    fn: me.onCourseRosterComboChange,
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'textfield',
                                                            id: 'CourseStudentNameFilterTextField',
                                                            selectOnFocus: true,
                                                            disabled: true,
                                                            fieldLabel: 'Filter by Name',
                                                            enableKeyEvents: true,
                                                            labelWidth: 82,
                                                            labelAlign: 'top',
                                                            width: 155,
                                                            listeners: {
                                                                keyup: {
                                                                    fn: function(field, e){
                                                                        me.onCourseGridFilter(field, field.getValue(), e);
                                                                    },
                                                                    buffer: 500
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'textfield',
                                                            id: 'CourseStudentIdFilterTextField',
                                                            selectOnFocus: true,
                                                            disabled: true,
                                                            fieldLabel: 'Filter by Student Id',
                                                            enableKeyEvents: true,
                                                            labelWidth: 82,
                                                            labelAlign: 'top',
                                                            width: 115,
                                                            listeners: {
                                                                keyup: {
                                                                    fn: function(field, e){
                                                                        me.onCourseGridFilter(field, field.getValue(), e);
                                                                    },
                                                                    buffer: 500
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'combobox',
                                                            id: 'CourseStudentDegreeProgramFilterCombo',
                                                            selectOnFocus: true,
                                                            disabled: true,
                                                            fieldLabel: 'Filter by Degree Program',
                                                            enableKeyEvents: true,
                                                            labelWidth: 100,
                                                            labelAlign: 'top',
                                                            width: 175,
                                                            queryMode: 'local',
                                                            typeAhead: true,
                                                            forceSelection: true,
                                                            store: courseDegreeProgramStore,
                                                            displayField: 'CodeTitle',
                                                            valueField: 'ProgramCode__c',
                                                            multiSelect: false,
                                                            listConfig: {
                                                                maxHeight: 111,
                                                                resizable: false,
                                                                width: 550,
                                                                matchFieldWidth: false,
                                                                minWidth: 550
                                                            },
                                                            listeners: {
                                                                change: {
                                                                    fn: function(field, e){
                                                                        me.onCourseGridFilter(field, field.getValue(), e);
                                                                    },
                                                                    buffer: 500
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'combobox',
                                                            selectOnFocus: true,
                                                            id: 'CourseStudentStatusFilterCombo',
                                                            disabled: true,
                                                            width: 95,
                                                            queryMode: 'local',
                                                            typeAhead: true,
                                                            forceSelection: true,
                                                            store: Ext.create('Ext.data.Store', {
                                                                fields: ['Value', 'Name'],
                                                                data : [
                                                                    {"Value":"All", "Name":"All"},
                                                                    {"Value":"AS", "Name":"AS - Active"},
                                                                    {"Value":"TB", "Name":"TB - Term Break"}
                                                                ]
                                                            }),
                                                            displayField: 'Name',
                                                            value: 'All',
                                                            valueField: 'Value',
                                                            fieldLabel: 'Filter by Status',
                                                            labelAlign: 'top',
                                                            multiSelect: false,
                                                            listConfig: {
                                                                maxHeight: 111,
                                                                resizable: false,
                                                                width: 120,
                                                                matchFieldWidth: false,
                                                                minWidth: 120
                                                            },
                                                            listeners: {
                                                                change: {
                                                                    fn: function(field, newValue, oldValue, options){
                                                                        me.onCourseGridFilter(field, newValue, options);
                                                                    },
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'combobox',
                                                            id: 'CourseCompletionStatusFilterCombo',
                                                            selectOnFocus: true,
                                                            disabled: true,
                                                            width: 95,
                                                            queryMode: 'local',
                                                            typeAhead: true,
                                                            forceSelection: true,
                                                            store: Ext.create('Ext.data.Store', {
                                                                fields: ['Value', 'Name'],
                                                                data : [
                                                                    {"Value":"All", "Name":"All"},
                                                                    {"Value":"Passed", "Name":"Passed"},
                                                                    {"Value":"NotPassed", "Name":"Not Passed"}
                                                                ]
                                                            }),
                                                            value: 'NotPassed',
                                                            displayField: 'Name',
                                                            valueField: 'Value',
                                                            fieldLabel: 'Filter by Passed',
                                                            labelAlign: 'top',
                                                            multiSelect: false,
                                                            listConfig: {
                                                                maxHeight: 111,
                                                                resizable: false,
                                                                width: 85,
                                                                matchFieldWidth: false,
                                                                minWidth: 85
                                                            },
                                                            listeners: {
                                                                change: {
                                                                    fn: function(field, newValue, oldValue, options){
                                                                        me.onCourseGridFilter(field, newValue, options);
                                                                    },
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 10 },
                                                        {
                                                            text: 'Clear Filters',
                                                            style: 'border-color: #81A4D0;',
                                                            width: 83,
                                                            height: 38,
                                                            tooltip: 'View all students (remove all filters)',
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onClearCourseFiltersButtonClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        '->',
                                                        {
                                                        	xtype: 'button', 
                                                            text: 'Export to CSV',
                                                            id: 'ExportAllCourseStudentsToCSVButton', 
                                                            style: 'border-color: #81A4D0;',
                                                            width: 100,
                                                            height: 38,
                                                            menu: [
	                                                        { 
	                                                            id: 'ExportCourseGridToCSVButton',
	                                                            text: 'Current Columns', 
	                                                            tooltip: 'Export data of current columns to CSV format',
	                                                            handler: me.onExportGridData
	                                                        },{ 
	                                                            id: 'ExportCourseStoreToCSVButton',
	                                                            text: 'All', 
	                                                            tooltip: 'Export all of the grid\'s data content to CSV format',
	                                                            handler: me.onExportStoreData
	                                                        }]
						                                },
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            xtype: 'button',
                                                            id: 'ForceFitCourseGridButton',
                                                            text: 'Force Fit',
                                                            style: 'border-color: #81A4D0;',
                                                            width: 100,
                                                            height: 38,
                                                            tooltip: 'Attempt to stretch/fit all visible columns within the grid\'s view area',
                                                            handler: me.onForceFitGrid
                                                        },
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            text: 'Reset Columns',
                                                            id: 'ResetCourseGridColumnsButton',
                                                            style: 'border-color: #81A4D0;',
                                                            width: 100,
                                                            height: 38,
                                                            tooltip: "Reset the grid columns to default view configuration",
                                                            listeners: {
                                                                click: {
                                                                    fn: function() { 
                                                                        me.coursesGrid.reconfigure( me.coursesGrid.store, WGU.defaultCourseColumnConfig ); 
                                                                        //me.onCourseRosterComboChangeRiskColumn(me.mentorCourseListFilterCombo.getValue());
                                                                    },
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            text: 'Refresh Roster',
                                                            id: 'RefreshRosterButton',
                                                            style: 'border-color: #81A4D0;',
                                                            width: 100,
                                                            height: 38,
                                                            tooltip: 'Reload Roster',
                                                            disabled: true,
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onRefreshRosterButtonClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 2 }
                                                    ]
                                                }
                                            ],
                                            selModel: Ext.create('Ext.selection.RowModel', {
                                                enableKeyNav: true,
                                                mode: 'SINGLE',
                                                allowDeselect: false,
                                                ignoreRightMouseSelection: true,
                                                listeners: {
                                                    selectionchange: function( thisModel, selected, eOpts ) {
                                                        if ( selected.length > 0 ) {
                                                            me.onStudentGridviewItemClick( null, selected[0], null, null, null, eOpts );
                                                        }
                                                    }
                                                }
                                            })
                                        },
                                        {
                                            xtype: 'gridpanel',
                                            id: 'SearchGridPanel',
                                            minWidth: 1500,
                                            title: '',
                                            store: searchResultsStore,
                                            isSavingView: true,
                                            plugins: {
                                                ptype: 'bufferedrenderer',
                                                trailingBufferZone: 25,  // Keep 25 rows rendered in the table behind scroll
                                                leadingBufferZone:  25  // Keep 25 rows rendered in the table ahead of scroll
                                            },
                                            columns: WGU.defaultColumnConfig,
                                            viewConfig: {
                                                id: 'SearchGridView',
                                                itemId: 'search-grid-view',
                                                loadMask: false,
                                                autoScroll: true,
                                                maintainFlex: true,
                                                singleSelect: true,
                                                trackOver: true,
                                                listeners: {
                                                    itemdblclick: {
                                                        fn: me.onCourseTreeGridItemDblClick,
                                                        scope: me
                                                    },
                                                    itemclick: {
                                                        fn: me.onStudentGridviewItemClick,
                                                        scope: me
                                                    },
                                                    itemcontextmenu: {
                                                        fn: me.onCourseTreeGridViewItemContextMenu,
                                                        scope: me
                                                    }
                                                }
                                            },
                                            listeners : {
                                                itemcontextmenu :  function( grid, record, item, index, event){
                                                    event.stopEvent();
                                                },
                                                columnresize: function( ct, column, width, eOpts ){
                                                    if ( !me.suppressColumnResizeEvent ) {
                                                        me.onSaveColumnsConfig( me.searchGrid );
                                                    }
                                                },
                                                columnmove: function( ct, column, fromIdx, toIdx, eOpts ){
                                                    if ( !me.suppressColumnResizeEvent ) {
                                                        me.onSaveColumnsConfig( me.searchGrid );
                                                    }
                                                },
                                                columnhide: function( ct, column, eOpts ){
                                                    if ( !me.suppressColumnResizeEvent ) {
                                                        me.onSaveColumnsConfig( me.searchGrid );
                                                    }
                                                },
                                                columnshow: function( ct, column, eOpts ){
                                                    if ( !me.suppressColumnResizeEvent ) {
                                                        me.onSaveColumnsConfig( me.searchGrid );
                                                    }
                                                },
                                                resize: function( grid, width, height, oldWidth, oldHeight, eOpts ) {
                                                    view = me;
                                                    if ( view && !view.suppressColumnResizeEvent ){
                                                        view.suppressColumnResizeEvent = true;
                                                        setTimeout( function() { view.suppressColumnResizeEvent = false; }, 1000);
                                                    }
                                                },
                                                beforeshow: function( grid, eOpts ) {
                                                    view = me;
                                                    if ( view && !view.suppressColumnResizeEvent ){
                                                        view.suppressColumnResizeEvent = true;
                                                        setTimeout( function() { view.suppressColumnResizeEvent = false; }, 2000);
                                                    }
                                                }
                                            },
                                            features: [
                                                {
                                                    ftype: 'filters',
                                                    encode: true,
                                                    local: true
                                                }
                                            ],
                                            dockedItems: [
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'bottom',
                                                    minHeight: 22,
                                                    items: [
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            xtype: 'label',
                                                            id: 'SearchGridStatusBarText',
                                                            anchor: '100%',
                                                            text: ''
                                                        }
                                                    ]
                                                },
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'top',
                                                    minHeight: 65,
                                                    items: [
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            xtype: 'textfield',
                                                            id: 'StudentIdSearchTextField',
                                                            selectOnFocus: true,
                                                            disabled: false,
                                                            fieldLabel: 'Student Id',
                                                            enableKeyEvents: true,
                                                            labelWidth: 82,
                                                            labelAlign: 'top',
                                                            width: 115,
                                                            listeners: {
                                                                keyup: {
                                                                    fn: function(field, e){
                                                                        me.onSearchCriteriaChange(field, field.getValue(), e);
                                                                    },
                                                                    buffer: 100
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'textfield',
                                                            id: 'StudentLastNameSearchTextField',
                                                            disabled: false,
                                                            selectOnFocus: true,
                                                            fieldLabel: 'Student\'s Last Name',
                                                            enableKeyEvents: true,
                                                            labelWidth: 82,
                                                            labelAlign: 'top',
                                                            width: 135,
                                                            listeners: {
                                                                keyup: {
                                                                    fn: function(field, e){
                                                                        me.onSearchCriteriaChange(field, field.getValue(), e);
                                                                    },
                                                                    buffer: 100
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'textfield',
                                                            id: 'StudentFirstNameSearchTextField',
                                                            disabled: false,
                                                            selectOnFocus: true,
                                                            fieldLabel: 'Student\'s First Name',
                                                            enableKeyEvents: true,
                                                            labelWidth: 82,
                                                            labelAlign: 'top',
                                                            width: 135,
                                                            listeners: {
                                                                keyup: {
                                                                    fn: function(field, e){
                                                                        me.onSearchCriteriaChange(field, field.getValue(), e);
                                                                    },
                                                                    buffer: 100
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'combobox',
                                                            id: 'CourseListSearchCombo',
                                                            width: 250,
                                                            queryMode: 'local',
                                                            typeAhead: true,
                                                            forceSelection: true,
                                                            selectOnFocus: true,
                                                            store: searchCoursesStore,
                                                            displayField: 'CodeTitle',
                                                            valueField: 'BannerCourseCode__c',
                                                            fieldLabel: 'Search within a Course(s)',
                                                            labelAlign: 'top',
                                                            multiSelect: true,
                                                            listConfig: {
                                                                maxHeight: 111,
                                                                resizable: false,
                                                                width: 650,
                                                                matchFieldWidth: false,
                                                                minWidth: 650
                                                            },
                                                            listeners: {
                                                                change: {
                                                                    fn: function(field, newValue, oldValue, e){
                                                                        me.onSearchCriteriaChange(field, newValue, e);
                                                                    },
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 3 },
                                                        {
                                                            xtype: 'combobox',
                                                            id: 'StudentStatusSearchCombo',
                                                            disabled: false,
                                                            selectOnFocus: true,
                                                            width: 85,
                                                            listConfig: {
                                                                maxHeight: 111,
                                                                resizable: false,
                                                                width: 120,
                                                                matchFieldWidth: false,
                                                                minWidth: 120
                                                            },
                                                            queryMode: 'local',
                                                            typeAhead: true,
                                                            forceSelection: true,
                                                            store: Ext.create('Ext.data.Store', {
                                                                fields: ['Value', 'Name'],
                                                                data : [
                                                                    {"Value":"AS", "Name":"AS - Active"},
                                                                    {"Value":"IG", "Name":"IG - Graduated"},
                                                                    {"Value":"IN", "Name":"IN - New"},
                                                                    {"Value":"TB", "Name":"TB - Term Break"}
                                                                ]
                                                            }),
                                                            displayField: 'Name',
                                                            valueField: 'Value',
                                                            fieldLabel: 'Student Status',
                                                            value: ["AS", "TB"],
                                                            labelAlign: 'top',
                                                            multiSelect: true,
                                                            listeners: {
                                                                change: {
                                                                    fn: function(field, newValue, oldValue, e){
                                                                        me.onSearchCriteriaChange(field, newValue, e);
                                                                    },
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 10 },
                                                        {
                                                            id: 'SearchButton',
                                                            text: 'Search',
                                                            style: 'border-color: #81A4D0;',
                                                            width: 120,
                                                            height: 38,
                                                            disabled: true,
                                                            tooltip: 'Search for Student(s)',
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onDoStudentSearchButtonClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 5 },
                                                        {
                                                            text: 'Reset Search',
                                                            style: 'border-color: #81A4D0;',
                                                            width: 100,
                                                            height: 38,
                                                            tooltip: 'Reset all Search Fields',
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onClearSearchFieldsButtonClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        '->',
                                                        {
                                                        	xtype: 'button', 
                                                            text: 'Export to CSV',
                                                            id: 'ExportAllSearchStudentsToCSVButton', 
                                                            style: 'border-color: #81A4D0;',
                                                            width: 100,
                                                            height: 38,
                                                            menu: [
	                                                        { 
	                                                            id: 'ExportSearchGridToCSVButton',
	                                                            text: 'Current Columns', 
	                                                            tooltip: 'Export data of current columns to CSV format',
	                                                            handler: me.onExportGridData
	                                                        },{ 
	                                                            id: 'ExportSearchStoreToCSVButton',
	                                                            text: 'All', 
	                                                            tooltip: 'Export all of the grid\'s data content to CSV format',
	                                                            handler: me.onExportStoreData
	                                                        }]
						                                },
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            xtype: 'button',
                                                            id: 'ForceFitSearchGridButton',
                                                            text: 'Force Fit',
                                                            style: 'border-color: #81A4D0;',
                                                            width: 100,
                                                            height: 38,
                                                            tooltip: 'Attempt to stretch/fit all visible columns within the grid\'s view area',
                                                            handler: me.onForceFitGrid
                                                        },
                                                        { xtype: 'tbspacer', width: 2 },
                                                        {
                                                            text: 'Reset Columns',
                                                            id: 'ResetSearchGridColumnsButton',
                                                            style: 'border-color: #81A4D0;',
                                                            width: 100,
                                                            height: 38,
                                                            tooltip: "Reset the grid columns to default view configuration",
                                                            listeners: {
                                                                click: {
                                                                    fn: function() {
                                                                        me.searchGrid.reconfigure( me.searchGrid.store, WGU.defaultColumnConfig );  
                                                                     //   me.onCourseRosterComboChangeRiskColumn(me.mentorCourseListFilterCombo.getValue());
                                                                    },
                                                                    scope: me
                                                                }
                                                            }
                                                        },
                                                        { xtype: 'tbspacer', width: 2 }
                                                    ]
                                                }
                                            ],
                                            selModel: Ext.create('Ext.selection.RowModel', {
                                                enableKeyNav: true,
                                                mode: 'SINGLE',
                                                allowDeselect: false,
                                                ignoreRightMouseSelection: true,
                                                listeners: {
                                                    selectionchange: function( thisModel, selected, eOpts ) {
                                                        if ( selected.length > 0 ) {
                                                            me.onStudentGridviewItemClick( null, selected[0], null, null, null, eOpts );
                                                        }
                                                    }
                                                }
                                            })
                                        }
                                    ]
                                }
                            ]
                        },
                        { xtype: 'tbspacer', width: 10}

                    ]
                },
                {
                    xtype: 'container',
                    region: 'south',
                    height: 24,
                    id: 'wgu-footer-container'
                }
            ]
        });

        me.callParent(arguments);
        me.contactQueryFields = "Id,StudentRiskScore__c, StudentAnalyticMessage__c, Birthdate,CampusCode__c,LastPortalLogin__c,Timezone__c,Email,Phone,HomePhone,AcademicStanding__c,TermBreakStartDate__c,TermBreakEndDate__c,StudentPlannedGraduationDate__c,WGUEmail__c,ComposeEmailLink__c,AccountId,MailingCity,MailingState,ProgramCode__c,ProgramName__c,FAADate__c,StudentID__c,TermNumber__c,CurrentTerm__c,CurrentTermCompletedCUs__c,CurrentTermEnrolledCUs__c,TotalAttemptedCUs__c,TotalCompletedCUs__c,HistoricallyAttemptedCUs__c,HistoricallyCompletedCUs__c,ProgramCatalogTerm__c,Status__c,FirstName,LastName,Name,Mentor__c,Mentor__r.PIDM__c,Mentor__r.Name,Mentor__r.Email,Mentor__r.Phone,CumulativeSAP__c,TermStartDate__c,TermSap__c,TermEndDate__c,WGUDegreeProgram__c,WGUDegreeProgram__r.Title__c,IsNSE__c,PIDM__c ";
        //1-1-14 academic course
        me.academicQueryFields = " Type__c, Term__c, StudentContact__c, StudentContact__r.Status__c, StudentContact__r.StudentRiskScore__c,  Status__c,  StartDate__c,  RequirementsReferred__c,  RequirementsEngaged__c,  RequirementsEngagedPreassessment__c,  RequirementsCompleted__c,  Name,  MentorVerifiedEngagementNotedDate__c,  MentorVerifiedEngagementNotedBy__c,  MentorVerifiedCurrentEngagement__c,  Id,  FullCourseTitle__c,  EndDate__c,  CourseCode__c,  CompositeKey__c,  CompetencyUnits__c,  Attempts__c,(Select id, CreatedDate, Name, Attempts__c, Completed__c,CompletedDate__c, Engaged__c, EngagedPreassessment__c, FullTitle__c, PreassessmentCode__c, Referred__c, Status__c, StudentAcademicCourse__c, Type__c  From StudentAcademicCourseRequirements__r) ";
        
        me.studentsGridPanel = Ext.getCmp('StudentsGridPanel');
        me.studentPropertiesPanel = Ext.getCmp('StudentPropertiesPanel');
        me.pieChartsContainer = Ext.getCmp('PieChartsContainer');
      //  me.barChartsContainer = Ext.getCmp('BarChartsContainer');
        me.daysInTermChart = Ext.getCmp('DaysInTermChart');
        me.weeksInTermChart = Ext.getCmp('WeeksInTermChart');
      //  me.riskBarChart = Ext.getCmp('RiskBarChart'); 
      //  me.noRiskLabel = Ext.getCmp('NoRiskLabel');
        me.daysInTermLabel = Ext.getCmp('DaysInTermLabel');
        me.WeeksInTermLabel = Ext.getCmp('WeeksInTermLabel');

        me.studentTab = Ext.getCmp('StudentTab');
        me.notesTab = Ext.getCmp('NotesTab');
        me.studentCoursesTab = Ext.getCmp('StudentCoursesTab');
        me.AnalyticTab = Ext.getCmp('AnalyticTab');
        me.studentNoteView = Ext.getCmp('EmbeddedStudentNoteView');
        me.noteView = me.studentNoteView;
        me.mentorCourseListFilterComboToolTip = Ext.getCmp('MentorCourseListFilterComboToolTip'); 

        me.studentsGrid = Ext.getCmp('MyStudentsGridPanel');
        me.coursesGrid = Ext.getCmp('MyCoursesGridPanel');
        me.searchGrid = Ext.getCmp('SearchGridPanel');

        me.myStudentsViewRadio = Ext.getCmp('MyStudentsViewRadio');
        me.myCoursesViewRadio = Ext.getCmp('MyCoursesViewRadio');
        me.searchViewRadio = Ext.getCmp('SearchViewRadio');

        me.mentorPhoto = Ext.getCmp('MentorPhoto');
        me.mentorListCombo = Ext.getCmp('MentorListCombo');
        me.mentorFullNameField = Ext.getCmp('MentorFullNameField');
        me.mentorNameField =  Ext.getCmp('MentorNameField');
        me.mentorRoleField = Ext.getCmp('MentorRoleField');
        me.mentorAssignedCollegeField = Ext.getCmp('MentorAssignedCollegeField');
        me.mentorSummaryPanel = Ext.getCmp('MentorSummaryPanel');
        me.mentorOnSAPTextField = Ext.getCmp('MentorOnSAPTextField');
        me.mentorOffSAPTextField = Ext.getCmp('MentorOffSAPTextField');
        me.mentorTermEndingThisMonthTextField = Ext.getCmp('MentorTermEndingThisMonthTextField');
        me.mentorInFirstMonthOfTermTextField = Ext.getCmp('MentorInFirstMonthOfTermTextField');
        me.mentorFAWarningTextField = Ext.getCmp('MentorFAWarningTextField');
        me.mentorFASuspendedTextField = Ext.getCmp('MentorFASuspendedTextField');
        me.mentorOnTermBreakTextField = Ext.getCmp('MentorOnTermBreakTextField');
        me.mentorNewStudentsTextField = Ext.getCmp('MentorNewStudentsTextField');

        me.mentorCourseListFilterCombo = Ext.getCmp('MentorCourseListFilterCombo'); 
        
        me.studentGridStatusBarText = Ext.getCmp('StudentGridStatusBarText');
        me.searchGridStatusBarText = Ext.getCmp('SearchGridStatusBarText');
        me.courseGridStatusBarText = Ext.getCmp('CourseGridStatusBarText');
 
        me.courseStudentNameFilterTextField = Ext.getCmp('CourseStudentNameFilterTextField');
        me.courseStudentIdFilterTextField = Ext.getCmp('CourseStudentIdFilterTextField');
        me.courseStudentDegreeProgramFilterCombo = Ext.getCmp('CourseStudentDegreeProgramFilterCombo');
        me.courseStudentStatusFilterCombo = Ext.getCmp('CourseStudentStatusFilterCombo');
        me.courseCompletionStatusFilterCombo = Ext.getCmp('CourseCompletionStatusFilterCombo');
        me.refreshRosterButton = Ext.getCmp('RefreshRosterButton');

        me.studentDegreeProgramFilterCombo = Ext.getCmp('StudentDegreeProgramFilterCombo');
        me.studentNameFilterTextField = Ext.getCmp('StudentNameFilterTextField');
        me.studentIdFilterTextField = Ext.getCmp('StudentIdFilterTextField');
        me.studentCourseListFilterCombo = Ext.getCmp('StudentCourseListFilterCombo');
        me.studentStatusFilterCombo = Ext.getCmp('StudentStatusFilterCombo');


        me.studentIdSearchTextField = Ext.getCmp('StudentIdSearchTextField');
        me.studentLastNameSearchTextField = Ext.getCmp('StudentLastNameSearchTextField');
        me.studentFirstNameSearchTextField = Ext.getCmp('StudentFirstNameSearchTextField');
        me.courseListSearchCombo = Ext.getCmp('CourseListSearchCombo');
        me.studentStatusSearchCombo = Ext.getCmp('StudentStatusSearchCombo');
        me.exportAllSearchStudentsToCSVButton = Ext.getCmp('ExportAllSearchStudentsToCSVButton');
        me.searchButton = Ext.getCmp('SearchButton');

        me.studentPhoto = Ext.getCmp('StudentPhoto');
        me.studentIdField = Ext.getCmp('StudentIdField');
        me.programStartDateField = Ext.getCmp('ProgramStartDateField');
        me.currentTermField = Ext.getCmp('CurrentTermField');
        me.plannedGraduationDateField = Ext.getCmp('PlannedGraduationDateField');
        me.degreeProgramNameField = Ext.getCmp('DegreeProgramNameField');
        me.studentCourseListField = Ext.getCmp('StudentCourseListField');
        me.studentTimeZoneField = Ext.getCmp('StudentTimeZoneField');
        me.studentMentorNameField = Ext.getCmp('StudentMentorNameField');
        me.studentMentorEmailField = Ext.getCmp('StudentMentorEmailField');
        me.studentMentorPhoneField = Ext.getCmp('StudentMentorPhoneField');
        me.studentActionButtons = Ext.getCmp('StudentActionButtons');
        me.courseRosters = null;

    },

    //4/14/14  new feature
    //  export current selected columns into csv file with same layout of user selected columns
    onExportGridData: function() {
        var me = Ext.getCmp('WGUpanel');
        var grid = me.studentsGridPanel.getLayout().getActiveItem();
         
        var csv = me.ConvertGridToCSV(grid.store.data.items);
        var dialog = Ext.create('WGU.dialog.CopyRecordDialog');
        dialog.setText(csv);
        dialog.setWidth(me.getWidth()>640? me.getWidth()/3: 640);
        dialog.show();
    },
    //existing feature
    //  export record from store to csv. (include all columns)
    onExportStoreData: function() {
        var me = Ext.getCmp('WGUpanel');
        var grid = me.studentsGridPanel.getLayout().getActiveItem();
        //4/14/14 edit
        var csv = me.ConvertRecordToCSV(grid.store.data.items); 
        var dialog = Ext.create('WGU.dialog.CopyRecordDialog');
        dialog.setText(csv);
        dialog.setWidth(me.getWidth()>640? me.getWidth()/3: 640);
        dialog.show();
    },

    onForceFitGrid: function() {
        var me = Ext.getCmp('WGUpanel');
        var grid = me.studentsGridPanel.getLayout().getActiveItem();
        var view = grid.getView();
        var nameLastFirstColumn;
        for ( var c = 0; c < grid.columns.length; c++ ) {
            var column = grid.columns[c];
            if ( column.dataIndex == 'NameLastFirst') {
                nameLastFirstColumn = column;
                column.flex = 1;
                break;
            }
        }
        setTimeout( function(){
            grid.doLayout();
            if (nameLastFirstColumn.width < 100) {
                nameLastFirstColumn.width = 100;
                nameLastFirstColumn.flex = false;
                setTimeout( function(){ grid.doLayout(); }, 10);
            }
        }, 10);
    },

    onSaveColumnsConfig: function( grid, resizing ) {
        var me = Ext.getCmp('WGUpanel');
        if ( grid && !grid.isSavingView ) {
            //collect the grid.columns JSON and save it to SF to make the column configuration sticky for the user (when they come back to the page or refresh)
            var saveInterval = 4000; //only attempt a save every 4 seconds (resize events get fired in rapid succession)
            grid.ColumnChangesPending = false;
            grid.NextEligibleColumnUpdate = Math.floor(new Date().getTime()/1000)+saveInterval; //set the next update interval
            grid.isSavingView = true;
            setTimeout( function(){
                columnsConfig = [];
                for ( var c = 0; c < grid.columns.length; c++ ) {
                    column = grid.columns[c];
                    config = {
                        xtype: column.xtype,
                        text: column.text,
                        dataIndex: column.dataIndex,
                        filterable: column.filterable? column.filterable: false,
                        sortable: column.sortable? column.sortable: false,
                        align: column.align? column.align: 'left',
                        hidden: column.hidden,
                        hideable: column.hideable? column.hideable: false,
                        draggable: column.draggable? column.draggable : false,
                        resizable: column.resizable? column.resizable: true
                    };
                    if ( column.style ) {
                        config.style = column.style;
                    }
                    if ( column.cls ) {
                        config.cls = column.cls;
                    }
                    if ( column.flex) {
                        config.flex = column.flex
                    } else {
                        config.width = column.width;
                    }
                    if (column.renderFunc) {
                        config.renderFunc = column.renderFunc;
                    }
                    if (column.format) {
                        config.format = column.format;
                    }
                    if (column.tooltip) {
                        config.tooltip = column.tooltip;
                    }
                    columnsConfig.push(config);

                }
                if ( Ext.isChrome ) {
                    console.log ( grid.getId() + " columns config collected for "+ columnsConfig.length + " columns. Saving..." );
                }
                if ( grid.savedColumnConfig ) {
                    var userAttribute = new sforce.SObject("UserAttributes__c");
                    userAttribute.Id = grid.savedColumnConfig.Id;
                    userAttribute.JsonConfigData__c = Ext.encode(columnsConfig);
                    $soap.update([userAttribute], function(updateResult){
                        if ( updateResult[0].success == "false" ) {
                            if ( Ext.isChrome ) {
                                console.log ( "Column Config Update failed: " +  updateResult[0] );
                            }
                            if ( updateResult[0].errors && Ext.encode(updateResult[0].errors).indexOf("ENTITY_IS_DELETED") != -1 ) {
                                //someone deleted the view config UserAttribute__c record, attempt to re-create it
                                var newUserAttribute = new sforce.SObject("UserAttributes__c");
                                newUserAttribute.Name = thisUser.Name + ' Saved Column Config @' + grid.getId();
                                newUserAttribute.JsonConfigData__c = Ext.encode(columnsConfig);
                                newUserAttribute.User__c = thisUser.Id;
                                if ( grid.UserAttributeRecordType ) {
                                    newUserAttribute.RecordTypeId = grid.UserAttributeRecordType.Id;
                                } else {
                                    var queryResult = $soap.query("SELECT Id,Name FROM RecordType WHERE DeveloperName='"+ grid.getId() +"' AND SObjectType = 'UserAttributes__c'");
                                    if ( queryResult.size == "1" ) {
                                        grid.UserAttributeRecordType = queryResult.records;
                                        newUserAttribute.RecordTypeId = grid.UserAttributeRecordType.Id;
                                    }
                                }

                                var createResult = $soap.create([newUserAttribute], function(saveResult){
                                    if (saveResult[0].success == "true") {
                                        newUserAttribute.Id = saveResult[0].id;
                                        grid.savedColumnConfig = newUserAttribute;
                                        if ( Ext.isChrome ) {
                                            console.log ( "Column Config Create succeeded: " +saveResult[0] );
                                        }
                                    } else {
                                        if ( Ext.isChrome ) {
                                            console.log ( "Column Config Create failed: " +  saveResult[0] );
                                        }
                                    }
                                    grid.isSavingView = false;
                                    if ( grid.ColumnChangesPending ) {
                                        me.onSaveColumnsConfig(grid);
                                    }

                                });
                            }
                        } else {
                            //update success
                            if ( Ext.isChrome ) {
                                console.log ( "Column Config Update succeeded: " +  updateResult[0] );
                            }
                            grid.savedColumnConfig.JsonConfigData__c = userAttribute.JsonConfigData__c;
                        }
                        grid.isSavingView = false;
                        if ( grid.ColumnChangesPending ) {
                            me.onSaveColumnsConfig(grid);
                        }
                    });
                } else {

                    //create a new UserAttributes__c record to persist column view perferences
                    var newUserAttribute = new sforce.SObject("UserAttributes__c");
                    newUserAttribute.Name = thisUser.Name + ' Saved Column Config @' + grid.getId();
                    newUserAttribute.JsonConfigData__c = Ext.encode(columnsConfig);
                    newUserAttribute.User__c = thisUser.Id;
                    if ( grid.UserAttributeRecordType ) {
                        newUserAttribute.RecordTypeId = grid.UserAttributeRecordType.Id;
                    } else {
                        var queryResult = $soap.query("SELECT Id,Name FROM RecordType WHERE DeveloperName='"+ grid.getId() +"' AND SObjectType = 'UserAttributes__c'");
                        if ( queryResult.size == "1" ) {
                            grid.UserAttributeRecordType = queryResult.records;
                            newUserAttribute.RecordTypeId = grid.UserAttributeRecordType.Id;
                        }
                    }

                    $soap.create([newUserAttribute], function(saveResult){
                        if (saveResult[0].success == "true") {
                            newUserAttribute.Id = saveResult[0].id;
                            grid.savedColumnConfig = newUserAttribute;
                            if ( Ext.isChrome ) {
                                console.log ( "Column Config Create succeeded: " +saveResult[0] );
                            }
                        } else {
                            if ( Ext.isChrome ) {
                                console.log ( "Column Config Create failed: " +  saveResult[0] );
                            }
                        }
                        grid.isSavingView = false;
                        if ( grid.ColumnChangesPending ) {
                            me.onSaveColumnsConfig(grid);
                        }

                    });
                }

            }, saveInterval);
        } else if ( Math.floor(new Date().getTime()/1000) > grid.NextEligibleColumnUpdate || !resizing ) {
            //record the attempt to save a reconfigure of the columns, for retry in the above code (after existing save process completes)
            grid.ColumnChangesPending = true;
        }
    },
    
    //2nd load :  point 2 
    // Detail of course grid.
    //for course mentor:  load courses, called by onCourseRosterComboChange,
    // 1. if  courses not fully loaded yet, continue to load.
    // 2. then load courses from roster.store into roster.records
    // 3. finallly load roster.records. to grid store
    loadCourseGrid: function( courseCode, loadingMask ) {
        var me = Ext.getCmp('WGUpanel');
        me.resetStudentPropertiesView(false);

        try { coursesGridStore.loadData([],false); } catch(e) {}

        var grid = me.coursesGrid;
        grid.getView().refresh();
        if ( courseCode && courseCode !== '' ) {
            var roster = me.getRosterFromCourseNumber(courseCode); 
            if (roster) {
                if ( roster.records === null ) {

                    if (roster.Enrollment > 700) {
                        me.searchViewRadio.setValue(true);
                        if ( !roster.done ) {    
                            //* should not happen         
                            //if loading haven't done, go there the same code of getCourseAssignmentAndStudentData
                            //fire off an asynchronous fetch of student ids
                            rosterQuery = "Select "+ me.academicQueryFields +       " From StudentAcademicCourse__c "+
                                                " where  StudentContact__c != null "+
                                                " AND StudentContact__r.Status__c IN (\'AS\',\'TB\')"+
                                                " AND (Term__c  IN "+WGU.mySixTerms+"  AND ActiveCurrentTermCourse__c = true)" +
                                                 " AND CourseCode__c = \'"+roster.BannerCourseCode__c + "\'";
                                                 //"SELECT Student__c, Student__r.StudentRiskScore__c,CompletedDate__c, CompletedTermCode__c, EnrollTermCode__c, WGUCourseVersion__r.WGUCourse__r.Name, Completed__c, Status__c,StudentCourseRegistration__c, StudentCourseRegistration__r.startdate__c, StudentCourseRegistration__r.enddate__c from StudentCourseVersion__c WHERE Student__c != null AND Student__r.Status__c IN ('AS','TB') AND (StudentCompletionCourse__c != null OR StudentCourseRegistration__c != null)  AND (EnrollTermcode__c  IN "+WGU.mySixTerms+" OR CompletedTermCode__c IN "+WGU.mySixTerms+" OR ActiveCurrentTermCourse__c = true) AND WGUCourseVersion__c != null AND WGUCourseVersion__r.WGUCourse__r.Name = \'" + roster.BannerCourseCode__c +"\'";
                            try {
                                $soap.batchSize = 2000; //fetch student ids as quickly as possible
                                $soap.query( rosterQuery, function(queryResult) {
                                    try {
                                        queryResult.size *= 1;
                                        queryResult.done = (queryResult.done == "true");
                                        if ( queryResult.size > 0 ) {
                                            me.doProcessStudentIdsResultSet(queryResult);
                                            while ( !queryResult.done ) {
                                                queryResult = $soap.queryMore( queryResult.queryLocator );
                                                queryResult.size *= 1;
                                                queryResult.done = (queryResult.done == "true");
                                                me.doProcessStudentIdsResultSet(queryResult);
                                            }
                                            me.doUpdateCourseRosters( roster );
                                        }
                                        if ( Ext.isChrome ) {
                                            console.log( 'loadCourseGrid preFetch of Student Ids Complete [' + roster.contactids.length + " Contact Ids]");
                                        }
                                    } catch (e) {
                                        if ( Ext.isChrome ) {
                                            console.log( 'loadCourseGrid preFetch of Student Ids Query Result Exception: ' +( e.description? e.description: e) );
                                        }
                                    }
                                });
                            } catch (e) {
                                if ( Ext.isChrome ) {
                                    console.log( 'loadCourseGrid preFetch of Student Ids Query Exception: ' +( e.description? e.description: e) );
                                }
                            }
                        }
                        //DISPLAY A DIALOG TO TRY BREAKING UP THE FETCH OF STUDENT IDs IF NECESSARY (MOST NEEDED FOR SINGLE LARGE COURSE ROSTER ASSIGNMENTS)
                        setTimeout( function() {
                            Ext.Msg.show({
                                title:'Download Large Course Roster?',
                                msg: 'The Course ['+roster.BannerCourseCode__c+'] has an enrollment of '+roster.Enrollment+' students.<br>This can take longer to download.<br><br>Would you prefer to search for a student by Student Id or Name?',
                                buttons: Ext.Msg.YESNO,
                                icon: Ext.Msg.QUESTION,
                                fn: function(btn, text) {
                                    if (btn == 'yes') {
                                        me.searchViewRadio.setValue(true);
                                        me.searchGrid.getView().refresh();
                                        me.searchGrid.doLayout();
                                        setTimeout( function() {
                                            Ext.Msg.show({
                                                title:'Continue Download in Background?',
                                                msg: 'Would you like to continue downloading this course roster ['+roster.BannerCourseCode__c+'] in the background while you use the search feature?',
                                                buttons: Ext.Msg.YESNO,
                                                icon: Ext.Msg.QUESTION,
                                                fn: function(btn, text) {
                                                    if (btn == 'yes') {
                                                        setTimeout( function() {
                                                            me.fetchInBackground = true;
                                                            //                              !!!! load contact here !!!
                                                            me.getStudentRoster(roster);
                                                        }, 1500);
                                                    } else {
                                                        me.fetchInBackground = false;
                                                        if ( loadingMask ) {
                                                            loadingMask.hide();
                                                            Ext.destroy( loadingMask );
                                                            delete loadingMask;
                                                        }
                                                        Ext.callback( function(){me.mentorCourseListFilterCombo.setValue(null);}, me, null, 1);
                                                    }
                                                }
                                            });
                                        }, 1);
                                    } else {
                                        me.myCoursesViewRadio.setValue(true);
                                        loadingMask.show();
                                        me.coursesGrid.getView().refresh();
                                        me.coursesGrid.doLayout();
                                        //              !!!! load contact here !!!
                                        setTimeout( function() { me.getStudentRoster(roster); }, 250);
                                    }
                                }
                            });
                        }, 500);
                    } else { //roster.record==null && engagement <= 700
                    /*
                    *
                                 !!!! load contact here !!!
                    *
                    */
                        me.getStudentRoster( roster );
                    }
                } else {  //roster.records NOT null, already contains data
                    coursesGridStore.loadRecords(roster.records,{addRecords:false});
                    coursesGridStore.sort( 'NameLastFirst', 'ASC');
                    grid.columns[0].setSortState(null);
                    grid.columns[0].setSortState('ASC');
                    if ( loadingMask ) {
                        loadingMask.hide();
                        Ext.destroy( loadingMask );
                        delete loadingMask;
                    }
                    grid.getView().setLoading(false);
                    grid.getView().refresh();
                    setTimeout( function() {
                        grid.doLayout();
                    }, 10);
                }
                me.onCourseGridFilter();
            } 
            me.courseStudentNameFilterTextField.setDisabled(false);
            me.courseStudentIdFilterTextField.setDisabled(false);
            me.courseStudentDegreeProgramFilterCombo.setDisabled(false);
            me.courseStudentStatusFilterCombo.setDisabled(false);
            me.courseCompletionStatusFilterCombo.setDisabled(false);
            me.refreshRosterButton.setDisabled(false);
            me.coursesGrid.doLayout();

        } else { 
            me.courseStudentNameFilterTextField.setDisabled(true);
            me.courseStudentIdFilterTextField.setDisabled(true);
            me.courseStudentDegreeProgramFilterCombo.setDisabled(true);
            me.courseStudentStatusFilterCombo.setDisabled(true);
            me.courseCompletionStatusFilterCombo.setDisabled(true);
            me.refreshRosterButton.setDisabled(true);
        }//end if

    },
    //display risk tab and risk column when current course roster is one of the six courses
    //no longer for course mentor but for student mentor instead
    onCourseRosterComboChangeRiskColumn : function(newValue)
    { 
        return;
        var me = Ext.getCmp('WGUpanel'); 
        var grid = me.coursesGrid;
        var riskCourses=['LAE1','QBT1','QLC1','QMC1','QLT1'];   
        for(var i=0;i<me.coursesGrid.columns.length;i++)
        {
            var column=me.coursesGrid.columns[i];
            //July 2013, only display overall risk data   .
            if(column.text=="Overall Student Ability")//||column.text=="Math Ability"||column.text=="English Ability"||column.text=="Writing Ability"||column.text=="Prior College Experience")
            {  
                //enable risk columns when it is course mentor viewing
                if(Ext.Array.contains(riskCourses,newValue) )
                {
                    column.show(); 
                //  me.coursesGrid.setHidden(i,false);
                    column.setVisible(true);
                }else
                {
                    column.hide(); 
                    column.setVisible(false);
                //  me.coursesGrid.setHidden(i,true);
                } 
            }
        }
        
        grid.getView().refresh();
          
    },
    //2nd load : starting point 1
    //Course Mentor's Course Dropdown list selected: calls->loadingCourseGrid->
    onCourseRosterComboChange: function(field, newValue, oldValue, options){
        var me = Ext.getCmp('WGUpanel');
      //  me.onCourseRosterComboChangeRiskColumn(newValue); //display risk column only for 6 courses
        var loadingMask;
        me.fetchInBackground = false;
        if ( newValue && newValue !== '' && mentorsCoursesStore.findExact('BannerCourseCode__c',newValue) != -1) {
            setTimeout( function() {
                me.mentorCourseListFilterComboToolTip.update( me.mentorCourseListFilterCombo.getRawValue() );
                me.coursesGrid.doLayout();
            }, 3000);
            me.courseGridStatusBarText.setText( '' );
            me.studentsGridPanel.getLayout().getActiveItem().getView().setLoading(false);
            var grid = me.coursesGrid;
            grid.getView().setLoading(false);
            var roster = me.getRosterFromCourseNumber(newValue);
            loadingMask = new Ext.LoadMask(grid.getView(), {id:"LoadingMask"+newValue, msg:'Loading Roster for ' + newValue +'&nbsp;&nbsp;['+ roster.Enrollment +' students enrolled]...'});
            if ( me.studentsGridPanel.getLayout().getActiveItem().getId() == grid.getId() ) {
                loadingMask.show();
            }
            Ext.callback( me.loadCourseGrid, me, [newValue,loadingMask], 100 );
            me.refreshRosterButton.setTooltip('Reload Student Roster for ' + newValue );

        } else {
            me.mentorCourseListFilterComboToolTip.update( 'Please select a Course Roster...' );
        }
    },


    onLoadSavedSearchComboChange: function(field, newValue, oldValue, options){
        //TODO
    },

    onDoStudentSearchButtonClick: function() {
        var me = Ext.getCmp('WGUpanel');
        var whereElements = [];
        var selectedRecord;
        var contactIds = [];
        if ( me.searchGrid.getSelectionModel().getSelection().length > 0 ) {
            selectedRecord = me.searchGrid.getSelectionModel().getSelection()[0];
        } else {
            selectedRecord = false;
        }

        if ( Ext.isArray(me.courseListSearchCombo.getValue()) &&  me.courseListSearchCombo.getValue().length> 0 ) {
            //gather SOQL for join query
            var WHERE = "WHERE StudentContact__r.RecordType.DeveloperName = 'StudentRecord' AND Term__c IN "+WGU.mySixTerms+" AND ActiveCurrentTermCourse__c = TRUE AND CourseCode__c ";
            var courses = me.courseListSearchCombo.getValue();
            WHERE += " IN (";
            for ( var c=0; c< courses.length ; c++ ) {
                WHERE += c==0? "'"+courses[c]+"'" : ",'"+ courses[c] +"'";
            }
            WHERE += ") ";

            if ( me.studentIdSearchTextField.getValue() !== '' ) {
                whereElements.push( " (StudentContact__r.StudentID__c LIKE '%" + me.studentIdSearchTextField.getValue() + "%') " );
            }
            if ( me.studentLastNameSearchTextField.getValue() !== '' ) {
                var searchName = me.studentLastNameSearchTextField.getValue().replaceAll("'", "\\'");
                var name = Ext.String.capitalize(searchName);
                whereElements.push( " ((StudentContact__r.LastName LIKE '%" + name + "%') OR (StudentContact__r.LastName LIKE '%" + searchName + "%')) " );
            }
            if ( me.studentFirstNameSearchTextField.getValue() !== '' ) {
                var searchName = me.studentFirstNameSearchTextField.getValue().replaceAll("'", "\\'");
                var name = Ext.String.capitalize(searchName);
                whereElements.push( " ((StudentContact__r.FirstName LIKE '%" + name + "%') OR (StudentContact__r.FirstName LIKE '%" + searchName + "%')) " );
            }
            if ( me.studentStatusSearchCombo.getValue().length > 0 ) {
                var statuses = me.studentStatusSearchCombo.getValue();
                var includesINStatus = false;
                var statusInClause = " IN (";
                for ( var s = 0; s < statuses.length; s++ ) {
                    if ( statuses[s] == 'IN' ) {
                        includesINStatus = true;
                    } else {
                        statusInClause += ( statusInClause==" IN ("? "'"+statuses[s]+"'" : ",'"+statuses[s]+"'" );
                    }
                }
                statusInClause = (statusInClause==" IN (")? "": statusInClause;
                statusInClause = (includesINStatus? ( Ext.isEmpty(statusInClause)? " (StudentContact__r.Status__c = 'IN' AND StudentContact__r.OtherEmail__c != null) ": " (StudentContact__r.Status__c"+statusInClause+") OR (StudentContact__r.Status__c = 'IN' AND StudentContact__r.OtherEmail__c != null)) ") : " StudentContact__r.Status__c"+statusInClause+") ");
                whereElements.push( " " + statusInClause  );
            }

            for( var e = 0; e< whereElements.length; e++ ) {
                WHERE += " AND " +whereElements[e];
            }

            $soap.batchSize = 500;
            var contactIdString = "SELECT StudentContact__c FROM StudentAcademicCourse__c " + WHERE;
            me.searchGrid.getView().setLoading('Searching...');
            $soap.query( contactIdString, function(queryResult) {
                try {
                    queryResult.size *= 1;
                    queryResult.done = (queryResult.done == "true");
                    me.exportAllSearchStudentsToCSVButton.setDisabled( queryResult.size == 0 );
                    var recordIds = [];
                    var studentIdsResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
                    if ( queryResult.size > $soap.batchSize ) {
                        setTimeout( function() {
                            Ext.Msg.show({
                                        title:'Please Narrow Search Criteria',
                                        msg: 'Your search criteria located '+Ext.util.Format.number(queryResult.size,"0,000")+' student records. Only a partial result will be displayed ['+studentIdsResultSet.length+' records].<br><br>If the student you are seeking is not found in the results, please enter more specific search criteria and try again.',
                                        buttons: Ext.Msg.OK,
                                        icon: Ext.Msg.INFO
                                    }
                            );
                        }, 10);
                    }
                    for (var r=0; r < studentIdsResultSet.length; r++  ) {
                        recordIds.push( studentIdsResultSet[r].StudentContact__c );
                    }
                    var retrieveResult = $soap.retrieve( me.contactQueryFields, 'Contact', recordIds );
                    for (var s = 0; s < retrieveResult.length; s++ ) {
                        var studentRecord = retrieveResult[s];
                        studentRecord.CoursesList = '';
                        //studentRecord.ActiveCoursesNotComplete = '';
                        studentRecord.NameLastFirst = studentRecord.LastName +", " + studentRecord.FirstName;
                        studentRecord.Mentor__r = studentRecord.Mentor__r==null? { "Phone":null, "Email": null, "Name":null}: studentRecord.Mentor__r;
                        studentRecord.WGUDegreeProgram__r = studentRecord.WGUDegreeProgram__r==null? {"Title__c":studentRecord.ProgramName__c}: studentRecord.WGUDegreeProgram__r;
                        if ( !Ext.Array.contains( contactIds, studentRecord.Id ) && (studentUserStore.count() > 0? studentUserStore.findExact('Id',studentRecord.Id) == -1: true) ) {
                            contactIds.push( studentRecord.Id );
                        }
                        //risk factor for student search
                        if(studentRecord.StudentRiskScore__c!=null)// && Ext.Array.contains(riskCourses, roster.BannerCourseCode__c) ) 
                        {   studentRecord.HasRiskData=true;
                            studentRecord.StudentAction=studentRecord.StudentRiskScore__c;
                            studentRecord.StudentAnalyticMessage=studentRecord.StudentAnalyticMessage__c;
                        }else
                        {   studentRecord.HasRiskData=false;
                            studentRecord.StudentAction=0; 
                            studentRecord.StudentAnalyticMessage=studentRecord.StudentAnalyticMessage__c;
                        } 
                    }
                    searchResultsStore.loadRawData(retrieveResult, false);
                    if ( contactIds.length > 0 ) {
                        setTimeout( function(){me.getStudentPhotos(contactIds)}, 100 );
                    }
                    if ( searchResultsStore.count() > 0 ) {
                        searchResultsStore.sort('NameLastFirst', 'ASC');
                        if ( selectedRecord ) {
                            var rowIndex = searchResultsStore.findExact('Id', selectedRecord.data.Id);
                            if ( rowIndex != -1 ) {
                                me.searchGrid.getSelectionModel().select(rowIndex);
                                setTimeout( function() {me.searchGrid.getView().focusRow(selectedRecord)},  500);
                            } else {
                                me.resetStudentPropertiesView(false);
                            }
                        }
                        var statusText = searchResultsStore.count()>1? ' students located': ' student located';
                        setTimeout( function(){ me.searchGridStatusBarText.setText( searchResultsStore.count() + statusText ); }, 5);
                    } else {
                        me.resetStudentPropertiesView(false);
                        setTimeout( function(){ me.searchGridStatusBarText.setText('No students found matching this criteria'); }, 5);
                    }
                } finally {
                    me.searchGrid.getView().setLoading(false);
                }
            });

        } else {
            //no need to join on StudentCourseRegistration__c records for course criteria
            if ( me.studentIdSearchTextField.getValue() !== '' ) {
                whereElements.push( " (StudentID__c LIKE '%" + me.studentIdSearchTextField.getValue() + "%') " );
            }
            if ( me.studentLastNameSearchTextField.getValue() !== '' ) {
                var searchName = me.studentLastNameSearchTextField.getValue().replaceAll("'", "\\'");
                var name = Ext.String.capitalize(searchName);
                whereElements.push( " ((LastName LIKE '%" + name + "%') OR (LastName LIKE '%" + searchName + "%')) " );
            }
            if ( me.studentFirstNameSearchTextField.getValue() !== '' ) {
                var searchName = me.studentFirstNameSearchTextField.getValue().replaceAll("'", "\\'");
                var name = Ext.String.capitalize(searchName);
                whereElements.push( " ((FirstName LIKE '%" + name + "%') OR (FirstName LIKE '%" + searchName + "%')) " );
            }
            if ( me.studentStatusSearchCombo.getValue().length > 0 ) {
                var statuses = me.studentStatusSearchCombo.getValue();
                var includesINStatus = false;
                var statusInClause = " IN (";
                for ( var s = 0; s < statuses.length; s++ ) {
                    if ( statuses[s] == 'IN' ) {
                        includesINStatus = true;
                    } else {
                        statusInClause += ( statusInClause==" IN ("? "'"+statuses[s]+"'" : ",'"+statuses[s]+"'" );
                    }
                }
                statusInClause = (statusInClause==" IN (")? "": statusInClause;
                statusInClause = (includesINStatus? ( Ext.isEmpty(statusInClause)? " (Status__c = 'IN' AND OtherEmail__c != null) ": " (Status__c"+statusInClause+") OR (Status__c = 'IN' AND OtherEmail__c != null)) ") : " Status__c"+statusInClause+") ");
                whereElements.push( " " + statusInClause  );
            }

            var WHERE = "WHERE RecordType.DeveloperName IN ('StudentRecord','ProspectRecord') ";
            for( var i =0; i< whereElements.length; i++ ) {
                WHERE += " AND " + whereElements[i];
            }

            me.searchGrid.getView().setLoading('Searching...');
            $soap.batchSize = 500;
            var studentQueryString = "SELECT " + me.contactQueryFields + ", (Select  Type__c,  Term__c,  StudentContact__c, StudentContact__r.Status__c, StudentContact__r.StudentRiskScore__c, Status__c,  StartDate__c,  RequirementsReferred__c,  RequirementsEngaged__c,  RequirementsEngagedPreassessment__c,  RequirementsCompleted__c,  Name,  MentorVerifiedEngagementNotedDate__c,  MentorVerifiedEngagementNotedBy__c,  MentorVerifiedCurrentEngagement__c,  Id,  FullCourseTitle__c,  EndDate__c,  CourseCode__c,  CompositeKey__c,  CompetencyUnits__c,  Attempts__c  From StudentAcademicCourses__r   where   ActiveCurrentTermCourse__c = true  order by CourseCode__c asc )  " + " FROM Contact " + WHERE;
           //1-1-14 data type change
  
            //"SELECT " + me.contactQueryFields + ", (SELECT StudentCourseRegistration__r.WGUCourse__c, StudentCourseRegistration__r.WGUCourse__r.Title__c,  StudentCourseRegistration__c, StudentCourseRegistration__r.Name , Completed__c, WGUCourseVersion__c,WGUCourseVersion__r.name   From StudentCourseVersions__r where (StudentCourseRegistration__c !=null and StudentCourseRegistration__r.Name!= '')OR (ActiveCurrentTermCourse__c = true and WGUCourseVersion__c != null) order by StudentCourseRegistration__r.Name asc )  " + " FROM Contact " + WHERE;
            $soap.query( studentQueryString, function(queryResult) {
                try {
                    queryResult.size *= 1;
                    queryResult.done = (queryResult.done == "true");
                    me.exportAllSearchStudentsToCSVButton.setDisabled( queryResult.size == 0 );
                    var studentResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
                    if ( queryResult.size > $soap.batchSize ) {
                        Ext.Msg.show({
                                    title:'Please Narrow Search Criteria',
                                    msg: 'Your search criteria located '+Ext.util.Format.number(queryResult.size,"0,000")+' student records. Only a partial result will be displayed ['+studentResultSet.length+' records].<br><br>If the student you are seeking is not found in the results, please enter more specific search criteria and try again.',
                                    buttons: Ext.Msg.OK,
                                    icon: Ext.Msg.INFO
                                }
                        );
                    }

                    for ( var r = 0; r < studentResultSet.length ; r++ ) {
                        var studentRecord = studentResultSet[r];
                        studentRecord.NameLastFirst = studentRecord.LastName + ", " + studentRecord.FirstName;
                        studentRecord.CoursesList  = '';
                        //studentRecord.ActiveCoursesNotComplete = '';
                        studentRecord.Mentor__r = studentRecord.Mentor__r==null? { "Phone":null, "Email": null, "Name":null}: studentRecord.Mentor__r;
                        if ( !Ext.Array.contains( contactIds, studentRecord.Id ) && (studentUserStore.count() > 0? studentUserStore.findExact('Id',studentRecord.Id) == -1: true) ) {
                            contactIds.push( studentRecord.Id );
                        }
                        //risk factor : student search default part
                        if(studentRecord.StudentRiskScore__c!=null)// && Ext.Array.contains(riskCourses, roster.BannerCourseCode__c) ) 
                        {   studentRecord.HasRiskData=true;
                            studentRecord.StudentAction=studentRecord.StudentRiskScore__c; 
                            studentRecord.StudentAnalyticMessage=studentRecord.StudentAnalyticMessage__c;
                        }else
                        {   studentRecord.HasRiskData=false;
                            studentRecord.StudentAction=0; 
                            studentRecord.StudentAnalyticMessage='';
                        }
                         
                        //SFMENTOR-482: course list with 2 colors
                        var courseMap={};
                        var passed="";
                        var nonpassed="";
                        var studentCourses = studentRecord.StudentAcademicCourses__r == null? []: ( !Ext.isArray(studentRecord.StudentAcademicCourses__r.records)? [studentRecord.StudentAcademicCourses__r.records]: studentRecord.StudentAcademicCourses__r.records );
                        for( var courseIndex = 0; courseIndex < studentCourses.length; courseIndex++ ) {
                            var courseRecord = studentCourses[courseIndex];
                            //1/1/14 course data type change
                            var colorCourse= courseRecord.CourseCode__c;//(courseRecord.StudentCourseRegistration__r == null ? courseRecord.WGUCourseVersion__r.Name : courseRecord.StudentCourseRegistration__r.Name); 
                            if(courseMap[colorCourse]!=null)
                            {
                                courseMap[colorCourse]=(courseMap[colorCourse]=='true'||courseRecord.Status__c == 'Passed');
                            }else
                            {
                                courseMap[colorCourse]= (courseRecord.Status__c == 'Passed');
                            }
                           
                        } 
                        var keys=Object.keys(courseMap);
                        for(var i=0;i<keys.length;i++)
                        { 
                            var key=keys[i];
                            if(courseMap[key]==true)
                            {
                                passed+= (passed=="")? key: ","+key;
                            }else
                            {
                                nonpassed+= (nonpassed=="")? key: ","+key;
                            } 
                        }
                        studentRecord.CoursesList = (nonpassed==""&&passed==""? 'No Enrollments':  "<font color='#89A537'>"+ nonpassed  +"</font>" +  (nonpassed!=""&&passed!=""? "," : "" ) +"<font color='#2356AD'>" +passed+"</font>"); 

                    }

                    searchResultsStore.loadRawData(studentResultSet, false);
                    if ( contactIds.length > 0 ) {
                        setTimeout( function(){me.getStudentPhotos(contactIds)}, 100 );
                    }
                    if ( searchResultsStore.count() > 0 ) {
                        searchResultsStore.sort('NameLastFirst', 'ASC');
                        if ( selectedRecord ) {
                            var rowIndex = searchResultsStore.findExact('Id', selectedRecord.data.Id);
                            if ( rowIndex != -1 ) {
                                me.searchGrid.getSelectionModel().select(rowIndex);
                                setTimeout( function() {me.searchGrid.getView().focusRow(selectedRecord)},  500);
                            } else {
                                me.resetStudentPropertiesView(false);
                            }
                        }
                        var statusText = searchResultsStore.count()>1? ' students located': ' student located';
                        setTimeout( function(){ me.searchGridStatusBarText.setText( searchResultsStore.count() + statusText ); }, 5);
                    } else {
                        me.resetStudentPropertiesView(false);
                        setTimeout( function(){ me.searchGridStatusBarText.setText('No students found matching this criteria'); }, 5);
                    }
                } finally {
                    me.searchGrid.getView().setLoading(false);
                }

            });

        }



    },

    onClearSearchFieldsButtonClick: function() {
        var me = Ext.getCmp('WGUpanel');
        me.studentIdSearchTextField.setValue('');
        me.studentLastNameSearchTextField.setValue('');
        me.studentFirstNameSearchTextField.setValue('');
        me.courseListSearchCombo.setValue([]);
        me.studentStatusSearchCombo.setValue(['AS','TB']);
        me.searchButton.setDisabled(true);
        setTimeout( function() { me.searchGridStatusBarText.setText(''); }, 5);
        setTimeout( function() { me.studentIdSearchTextField.focus() }, 100);
    },

    onSearchCriteriaChange: function(field, fieldValue, e) {
        var me = Ext.getCmp('WGUpanel');
        if ( !Ext.isEmpty(me.studentIdSearchTextField.getValue()) || !Ext.isEmpty(me.studentLastNameSearchTextField.getValue()) || !Ext.isEmpty(me.courseListSearchCombo.getValue()) || !Ext.isEmpty(me.studentStatusSearchCombo.getValue()) ) {
            me.searchButton.setDisabled(false);
        } else {
            me.searchButton.setDisabled(true);
        }

        if ( !Ext.isEmpty(fieldValue) && (field.getId() == me.studentIdSearchTextField.getId() || field.getId() == me.studentLastNameSearchTextField.getId() || field.getId() == me.studentFirstNameSearchTextField.getId() ) &&  e.keyCode == 13 ) {
            me.onDoStudentSearchButtonClick();
        }
    },

    onCourseGridFilter: function(field, fieldValue, e){
        var me = Ext.getCmp('WGUpanel');
        me.resetStudentPropertiesView();
        var courseValue = me.mentorCourseListFilterCombo.getValue();
        var courseNumber = !Ext.isEmpty(courseValue) && courseValue.indexOf(" - ") != -1 ? courseValue.split(" - ")[0]: courseValue;
        var roster = !Ext.isEmpty(courseValue) ? me.getRosterFromCourseNumber(courseNumber): null;
        var rosterSize = (!Ext.isEmpty(courseNumber) && roster && roster.contactids && roster.contactids.length)? roster.contactids.length: 0;

        if ( coursesGridStore && rosterSize > 0 ) {

            var grid = me.coursesGrid;
            var selected = grid.getView().getSelectionModel().getSelection();
            grid.getView().getSelectionModel().deselectAll(true);
            grid.getView().setLoading( rosterSize > 1000? 'Filtering...': false );
            me.courseGridStatusBarText.setText( 'Filtering...' );
            setTimeout( function(){
                try {
                 
                    var nameFilter = !Ext.isEmpty(me.courseStudentNameFilterTextField.getValue());
                    var idFilter = !Ext.isEmpty(me.courseStudentIdFilterTextField.getValue());
                    var degreeFilter = !Ext.isEmpty(me.courseStudentDegreeProgramFilterCombo.getValue());
                    var statusFilter = me.courseStudentStatusFilterCombo.getValue() !== "All";
                    var completionFilter = me.courseCompletionStatusFilterCombo.getValue() !== "All";

                    coursesGridStore.filterBy( function(record) {
                        return  (degreeFilter? record.get('ProgramCode__c') == me.courseStudentDegreeProgramFilterCombo.getValue(): true) &&
                                (nameFilter? record.get('NameLastFirst').toLowerCase().indexOf( me.courseStudentNameFilterTextField.getValue().toLowerCase()) != -1: true) &&
                                (idFilter? record.get('StudentID__c').indexOf( me.courseStudentIdFilterTextField.getValue()) != -1: true) &&
                                (statusFilter? record.get('Status__c') == me.courseStudentStatusFilterCombo.getValue() : true) &&
                                (completionFilter? (me.courseCompletionStatusFilterCombo.getValue()=='NotPassed'? record.get('CourseCompleted')==false: record.get('CourseCompleted')==true ) : true);
                    }, me);
                } finally {
                    grid.getView().setLoading(false);
                    if ( selected && selected[0] ) {
                        if ( coursesGridStore.findExact( 'Id', selected[0].data.Id ) != -1 ) {
                            grid.getView().getSelectionModel().select( selected, false, false );
                            grid.getView().focusRow(selected[0]);
                        }
                    }
                    Ext.callback( function(){
                        grid.doLayout();
                        grid.getView().setLoading(false);
                        grid.getView().refresh();
                        if ( (coursesGridStore.count() > 0 || rosterSize > 0) && !Ext.isEmpty(me.mentorCourseListFilterCombo.getValue()) ) {
                            me.courseGridStatusBarText.setText( 'Showing '+coursesGridStore.count()+' of '+rosterSize+' students enrolled' );
                        }
                    }, window, null, 1);
                }
            }, 200);

        }

    },
    onStudentsGridFilter: function(field, fieldValue, e){
        var me = Ext.getCmp('WGUpanel');
        me.resetStudentPropertiesView();
        if ( studentsStore && studentsStore.getProxy().getReader().jsonData && studentsStore.getProxy().getReader().jsonData.length > 0 ) {

            var grid = me.studentsGrid;
            var selected = grid.getView().getSelectionModel().getSelection();
            grid.getView().getSelectionModel().deselectAll(true);
            try {

                var courseFilter = me.studentCourseListFilterCombo.getValue() !== null && me.studentCourseListFilterCombo.getValue() !== "";
                var nameFilter = me.studentNameFilterTextField.getValue() !== "";
                var idFilter = me.studentIdFilterTextField.getValue() !== "";
                var degreeFilter = me.studentDegreeProgramFilterCombo.getValue() !== null && me.studentDegreeProgramFilterCombo.getValue() !== "";
                var statusFilter = me.studentStatusFilterCombo.getValue() !== "All";

                studentsStore.filterBy( function(record) {
                    return (degreeFilter? record.get('ProgramCode__c') == me.studentDegreeProgramFilterCombo.getValue(): true) &&
                            (courseFilter? record.get('CoursesList').indexOf( me.studentCourseListFilterCombo.getValue()) != -1: true) &&
                            (nameFilter? record.get('NameLastFirst').toLowerCase().indexOf( me.studentNameFilterTextField.getValue().toLowerCase()) != -1: true) &&
                            (idFilter? record.get('StudentID__c').indexOf( me.studentIdFilterTextField.getValue()) != -1: true) &&
                            (statusFilter? record.get('Status__c') == me.studentStatusFilterCombo.getValue() : true);
                }, me);
            } finally {
                var rosterSize = studentsStore.snapshot && studentsStore.snapshot.items && studentsStore.snapshot.items.length>=studentsStore.count()? studentsStore.snapshot.items.length: studentsStore.count();
                if (rosterSize > 0) {
                    Ext.callback( function(){  me.studentGridStatusBarText.setText( 'Showing '+studentsStore.count()+' of '+rosterSize+' students assigned' ); }, window, null, 1);
                }
                if ( selected && selected[0] ) {
                    if ( studentsStore.findExact( 'Id', selected[0].data.Id ) != -1 ) {
                        grid.getView().getSelectionModel().select( selected, false, false );
                        grid.getView().focusRow(selected[0]);
                    }
                }
            }


        }

    },

    setActivePanel: function(panelIndex) {
        var me = Ext.getCmp('WGUpanel');
        me.studentsGridPanel.getLayout().setActiveItem(panelIndex);
        if ( panelIndex == 0 ) {
            me.mentorSummaryPanel.show();
            if ( me.studentsGrid.getSelectionModel().getSelection().length > 0 ) {
                var record = me.studentsGrid.getSelectionModel().getSelection()[0];
                me.onStudentsGridFilter();
                me.resetStudentPropertiesView(record);
                me.studentsGrid.getView().focusRow(record);
            } else {
                me.resetStudentPropertiesView(false);
                me.onStudentsGridFilter();
            }
        } else if ( panelIndex == 1 ) {
            me.mentorSummaryPanel.hide();
            if ( me.coursesGrid.getSelectionModel().getSelection().length > 0 ) {
                var record = me.coursesGrid.getSelectionModel().getSelection()[0];
                me.onCourseGridFilter();
                me.resetStudentPropertiesView(record);
                me.coursesGrid.getView().focusRow(record);
            } else {
                me.resetStudentPropertiesView(false);
                me.onCourseGridFilter();
            }
        } else if ( panelIndex == 2 ) {
            me.mentorSummaryPanel.hide();
            if ( me.searchGrid.getSelectionModel().getSelection().length > 0 ) {
                var record = me.searchGrid.getSelectionModel().getSelection()[0];
                me.resetStudentPropertiesView(record);
                me.searchGrid.getView().focusRow(record);
            } else {
                me.resetStudentPropertiesView(false);
            }
        }
    },

    setMentorRoleRadioEnable: function() {
        var me = Ext.getCmp('WGUpanel');
        me.myStudentsViewRadio.setDisabled( !studentsStore || !studentsStore.count() || studentsStore.count() == 0 );
        me.myCoursesViewRadio.setDisabled( !me.courseRosters || !me.courseRosters.length || me.courseRosters.length == 0);
    },
	onClickStudentAnalyticTab: function(){
					var me = Ext.getCmp('WGUpanel');
					//edit 4-3-14 student analytic 
            		var grid = me.studentsGridPanel.getLayout().getActiveItem();
                    var selected = grid.getView().getSelectionModel().getSelection()[0];
                    //4-3-14 load student analytic into studentAnalyticStore 
		            var result = sforce.connection.query("select Id, Name, CreatedDate, Student__c, CoursesForGraduation__c,CoursesOTP__c,HighRiskDropAlert__c,MentorSuggestion__c,PIDM__c,RiskFactor__c from StudentAnalytics__c where PIDM__c = \'"+selected.get('PIDM__c')+"\' order by createddate desc limit 10");
		            
		            result = !Ext.isArray(result.records)? (result.size>0?[result.records]:[]): result.records;
		            
		            //Loop through the returned records and add them to the data model
		            var newModels = [];
		            for ( var x=0; x < result.length; x++ ) 
		            {
		                var thisRecord = result[x];
		                var newRecord = Ext.create('StudentAnalyticModel');        
		                
		                newRecord.set( 'Id', thisRecord.Id );
		                newRecord.set( 'CreatedDate', thisRecord.CreatedDate );
		                newRecord.set( 'Student__c', thisRecord.Student__c  );
		                newRecord.set( 'CoursesForGraduation__c', thisRecord.CoursesForGraduation__c ); 
		                newRecord.set( 'CoursesOTP__c', thisRecord.CoursesOTP__c ); 
		                newRecord.set( 'HighRiskDropAlert__c', thisRecord.HighRiskDropAlert__c ); 
		                newRecord.set( 'StudentAnalyticMessage', thisRecord.MentorSuggestion__c ); 
		                newRecord.set( 'StudentAction', thisRecord.RiskFactor__c ); 
		                newRecord.set( 'HasRiskData', true ); 
		                newRecord.set( 'PIDM__c', thisRecord.PIDM__c );    
		          
		                newModels[x] = newRecord;
		            }
		            
		            //Load the data in to the data store
		            studentAnalyticStore.removeAll();
		            studentAnalyticStore.loadData( newModels, true );
	
	},
    onStudentPropertiesPanelTabChange: function(tabPanel, newCard, oldCard, eOpts) {
        var me = Ext.getCmp('WGUpanel');
        if ( tabPanel ) {
            if ( newCard.getId() == "StudentCoursesTab" ) {
            } else if ( newCard.getId() == "NotesTab" ) {
                if ( me.studentNoteView.studentId != me.studentIdField.getValue() ) {
                    var grid = me.studentsGridPanel.getLayout().getActiveItem();
                    var selected = grid.getView().getSelectionModel().getSelection()[0];
                    Ext.callback( me.studentNoteView.setStudentRecord, window, [selected], 0 );
                }
            }else  if ( newCard.getId() == "AnalyticTab" ) { 
            	me.onClickStudentAnalyticTab();
            }
        }
    },
    //radio button clicked.
    onViewRadioChange: function(field, newValue, oldValue, options) {
        var me = Ext.getCmp('WGUpanel');
        if ( newValue && 'MyStudentsViewRadio' == field.getId() ) {
            me.setActivePanel(0);
            me.studentGridStatusBarText.setText('');
        } else if ( newValue && 'MyCoursesViewRadio' == field.getId() ) {
            me.setActivePanel(1);
            me.courseGridStatusBarText.setText('');
            var combo = me.mentorCourseListFilterCombo;
            //SFMENTOR-478 if course roster not loaded yet or cleared
            if(me.courseRosters==null||me.courseRosters.length==0)
            {
                Ext.callback( function() {me.getCourseAssignmentAndStudentData( me.mentorListCombo.getValue());}, window, null, 0);
            }
        } else if ( newValue && 'SearchViewRadio' == field.getId() ) {
            me.setActivePanel(2);
            me.studentsGridPanel.getLayout().getActiveItem().getView().setLoading(false);
            setTimeout( function() { me.studentIdSearchTextField.focus() }, 50 );
            setTimeout( function(){ me.onRefreshCourseSearchStore() }, 100);
            setTimeout( function() {
                me.searchGridStatusBarText.setText('Enter values in one or more criteria fields above and click [Search]');
            }, 5000);
        }
    },

    onMentorsComboBlur: function(field) {
        setTimeout( function() {
            if ( field.getValue() ) {
                var record = mentorStore.findRecord('UserId', field.getValue() );
                if ( record && record.data && record.data.NameLastFirst ) {
                    field.setRawValue( record.data.NameLastFirst );
                }
            }
        }, 1);
    },

    //select a mentor from drop down menu
    onMentorsComboChange: function(field, newValue, oldValue, options) {
        var me = Ext.getCmp('WGUpanel');
        if ( !Ext.isEmpty(newValue) && newValue.length == 18 && newValue.substr(0,3) == "005" ) { //user id key prefix is '005'
            me.onClearStudentFiltersButtonClick();
            me.onClearCourseFiltersButtonClick();
            me.onClearSearchFieldsButtonClick();
            searchResultsStore.loadRawData([],false);
            //Load the student and Course data for the new mentor's UserId
            thisMentorRecord = mentorStore.findRecord("UserId", newValue );
            thisMentorRecord = thisMentorRecord==null? {Id:null,NameLastFirst:thisUser.LastName+", "+thisUser.FirstName,Name:thisUser.FirstName+" "+thisUser.LastName,CanSelectOtherMentorsinMyStudents__c:false}: thisMentorRecord;
            var photo = me.mentorPhoto;
            if ( thisMentorRecord.data && thisMentorRecord.data.SmallPhotoUrl ) {
                photo.setSrc(thisMentorRecord.data.SmallPhotoUrl);
                photo.getEl().setStyle('border','1px solid lightgray');
            } else if (thisUser && thisUser.Id == newValue && thisUser.SmallPhotoUrl) {
                photo.setSrc(thisUser.SmallPhotoUrl);
                photo.getEl().setStyle('border','1px solid lightgray');
            } else {
                photo.setSrc(Ext.BLANK_IMAGE_URL);
                photo.getEl().setStyle('border','none');
            }
            me.mentorNameField.setValue(thisMentorRecord.data? thisMentorRecord.data.Name :'No Mentor Record Found');
            me.mentorRoleField.setValue(thisMentorRecord.data? thisMentorRecord.data.MentorRole__c :'No Mentor Record Found');
            me.mentorAssignedCollegeField.setValue(thisMentorRecord.data? thisMentorRecord.data.AssignedCollege__c :'No Mentor Record Found');

            setTimeout( function() { me.mentorFullNameField.setValue( thisMentorRecord.data.Name ); }, 50);
            setTimeout( function() { me.getStudentAndCourseData( newValue ); }, 500);
        }
    },

    onRefreshStudentsButtonClick: function() {
        var me = Ext.getCmp('WGUpanel');
        var mentorComboValue = me.mentorListCombo.getValue();
        var mentorId = mentorComboValue && mentorComboValue.startsWith('005')? mentorComboValue: thisUser.Id;
        me.getStudentAndCourseData(mentorId, true);
    },

    onRefreshRosterButtonClick: function() {
        var me = Ext.getCmp('WGUpanel');

        coursesGridStore.loadData([]);
        var courseValue = me.mentorCourseListFilterCombo.getValue();
        var courseNumber = !Ext.isEmpty(courseValue) && courseValue.indexOf(" - ")? courseValue.split(" - ")[0]: courseValue;
        var roster = me.getRosterFromCourseNumber(courseNumber);
        me.courseGridStatusBarText.setText( 'Refreshing Roster for ' + courseNumber +'...' );

        var loadingMask;
        if ( courseNumber !== '' ) {
            loadingMask = new Ext.LoadMask(me.coursesGrid.getView(), {id:"LoadingMask"+courseNumber, msg:'Refreshing Roster for ' + courseNumber +'...'});
            loadingMask.show();
        }

        roster.studentCoursesStore.loadRawData([], false);
        roster.contactids = [];
        roster.records = null;
        roster.dups = 0;
        roster.done = false;
        setTimeout( function(){
            Ext.callback( me.loadCourseGrid, me, [courseNumber,loadingMask], 100 );
        }, 1);
    },

    onClearCourseFiltersButtonClick: function() {
        var me = Ext.getCmp('WGUpanel');
        me.resetStudentPropertiesView();
        var courseValue = me.mentorCourseListFilterCombo.getValue();
        var courseNumber = courseValue!=null && courseValue!="" && courseValue.indexOf(" - ") != -1 ? courseValue.split(" - ")[0]: courseValue;
        var roster = !Ext.isEmpty(courseNumber)? me.getRosterFromCourseNumber(courseNumber): null;
        var rosterSize = (courseNumber!=="" && roster && roster.Enrollment)? roster.Enrollment: 0;
        var grid = me.coursesGrid;
        var store = grid.getStore();
        var clearingMask;
        clearingMask = new Ext.LoadMask(grid.getView(), {msg:'Clearing all Roster Filters...'});
        if ( grid.getStore().count() > 0 || ( store && store.snapshot && store.snapshot.items && store.snapshot.items.length > 0 ) ) {
            clearingMask.show();
        }
        Ext.callback( function(grid,store,clearingMask) {
            var selected = grid.getView().getSelectionModel().getSelection();
            grid.getView().getSelectionModel().deselectAll(true);
            try { 
                me.courseStudentDegreeProgramFilterCombo.setValue('');
                me.courseStudentNameFilterTextField.setValue('');
                me.courseStudentIdFilterTextField.setValue('');
                me.courseStudentStatusFilterCombo.setValue('All');
                me.courseCompletionStatusFilterCombo.setValue('NotPassed');
                if ( grid.filters ) {
                    grid.filters.clearFilters();
                }

                me.onCourseGridFilter();

                var nameLastFirstColumn;
                for ( var i = 0; i < grid.columns.length; i++ ) {
                    grid.columns[i].setSortState(null);
                    if ( grid.columns[i].dataIndex && grid.columns[i].dataIndex == 'NameLastFirst' ) {
                        nameLastFirstColumn = grid.columns[i];
                    }
                }
                if ( store.count() > 1 ) {
                    store.sort('NameLastFirst','ASC');
                }
                nameLastFirstColumn.setSortState(null);
                nameLastFirstColumn.setSortState('ASC');
            } finally {
                if ( selected && selected[0] ) {
                    grid.getView().getSelectionModel().select(selected, false, false);
                    grid.getView().focusRow(selected[0]);
                }
                clearingMask.hide();
                Ext.destroy( clearingMask );
                delete clearingMask;
            }

        }, me, [grid,store,clearingMask], 50 );

    },

    onClearStudentFiltersButtonClick: function() {
        var me = Ext.getCmp('WGUpanel');
        me.resetStudentPropertiesView();
        var grid = me.studentsGrid;
        var store = grid.getStore();
        var clearingMask;
        clearingMask = new Ext.LoadMask(grid.getView(), {msg:'Clearing all Student Filters...'});
        if ( grid.getStore().count() > 0 || ( store && store.snapshot && store.snapshot.items && store.snapshot.items.length > 0 ) ) {
            clearingMask.show();
        }
        Ext.callback( function(grid,store,clearingMask) {
            var selected = grid.getView().getSelectionModel().getSelection();
            grid.getView().getSelectionModel().deselectAll(true);
            try {
                me.studentDegreeProgramFilterCombo.setValue('');
                me.studentNameFilterTextField.setValue('');
                me.studentIdFilterTextField.setValue('');
                me.studentCourseListFilterCombo.setValue('');
                me.studentStatusFilterCombo.setValue('All');
                if ( grid.filters ) {
                    grid.filters.clearFilters();
                }
                store.filterBy( function(record) {
                    return true;
                }, me);

                var nameLastFirstColumn;
                for ( var i = 0; i < grid.columns.length; i++ ) {
                    grid.columns[i].setSortState(null);
                    if ( grid.columns[i].dataIndex && grid.columns[i].dataIndex == 'NameLastFirst' ) {
                        nameLastFirstColumn = grid.columns[i];
                    }
                }
                if ( store.count() > 1 ) {
                    store.sort('NameLastFirst','ASC');
                }
                nameLastFirstColumn.setSortState(null);
                nameLastFirstColumn.setSortState('ASC');
            } finally {
                var rosterSize = studentsStore.snapshot && studentsStore.snapshot.items && studentsStore.snapshot.items.length>=studentsStore.count()? studentsStore.snapshot.items.length: studentsStore.count();
                if (rosterSize > 0) {
                    setTimeout( function(){  me.studentGridStatusBarText.setText( 'Showing '+studentsStore.count()+' of '+rosterSize+' students assigned' ); }, 500);
                }
                if ( selected && selected[0] ) {
                    grid.getView().getSelectionModel().select(selected, false, false);
                    grid.getView().focusRow(selected[0]);
                }
                clearingMask.hide();
                Ext.destroy( clearingMask );
                delete clearingMask;
            }
        }, me, [grid,store,clearingMask], 50 );
    },

    onStudentGridviewItemDblClick: function(grid, record, item, index, e, eOpts) {
        var me = Ext.getCmp('WGUpanel');
        if ( $sconsole ) {
            $sconsole.openPrimaryTab( null, '/'+record.get('Id'), true, record.get('NameLastFirst'), function(){}, record.get('NameLastFirst') );
        } else {
            window.open('/'+record.get('Id'), record.get('Id') );
            window.focus();
        };
    },

    resetStudentPropertiesView: function(record) {
        var me = Ext.getCmp('WGUpanel');
        var activeGridId = me.studentsGridPanel.getLayout().getActiveItem().getId();
        if ( record )  {
            if ( me.studentCoursesTab.isDisabled() ) {
                me.studentCoursesTab.setDisabled(false);
            }
            if ( me.notesTab.isDisabled() ) {
                me.notesTab.setDisabled(false);
            }
            
            if ( me.AnalyticTab.isDisabled() ) {
                me.AnalyticTab.setDisabled(false);
            } 
            
            if ( me.studentPropertiesPanel.getActiveTab().id == "NotesTab" ) {
                if ( record.data.StudentID__c !== me.studentNoteView.studentId ) {
                    me.studentNoteView.setStudentRecord( record );
                }
            } else if ( me.studentPropertiesPanel.getActiveTab().id == "StudentCoursesTab" ) {
                //TODO
            } else if ( me.studentPropertiesPanel.getActiveTab().id == "AnalyticTab" ) {
                 me.onClickStudentAnalyticTab();
            }

            var email = !Ext.isEmpty(record.get('WGUEmail__c'))? record.get('WGUEmail__c'): record.get('Email');
            var link;
            if ( record.data.ComposeEmailLink__c ) {
                var link = record.get("ComposeEmailLink__c").split('href')[1].split('\"')[1];
            }
            var phone = !Ext.isEmpty(record.get('Phone'))? record.get('Phone'): record.get('HomePhone');
            var nameHTML;
            //set Student Name Links in Student Properties Panel Title Bar
            if ( $sconsole ) {
                var tdAttr = 'data-qwidth="'+record.get('Name').length*14+'" data-qtip="Open tab for '+record.get('Name')+'" ';
                var nameHTML = "<a "+tdAttr+" style='text-decoration:none;' id='StudentNameTitle-"+record.get('Id')+"' href='#' onclick='$sconsole.openPrimaryTab( null, \"/"+record.get('Id')+"\", true, \""+record.get('NameLastFirst').replaceAll("\'","&#39")+"\", function(){}, \""+record.get('NameLastFirst').replaceAll("\'","&#39")+"\" );return false;'>" + record.get('NameLastFirst') + "</a>";
            } else {
                var tdAttr = 'data-qwidth="'+record.get('Name').length*16+'" data-qtip="Open student record for '+record.get('Name')+'" ';
                var nameHTML = "<a "+tdAttr+" style='text-decoration:none;' id='StudentNameTitle-" + record.get('Id') + "' href='#' onclick='window.open(\"/"+record.get('Id')+"\", \""+record.get('Id')+"\" );window.focus();return false;'>" + record.get('NameLastFirst') + "</a>";
            }
             
            // student property panel : name, email, phone plus last login date
            var lastLogin = !Ext.isEmpty(record.get('LastPortalLogin__c')) ?record.get('LastPortalLogin__c').toDateString():"";
            var titleText = nameHTML+"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a style='text-decoration:none;' href='"+ (link?link: "mailto:"+email)+"' target='QEmail"+record.data.Id+"'>"+email+"</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+ (phone!="No MA Phone Found"? "<a style='text-decoration:none;' href='tel:"+phone+"'>"+phone+"</a>":"No Phone")                   + (lastLogin!=""? "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Last time login:  "+lastLogin :"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No Login Record");
            me.studentPropertiesPanel.setTitle( titleText );

            var studentUser = studentUserStore.findRecord('ContactId',record.data.Id);
            var photo = me.studentPhoto;
            if ( studentUser && studentUser.data && studentUser.data.SmallPhotoUrl ) {
                photo.setSrc(studentUser.data.SmallPhotoUrl);
                photo.getEl().setStyle('border','1px solid lightgray');
            } else {
                photo.setSrc(Ext.BLANK_IMAGE_URL);
                photo.getEl().setStyle('border','none');
            }
            me.studentIdField.setValue(record.get('StudentID__c'));
            me.programStartDateField.setValue(record.get('FAADate__c')!=""?Ext.util.Format.date( record.get('FAADate__c'), 'm/d/Y' ):'' );
            me.currentTermField.setValue(record.get('CurrentTerm__c'));
            me.plannedGraduationDateField.setValue( record.data.StudentPlannedGraduationDate__c==null||record.data.StudentPlannedGraduationDate__c==""?  "<span style='color:red;' data-qwidth='160' data-qtip='Date needs correction. Correct format is [MonthName YYYY]'>!! "+(record.raw.StudentPlannedGraduationDate__c==null?'Not Set':record.raw.StudentPlannedGraduationDate__c.replaceAll(' ','&nbsp;'))+"</span>" :  Ext.Date.format( record.get('StudentPlannedGraduationDate__c'), 'F Y' ) );
            me.degreeProgramNameField.setValue( record.get('ProgramName__c') + "&nbsp;&nbsp;-&nbsp;&nbsp;" + record.get('ProgramCode__c')+ "&nbsp;&nbsp;(" + record.get('ProgramCatalogTerm__c') + ")" );
            me.studentTimeZoneField.setValue(record.get('Timezone__c'));
            if ( record.get('CoursesList') === "" &&  ( activeGridId == me.coursesGrid.getId() || activeGridId == me.searchGrid.getId() ) ) {
                me.studentCourseListField.setValue('');
                //SFMENTOR-482 dye passed courses
                //edit 1/1/14
                var courseListQuery =  "Select "+ me.academicQueryFields+" From StudentAcademicCourse__c "+
                                            "   WHERE StudentContact__c = '"+record.get('Id')+"' and  ActiveCurrentTermCourse__c = true and CourseCode__c !=null order by CourseCode__c asc "; 
//"SELECT Id , Name, StudentCourseRegistration__c, StudentCourseRegistration__r.Name , Completed__c, WGUCourseVersion__c, WGUCourseVersion__r.Name From StudentCourseVersion__c WHERE Student__c = '"+record.get('Id')+"' and ((StudentCourseRegistration__c!=null and StudentCourseRegistration__r.Name !='') or (ActiveCurrentTermCourse__c = true and WGUCourseVersion__c !=null))";// GROUP BY StudentCourseRegistration__r.Name, Completed__c ";
                $soap.batchSize = 2000;
                $soap.query(courseListQuery, function(queryResult){
                    queryResult.size *= 1;
                    queryResult.done = (queryResult.done == "true");
                    if ( queryResult.size > 0 ) {
                        var coursesList = ''; 
                        var resultset = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
                        var courseMap = {};
                        var passed="";
                        var nonpassed="";
                        for ( var c=0; c < resultset.length; c++ ) {
                            //SFMENTOR-482 dye  passed courses
                            var colorCourse= resultset[c].CourseCode__c;// (resultset[c].StudentCourseRegistration__r ==null? resultset[c].WGUCourseVersion__r.Name : resultset[c].StudentCourseRegistration__r.Name) ;
                         
                            if(courseMap[colorCourse]!=null)
                            {
                                courseMap[colorCourse]=(courseMap[colorCourse]=='true'||resultset[c].Status__c == 'Passed');
                            }else
                            {
                                courseMap[colorCourse]= resultset[c].Status__c == 'Passed';
                            }
                           
                        } 
                        var keys=Object.keys(courseMap);
                        for(var i=0;i<keys.length;i++)
                        { 
                            var key=keys[i];
                            if(courseMap[key]==true)
                            {
                                passed+= (passed=="")? key: ","+key;
                            }else
                            {
                                nonpassed+= (nonpassed=="")? key: ","+key;
                            } 
                        }
                        coursesList = (nonpassed==""&&passed==""? 'No Enrollments':  "<font color='#89A537'>"+ nonpassed  +"</font>" +  (nonpassed!=""&&passed!=""? "," : "" ) +"<font color='#2356AD'>" +passed+"</font>"); 

                      //  coursesList = (nonpassed==""&&passed==""? 'No Enrollments':  "<font color='#89A537'>"+ nonpassed  +"</font>" +  (nonpassed!=""&&passed!=""? "," : "" ) +"<font color='#2356AD'>" +passed+"</font>"); 
                        record.set("CoursesList", coursesList);
                        me.studentCourseListField.setValue( record.get('CoursesList').replaceAll(',',', ') );
                        if ( activeGridId == me.coursesGrid.getId() ) {
                            setTimeout( function() { 
                                var courseValue = me.mentorCourseListFilterCombo.getValue();
                                var courseNumber = !Ext.isEmpty(courseValue) && courseValue.indexOf(" - ")? courseValue.split(" - ")[0]: courseValue;
                                var records = me.coursesGrid.store.data.items;
                                for ( var r=0; r<records.length; r++ ) {
                                    if ( records[r].data.Id == record.data.Id ) {
                                        records[r].data.CoursesList = coursesList; 
                                    }
                                }
                            }, 100);
                        }

                    } else {
                        record.set('CoursesList', 'No Enrollments');
                        me.studentCourseListField.setValue( record.get('CoursesList') );
                    }
                });
            } else {
                me.studentCourseListField.setValue( record.get('CoursesList').replaceAll(',',', ') );
            }
            Ext.get('StudentPropertiesPanel_header_hd-textEl').setStyle("font-size","13px");
            var mentorNameHTML;
            //set Student Mentor Name Links in Student Properties Panel
            var qtipAttr = 'data-qwidth="'+record.get('MentorName').length*14+'" data-qtip="View '+record.get('MentorName')+'\'s Profile" ';
            if ( $sconsole ) {
                mentorNameHTML = "<a "+qtipAttr+" style='text-decoration:none;' id='MentorNameProfile-"+record.get('Mentor__c')+"' href='#' onclick='$sconsole.openPrimaryTab( null, \"/"+record.get('Mentor__c')+"\", true, \""+record.get('MentorName')+"\", function(){}, \""+record.get('MentorName')+"\" );return false;'>" + record.get('MentorName') + "</a>";
            } else {
                mentorNameHTML = "<a "+qtipAttr+" style='text-decoration:none;' id='MentorNameProfile-" + record.get('Mentor__c') + "' href='#' onclick='window.open(\"/"+record.get('Mentor__c')+"\", \"Mentor_"+record.get('Mentor__c')+"\" );window.focus();return false;'>" + record.get('MentorName') + "</a>";
            }

            me.studentMentorNameField.setValue(mentorNameHTML);
            me.studentMentorEmailField.setValue(record.get('MentorEmail')!=""? "<a style='text-decoration:none;' href='mailto:"+record.get('MentorEmail')+"'>"+record.get('MentorEmail')+"</a>":"");
            me.studentMentorPhoneField.setValue(record.get('MentorPhone')!=""? "<a style='text-decoration:none;' href='tel:"+record.get('MentorPhone')+"'>"+record.get('MentorPhone').replace(/^(\d{3})(\d{3})(\d{4})$/, '$1-$2-$3')+"</a>":"");
            me.studentActionButtons.show();
            me.studentIdField.show();
            me.currentTermField.show();
            me.programStartDateField.show();
            me.plannedGraduationDateField.show();
            me.degreeProgramNameField.show();
            me.studentTimeZoneField.show();
            me.studentCourseListField.show();
            me.studentMentorNameField.show();
            me.studentMentorEmailField.show();
            me.studentMentorPhoneField.show();

            try {
                if ( Ext.isIE ) {
                    me.daysInTermChart.hide();
                    me.weeksInTermChart.hide();
                    //me.daysInTermLabel.update( "<br/><span style='color:#94AE0A'>"+record.get("DaysLeftInTerm")+"</span> of "+ record.get("TermDaysCount") + "<br/><span style='font-size:9.5px'>days left</span>" );
                    me.WeeksInTermLabel.update( "<br/><span style='color:#94AE0A'>"+record.get("WeeksLeftInTerm") +"</span> of "+ record.get("TermWeeksCount") + "<br/><span style='font-size:9.5px'>weeks left</span>");
                    //me.daysInTermLabel.show();
                    me.WeeksInTermLabel.show();
                    me.pieChartsContainer.show();
                    me.pieChartsContainer.doLayout();
                   // me.barChartsContainer.show();
                   // me.barChartsContainer.doLayout();
                } else {
                    if (  me.daysInTermChart.hidden || me.weeksInTermChart.hidden ) {
                        //me.daysInTermChart.show();
                        me.weeksInTermChart.show();
                    }
                    var today = new Date();
                    var daysData = [{"Name":"Days Left","Value":(record.get("TermEndDate__c")< today? 0: record.get("TermDaysCount")-record.get("DaysInToTerm"))},
                        {"Name":"Days Into Term","Value":(record.get("TermEndDate__c")< today? record.get("TermDaysCount"): record.get("DaysInToTerm"))}
                    ];
                    me.daysInTermChart.store.loadRawData( daysData, false );
                    var weeksData = [{"Name":"Weeks Left","Value":(record.get("TermEndDate__c")< today? 0: record.get("TermWeeksCount")-record.get("WeeksInToTerm"))},
                        {"Name":"Weeks Into Term","Value":(record.get("TermEndDate__c")< today? record.get("TermWeeksCount"): record.get("WeeksInToTerm"))}
                    ];
                    me.weeksInTermChart.store.loadRawData( weeksData, false );

                    me.pieChartsContainer.show();
                    
                    
                  /*  //risk factor
                    if(record.get("HasRiskData")==false){//record.get("StudentAction")==0&&record.get("MathRisk")==0&&record.get("EnglishRisk")==0&&record.get("WrittingRisk")==0&&record.get("TransferRisk")==0){
                        me.noRiskLabel.show(); 
                        me.riskBarChart.hide();
                    }else
                    {
                        me.noRiskLabel.hide();
                        me.riskBarChart.show();
                        if (   me.riskBarChart.hidden ) { 
                            me.riskBarChart.show(); 
                        }  
     
                        var subRiskData=[
                                           {"Name":"Relative Prior College Experience","Value":record.get("TransferRisk")},
                                           {"Name":"Writing Ability","Value":record.get("WrittingRisk")}, 
                                           {"Name":"English Ability","Value":record.get("EnglishRisk")},
                                           {"Name":"Math Ability   ","Value":record.get("MathRisk")}, 
                                           {"Name":"Overall Student Ability  ","Value":record.get("StudentAction")}
                                        ]; 
                        me.riskBarChart.store.loadRawData( subRiskData, false );
                       // me.barChartsContainer.show();
                   }
                   
                   
                    me.barChartsContainer.doLayout();*/
                    
                     
                }
            } catch(e) {
                if (Ext.isChrome) {
                    console.log('Chart Show Error');
                    console.log(e);
                }
            }

        } else {
            me.pieChartsContainer.hide();
            me.studentPropertiesPanel.setActiveTab(0);
            me.studentCoursesTab.setDisabled(true);
            me.notesTab.setDisabled(true);
            me.AnalyticTab.setDisabled(true);//AnalyticTab
            Ext.get('StudentPropertiesPanel_header_hd-textEl').setStyle("font-size","");
            me.studentPropertiesPanel.setTitle("Student Details");
            var photo = me.studentPhoto;
            photo.setSrc(Ext.BLANK_IMAGE_URL);
            photo.getEl().setStyle('border','none');
            me.studentActionButtons.hide();
            me.studentIdField.hide();
            me.currentTermField.hide();
            me.programStartDateField.hide();
            me.plannedGraduationDateField.hide();
            me.degreeProgramNameField.hide();
            me.studentTimeZoneField.hide();
            me.studentCourseListField.hide();
            me.studentMentorNameField.hide();
            me.studentMentorEmailField.hide();
            me.studentMentorPhoneField.hide();
        }
    },

    onStudentGridviewItemClick: function(grid, record, item, index, event, eOpts) {
        var me = Ext.getCmp('WGUpanel');
        me.resetStudentPropertiesView(record);
    },

    onCourseTreeGridItemDblClick: function(grid, record, item, index, event, options) {
        var me = Ext.getCmp('WGUpanel');
        me.onStudentGridviewItemDblClick(grid,record,item,index,event,options);
    },

    onStudentGridViewItemContextMenu: function(view, record, item, index, event, options) {
        var me = Ext.getCmp('WGUpanel');
        me.onCourseTreeGridViewItemContextMenu(view, record, item, index, event, options)
    },

    onCourseTreeGridViewItemContextMenu: function(view, record, item, index, event, options) {
        var me = Ext.getCmp('WGUpanel');
        event.stopEvent();
        var grid;
        if ( view.getId() == 'MyStudentsGridPanelView' ) {
            grid = me.studentsGrid;
        } else if ( view.getId() == 'MyCoursesGridPanelView' ) {
            grid = me.coursesGrid;
        } else {
            grid = me.searchGrid;
        }
        var selModel = grid.getSelectionModel();
        if (selModel instanceof Ext.selection.RowModel) {
            if (!selModel.isSelected(record)) {
                selModel.select(record);
                grid.fireEvent('itemclick', grid, record, item, index, event);
            }
        }
        var menu = Ext.create('Ext.menu.Menu',{
            items: [
                {
                    text: 'Email <span style="color:darkblue">'+record.data.Name+'</span>',
                    handler: function() {
                        if ( record.data.ComposeEmailLink__c ) {
                            var link = record.get("ComposeEmailLink__c").split('href')[1].split('\"')[1];
                            window.open( link, 'QEmail'+record.data.Id);
                            window.focus();
                        }
                        return false;
                    }
                },
                {
                    text: 'View Degree Plan for <span style="color:darkblue">'+record.data.Name+'</span>',
                    handler: function() {
                        if ( record.data.PIDM__c ) {
                            if ( boxName == 'prod' || boxName == 'train' || orgName == 'train') {
		                                    window.open("https://webapp18.wgu.edu/fdp/for/"+record.data.PIDM__c, 'FDP'+record.data.Id);
		                     } else if(boxName=='qafull') {
		                                     window.open("https://l1webapp18.wgu.edu/fdp/for/"+record.data.PIDM__c, 'FDP'+record.data.Id);
		                     } else if(boxName=='devfull') {
		                                     window.open("https://l2webapp18.wgu.edu/fdp/for/"+record.data.PIDM__c, 'FDP'+record.data.Id);
		                     }

                        }
                    }
                },
                {
                    text: 'Notes',
                    itemId: 'SelectionGridMenuDefaultNoteMenuItem',
                    handler: function() {
                        if ( record.data.Id ) {
                            window.open('/apex/Notes?contactId='+record.data.Id, 'Notes'+record.data.Id);
                        }
                    },
                    menu: {
                        items: [
                            {
                                text: 'Add New Note for <span style="color:darkblue">'+record.data.Name+'</span>',
                                hidden: false,
                                itemId: 'SelectionGridMenuNewNoteSubMenuItem',
                                handler: WGU.onHandleNoteMenuClick,
                                menu: WGU.WGUStudentNoteMenuArray
                            },
                            {
                                text: 'Go to Notes for <span style="color:darkblue">'+record.data.Name+'</span>',
                                tooltip: 'Open Student Notes for <span style="color:darkblue">'+record.data.Name+'</span> in new window',
                                itemId: 'SelectionGridMenuOpenNotesMenuItem',
                                handler: function() {
                                    var grid = me.studentsGridPanel.getLayout().getActiveItem();
                                    var selected = grid.getView().getSelectionModel().getSelection()[0];
                                    if ( selected.data.Id ) {
                                        window.open('/apex/Notes?contactId='+selected.data.Id, 'Notes'+selected.data.Id);
                                    }
                                    return false;
                                }
                            },
                            {
                                text: 'Go to Talisma Notes for <span style="color:darkblue">'+record.data.Name+'</span>',
                                tooltip: 'Open Legacy Notes (Talisma) in a new window',
                                itemId: 'SelectionGridMenuTalisamNotesSubMenuItem',
                                handler: function(){
                                    talismaWindow = window.open(WGU.talismaLinkBaseUrl+record.data.PIDM__c, "Talisma_"+record.data.PIDM__c, "location=1,status=1,scrollbars=1,width=800,height=600");
                                    talismaWindow.moveTo(0, 0);
                                }
                            }
                        ]
                    }

                },
                {
                    text: 'Email All Students',
                    hidden: true,
                    handler: function() {
                        if ( record.data.WGUEmail__c ) {
                            Ext.MessageBox.show({
                                title:'Under Construction...',
                                msg: 'This feature has yet to be implemented.',
                                buttons: Ext.Msg.OK,
                                icon: Ext.Msg.INFO
                            });
                        }
                    }
                },
                {
                    text: 'Export',
                    handler: function() {
                        var csv = me.ConvertRecordToCSV(grid.store.data.items);
                        var dialog = Ext.create('WGU.dialog.CopyRecordDialog');
                        dialog.setText(csv);
                        dialog.setWidth(me.getWidth()>640? me.getWidth()/3: 640);
                        dialog.show();
                    },
                    menu: [
                        {
                            text: 'Export <span style="color:darkblue">'+record.data.Name+"\'s</span> Data to CSV",
                            handler: function() {
                                var csv = me.ConvertRecordToCSV(record);
                                var dialog = Ext.create('WGU.dialog.CopyRecordDialog');
                                dialog.setText(csv);
                                dialog.setWidth(me.getWidth()>640? me.getWidth()/3: 640);
                                dialog.show();
                            }
                        },
                        {
                            text: 'Export Columns Data to CSV',
                            handler: function() {
                                var csv = me.ConvertGridToCSV(grid.store.data.items);
                                var dialog = Ext.create('WGU.dialog.CopyRecordDialog');
                                dialog.setText(csv);
                                dialog.setWidth(me.getWidth()>640? me.getWidth()/3: 640);
                                dialog.show();
                            }
                        },
                        {
                            text: 'Export All Grid Data to CSV',
                            handler: function() {
                                var csv = me.ConvertRecordToCSV(grid.store.data.items);
                                var dialog = Ext.create('WGU.dialog.CopyRecordDialog');
                                dialog.setText(csv);
                                dialog.setWidth(me.getWidth()>640? me.getWidth()/3: 640);
                                dialog.show();
                            }
                        }
                    ]
                }
            ]
        });
        menu.showAt(event.xy);
    },

    addMoreMentors: function( queryLocator ) {
        var me = Ext.getCmp('WGUpanel');
        $soap.batchSize = 1000;
        $soap.queryMore( queryLocator, function(queryResult) {

            queryResult.size *= 1;
            queryResult.done = (queryResult.done == "true");
            if ( queryResult.size > 0 ) {
                var mentorRecords = [];
                var mentorResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
                for ( var mentorIndex=0; mentorIndex < mentorResultSet.length; mentorIndex++ ) {
                    mentorResultSet[mentorIndex].User__r = mentorResultSet[mentorIndex].User__r==null? {Id:null,Name:null}: mentorResultSet[mentorIndex].User__r;
                    mentorResultSet[mentorIndex].NameLastFirst = mentorResultSet[mentorIndex].User__r.Name==null? mentorResultSet[mentorIndex].Name: (mentorResultSet[mentorIndex].User__r.LastName +", " + mentorResultSet[mentorIndex].User__r.FirstName);
                    if ( mentorResultSet[mentorIndex].Id !== thisMentorRecord.Id ) {
                        mentorRecords.push( mentorResultSet[mentorIndex] );
                    }
                }

                mentorStore.loadRawData(mentorRecords, true);
                if ( !queryResult.done ) {
                    setTimeout( function() { me.addMoreMentors( queryResult.queryLocator ) }, 1);
                } else {
                    Ext.callback( function() {
                        me.mentorNameField.setValue(thisMentorRecord.data? thisMentorRecord.data.Name :'No Mentor Record Found');
                        me.mentorRoleField.setValue(thisMentorRecord.data? thisMentorRecord.data.MentorRole__c :'No Mentor Record Found');
                        me.mentorAssignedCollegeField.setValue(thisMentorRecord.data? thisMentorRecord.data.AssignedCollege__c :'No Mentor Record Found');
                    }, window, null, 0);

                    if ( mentorStore.count()>1 ) {
                        mentorStore.sort('NameLastFirst','ASC');
                    }
                    //fabricate assigning the current user as the selected mentor when they are not a mentor, say an SA or Developer
                    Ext.callback( function() {
                        var combo = me.mentorListCombo;
                        if (thisMentorRecord.Id==null && combo && combo.getRawValue() == thisUser.Id ) {
                            combo.setRawValue( thisUser.LastName+", "+thisUser.FirstName );
                        }
                        me.mentorFullNameField.setValue(thisUser.FistName+" "+thisUser.LastName);
                    }, window, null, 0);
                }
            }
        });

    },
        //call by OnMentorsComboChange->getStudentAndCourseData->this
    // student mentor:
    // load students of this student mentor mentor
    // parameter: studentRecords: [], studentResultSet: contact
    // * looks like studentRecords is not in use. comment out to save space.
    addStudentsToStudentStore: function ( studentRecords, studentResultSet ) {
        var me = Ext.getCmp('WGUpanel');
        var contactIds = [];
        var records = [];

        for ( var studentIndex = 0; studentIndex < studentResultSet.length; studentIndex++ ) {

            contactIds.push( studentResultSet[studentIndex].Id );
            var studentRecord = studentResultSet[studentIndex];
            studentRecord.NameLastFirst = studentRecord.LastName +", " + studentRecord.FirstName;
            studentRecord.CoursesList = '';
            //studentRecord.ActiveCoursesNotComplete = '';
            studentRecord.Mentor__r = studentRecord.Mentor__r==null? { "Phone":null, "Email": null, "Name":null}: studentRecord.Mentor__r;
            studentRecord.WGUDegreeProgram__r = studentRecord.WGUDegreeProgram__r==null? {"Title__c":studentRecord.ProgramName__c}: studentRecord.WGUDegreeProgram__r;
            studentRecord.IsNSE__c = studentRecord.IsNSE__c == "true";
            //Lucky charm for student grid.
            if(studentRecord.StudentRiskScore__c!=null)// && Ext.Array.contains(riskCourses, roster.BannerCourseCode__c) ) 
            {   studentRecord.HasRiskData=true;
                studentRecord.StudentAction=studentRecord.StudentRiskScore__c;
                studentRecord.StudentAnalyticMessage=studentRecord.StudentAnalyticMessage__c;
            }else
            {   studentRecord.HasRiskData=false;
                studentRecord.StudentAction=0;
                studentRecord.StudentAnalyticMessage='';
            }
            //4-17-14 since the store load record rather than studentRecord, I comment out this line to save space.
            //studentRecords.push( studentRecord );
            records.push( studentRecord );

            if ( !Ext.isEmpty(studentRecord.ProgramCode__c) && degreeProgramStore.findExact('ProgramCode__c', studentRecord.ProgramCode__c) == -1 ) {

                //add record to degree program store for degree program filter
                var newDegreeProgram = Ext.create('DegreeProgramModel');
                newDegreeProgram.set('Id', studentRecord.WGUDegreeProgram__c);
                newDegreeProgram.set('Title__c', studentRecord.WGUDegreeProgram__c == null? studentRecord.ProgramName__c: studentRecord.WGUDegreeProgram__r.Title__c);
                newDegreeProgram.set('ProgramCatalogTerm__c', studentRecord.ProgramCatalogTerm__c);
                newDegreeProgram.set('Name', studentRecord.ProgramName__c);
                newDegreeProgram.set('ProgramCode__c', studentRecord.ProgramCode__c);
                newDegreeProgram.set('CodeTitle', studentRecord.ProgramCode__c + " - " + studentRecord.ProgramName__c );
                degreeProgramStore.loadData([newDegreeProgram], true);
            }
            //SFMENTOR-482
            var passed="";
            var nonpassed="";
            var courseMap = {};
            //1/1/14 edit
            var studentCourses = studentRecord.StudentAcademicCourses__r == null? []: ( !Ext.isArray(studentRecord.StudentAcademicCourses__r.records)? [studentRecord.StudentAcademicCourses__r.records]: studentRecord.StudentAcademicCourses__r.records );
            //studentRecord.StudentCourseVersions__r == null? []: ( !Ext.isArray(studentRecord.StudentCourseVersions__r.records)? [studentRecord.StudentCourseVersions__r.records]: studentRecord.StudentCourseVersions__r.records );
            for( var courseIndex = 0; courseIndex < studentCourses.length; courseIndex++ ) {
                var courseRecord = studentCourses[courseIndex];
              //SFMENTOR-482
                var colorCourse=  courseRecord.CourseCode__c;//(courseRecord.StudentCourseRegistration__r == null ? courseRecord.WGUCourseVersion__r.Name : courseRecord.StudentCourseRegistration__r. Name ) ; 
                if(courseMap[colorCourse]!=null)
                {
                    courseMap[colorCourse]=(courseMap[colorCourse]=='true'||courseRecord.Status__c == 'Passed');
                }else
                {
                    courseMap[colorCourse]= courseRecord.Status__c == 'Passed';
                }
               
            
                if ( courseRecord.CourseCode__c != null && studentFilterCoursesStore.findExact('BannerCourseCode__c', courseRecord.CourseCode__c) == -1 ) {

                    //add record to student courses store for course filter (student mentor view)
                    var newCourse = Ext.create('StudentCourseModel');
                    newCourse.set('Id', courseRecord.Id);
                    newCourse.set('Title__c', courseRecord.FullCourseTitle__c);
                    newCourse.set('BannerCourseCode__c', courseRecord.CourseCode__c);
                    newCourse.set('CodeTitle', newCourse.get('BannerCourseCode__c') + " - " + newCourse.get('Title__c') );
                    studentFilterCoursesStore.loadData([newCourse], true);
                }
            } 
          //SFMENTOR-482
            var keys=Object.keys(courseMap);
            for(var i=0;i<keys.length;i++)
            { 
                var key=keys[i];
                if(courseMap[key]==true)
                {
                    passed+= (passed=="")? key: ","+key;
                }else
                {
                    nonpassed+= (nonpassed=="")? key: ","+key;
                } 
            }
            studentRecord.CoursesList = (nonpassed==""&&passed==""? 'No Enrollments':  "<font color='#89A537'>"+ nonpassed  +"</font>" +  (nonpassed!=""&&passed!=""? "," : "" ) +"<font color='#2356AD'>" +passed+"</font>"); 

        }
        if ( contactIds.length > 0 ) {
            setTimeout( function(){me.getStudentPhotos(contactIds)}, 1000 );
        }
        if ( records.length > 0 ) {

            studentsStore.loadRawData( records, true );

        }
    },

    
    //default loading method of studentGrid, call by OnMentorsComboChange and refresh student button
    //
    getStudentAndCourseData: function( mentorUserId, refresh ) {
        var me = Ext.getCmp('WGUpanel');
        $soap.batchSize = 2000;
        me.studentGridStatusBarText.setText('');
        me.courseGridStatusBarText.setText('');
        me.searchGridStatusBarText.setText('');

        if ( typeof refresh == undefined || refresh == null ) {
            refresh = false;
        }

        if ( mentorUserId ) {
			//default grid is studentGrid
            me.onClearStudentFiltersButtonClick();
            me.resetStudentPropertiesView(false);
            var grid = me.studentsGrid;
            me.studentsGridPanel.getLayout().getActiveItem().getView().setLoading('Refreshing Student List...');

            //first load student mentor student and course records, if any

            studentFilterCoursesStore.loadRawData([]);
            degreeProgramStore.loadRawData([]);
            studentUserStore.loadRawData([]);
            var studentRecords = [];
            studentsStore.loadRawData(studentRecords);
            me.totalCourseEnrollments = 0;


            setTimeout( function() {
                try {
                    //SFMENTOR-482
                    // Edit 4-17-14 remove some field of academic course to save space.
                    var studentQuery = "SELECT "+me.contactQueryFields+", (Select Status__c,  Name, Id, CourseCode__c From StudentAcademicCourses__r   where   ActiveCurrentTermCourse__c = true  order by CourseCode__c asc)  from Contact";
                    $soap.batchSize = 400;
                    $soap.query( studentQuery + " WHERE ( Status__c IN ('IN','TB')  OR (Status__c = 'AS' AND TermStartDate__c < NEXT_MONTH) ) AND Mentor__c = \'"+ mentorUserId +"\'", function(queryResult) {
                        try {
                            queryResult.size *= 1;
                            if (queryResult.size == 0) {
                                //most likely, not a student mentor (no assigned students)
                                me.setMentorRoleRadioEnable();
                                if ( !me.searchViewRadio.getValue() ) {
                                    me.searchViewRadio.setValue(true);
                                }
                                me.mentorSummaryPanel.setVisible(false);
                                return;
                            } else {
                                me.mentorSummaryPanel.setVisible(true);
                                me.myStudentsViewRadio.setValue(true);
                            }
                            queryResult.done = (queryResult.done == "true");
                            var studentResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
                            me.addStudentsToStudentStore( studentRecords, studentResultSet );

                            while( !queryResult.done ) {
                                $soap.batchSize = 400;
                                queryResult = $soap.queryMore( queryResult.queryLocator );
                                queryResult.size *= 1;
                                queryResult.done = (queryResult.done == "true");
                                var studentResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
                                //save to store
                                me.addStudentsToStudentStore( studentRecords, studentResultSet );
                            }
							//After Load:
							// sum SAPs and CUs of students:
                            Ext.callback( function() {
                                me.studentGridStatusBarText.setText('myStudent Assignments Search Complete');
                                var studentsOnSAP = 0;
                                var studentsOffSAP = 0;
                                var studentsOnFAWarning = 0;
                                var studentsOnFASuspend = 0;
                                var studentsOnTermBreak = 0;
                                var studentsNew = 0;
                                var studentsWithTermEndingThisMonth = 0;
                                var studentsInFirstMonthOfTerm = 0;
                                for (var r=0; r< studentsStore.count(); r++ ) {
                                    var record = studentsStore.getAt(r);
                                    if ( !Ext.isEmpty(record.data.CumulativeSAP__c) && record.get('CumulativeSAP__c')*1 <= 66  ) {
                                        studentsOffSAP++;
                                    } else if ( !Ext.isEmpty(record.data.CumulativeSAP__c) && record.get('CumulativeSAP__c')*1 > 66 ) {
                                        studentsOnSAP++
                                    }
                                    if ( record.data.AcademicStanding == 'Warning' ) {
                                        studentsOnFAWarning++;
                                    }
                                    if ( record.data.AcademicStanding == 'Suspended' ) {
                                        studentsOnFASuspend++;
                                    }
                                    if ( record.data.Status__c == "TB" ) {
                                        studentsOnTermBreak++;
                                    }
                                    if ( record.data.Status__c == "IN" ) {
                                        studentsNew++;
                                    }
                                    if ( Ext.Date.format( new Date(), 'MY') == Ext.Date.format( record.get("TermEndDate__c"), 'MY') ) {
                                        studentsWithTermEndingThisMonth++;
                                    }
                                    if ( Ext.Date.format( new Date(), 'MY') == Ext.Date.format( record.get("TermStartDate__c"), 'MY') ) {
                                        studentsInFirstMonthOfTerm++;
                                    }
                                }
								//load sums in the 'Summary' frame.
                                me.mentorOnSAPTextField.setValue(studentsOnSAP);
                                me.mentorOffSAPTextField.setValue(studentsOffSAP);
                                me.mentorTermEndingThisMonthTextField.setValue(studentsWithTermEndingThisMonth);
                                me.mentorInFirstMonthOfTermTextField.setValue(studentsInFirstMonthOfTerm);
                                me.mentorFAWarningTextField.setValue(studentsOnFAWarning);
                                me.mentorFASuspendedTextField.setValue(studentsOnFASuspend);
                                me.mentorOnTermBreakTextField.setValue(studentsOnTermBreak);
                                me.mentorNewStudentsTextField.setValue(studentsNew);

                                Ext.callback( function() {
                                    me.studentGridStatusBarText.setText( 'Showing '+studentsStore.count()+ ' of ' +studentsStore.count()+ ' students assigned');
                                }, window, null, 1);
                            }, window, null, 50);

                            if ( degreeProgramStore.count() > 1 ) {
                                degreeProgramStore.sort('CodeTitle', 'ASC');
                            }
                            if ( studentFilterCoursesStore.count() > 1 ) {
                                studentFilterCoursesStore.sort('CodeTitle', 'ASC');
                            }

                            if ( studentsStore.count() > 0 ) {
                                me.myStudentsViewRadio.setValue(true);
                                studentsStore.sort( 'NameLastFirst', 'ASC');
                                var grid = me.studentsGrid;
                                grid.columns[0].setSortState(null);
                                grid.columns[0].setSortState('ASC');
                            } else {
                                
                                //change to course panel
                               // me.myCoursesViewRadio.setValue(true);
                                //SFMENTOR-478

                                me.searchViewRadio.setValue(true);
                            }
                            delete studentRecords;


                        } finally { //still inside query call back.
                            var grid = me.studentsGridPanel.getLayout().getActiveItem();
                            grid.getView().setLoading(false);
                            grid.getView().refresh();
                            me.studentsGrid.setLoading(false);
                            me.studentsGrid.getView().setLoading(false);

                            if (!refresh) {
                                //SFMENTOR-478 default value -- 
                                //  don't load course roster untill click on the radio button, but still want to enable/disable the MyCourses radio buttion.
                                //  this loading method will be called via onViewRadioChange
                               // Ext.callback( function() {me.getCourseAssignmentAndStudentData( mentorUserId );}, window, null, 0);
                                
                                //SFMENTOR-478 
                                //  copy a portion of me.getCourseAssignmentAndStudentData to here , we want enable the 'My Courses' radio button for course mentor
                                 me.studentGridStatusBarText.setText('');
                                 me.courseGridStatusBarText.setText('');
                                 me.searchGridStatusBarText.setText('');

                                  

                                 var grid = me.studentsGridPanel.getLayout().getActiveItem();
                                 me.mentorCourseListFilterCombo.labelEl.update('Select Course Roster:');
                                 me.onClearCourseFiltersButtonClick();
                                 me.coursesGrid.getView().setLoading('Refreshing Course Rosters...');
                                 me.mentorCourseListFilterCombo.setValue('');

                                 coursesGridStore.loadRawData([], false);
                                 mentorsCoursesStore.loadRawData([], false);
                                 if ( !Ext.isEmpty(me.courseRosters) ) {
                                     delete me.courseRosters;
                                 }
                                 // empty course roster
                                 me.courseRosters = [];

                                //get Mentor's course assignments, gather roster objects
                                var courseAssignmentsQuery = "SELECT CourseNumber__c FROM MentorCourseAssignment__c WHERE (ActiveChk__c= \'1\' or ActiveChk__c= \'True\' )and Mentor__c = \'" + mentorUserId + "\' ORDER BY CourseNumber__c ASC";
                                //query for which course this mentor relate to
                                var queryResult = $soap.query( courseAssignmentsQuery );
                                queryResult.size *= 1;
                                me.setMentorRoleRadioEnable();
                                //SFMENTOR-478 default value --  
                                if (queryResult.size == 0) {
                                    //most likely, not a course mentor (no assigned courses)
                                    setTimeout( function(){me.studentsGridPanel.getLayout().getActiveItem().getView().setLoading(false);}, 50);
                                    me.setMentorRoleRadioEnable();
                                    if ( studentsStore.count() == 0 ) { //if no course and no student, the radio button goes to 'student search'
                                        if ( !me.searchViewRadio.getValue() ) {
                                            me.searchViewRadio.setValue(true);
                                        }
                                    } else {
                                        me.myStudentsViewRadio.setValue(true);
                                    }
                                    return;
                                } else {// is a course mentor
                                    //SFMENTOR-478 default value -- 
                                    me.myCoursesViewRadio.setDisabled(false);
                                    if ( studentsStore.count() == 0 ) {
                                        //me.myCoursesViewRadio.setValue(true);
                                        //SFMENTOR-478 set default radio to student search
                                        me.searchViewRadio.setValue(true);
                                    } else {
                                        me.myStudentsViewRadio.setValue(true);
                                    }
                                    if ( Ext.isChrome ) {
                                        console.log( 'Course Assignment Query Result' );
                                        console.log( queryResult );
                                    }
                                }
                            }
                        }

                    }); //$soap.query callback

                } catch (e) {//$soap.query exception
                    if ( Ext.isChrome ) {
                        console.log('getStudentAndCourseData Error: ' +e.description? e.description: e);
                    }
                    var grid = me.studentsGridPanel.getLayout().getActiveItem();
                    grid.getView().setLoading(false);
                    grid.getView().refresh();
                    me.studentsGrid.setLoading(false);
                    me.studentsGrid.getView().setLoading(false);
                }
            }, 100);

        }

    },
    //The queryResult is a SOQL result of StudentAcademicCourse__c
    // this method stores student's contact id into course record 
    doProcessStudentIdsResultSet: function( queryResult ) {
        var me = Ext.getCmp('WGUpanel');
      //  var riskCourses=['LAE1','QBT1','QLC1','QMC1','QLT1'];   
         
            //  if(Ext.Array.contains(riskCourses,newValue) )
        if ( queryResult.size > 0 ) {
            var studentResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
            var roster = me.getRosterFromCourseNumber( studentResultSet[0].CourseCode__c );
  
            for ( var studentIndex = 0; studentIndex < studentResultSet.length; studentIndex++ ) {
                var studentRecord = studentResultSet[studentIndex];
                studentRecord.CourseCode = studentRecord.CourseCode__c;
                studentRecord.TermCode =  studentRecord.Term__c;
                studentRecord.StudentAcademicCourse__c = studentRecord.Id;
                if(studentRecord.StudentAcademicCourseRequirements__r!=null)
                {
                    result= studentRecord.StudentAcademicCourseRequirements__r;
                    result.records=!Ext.isArray(result.records)? (result.size>0?[result.records]:[]): result.records;
                    AcademicRequirementStore.loadRawData(result.records, true);
                //  console.log(studentRecord.StudentAcademicCourseRequirements__r);
                }
                //studentRecord.StudentCourseRegistration__c=studentRecord.StudentCourseRegistration__c;
                //load risk data  
                if(studentRecord.StudentContact__r.StudentRiskScore__c!=null)// && Ext.Array.contains(riskCourses, roster.BannerCourseCode__c) ) 
                {   studentRecord.HasRiskData=true;
                    studentRecord.StudentAction=studentRecord.StudentContact__r.StudentRiskScore__c; 
                    studentRecord.StudentAnalyticMessage=studentRecord.StudentAnalyticMessage__c;
                }else
                {   studentRecord.HasRiskData=false;
                    studentRecord.StudentAction=0;
                    studentRecord.StudentAnalyticMessage='';
                }
                if ( roster.BannerCourseCode__c !== studentRecord.CourseCode ) {
                    roster = me.getRosterFromCourseNumber( studentRecord.CourseCode );
                }
                /**
                 *  if id not in roster yet, then put it in.
                 */
                if ( roster ) {
                    if ( !Ext.Array.contains( roster.contactids, studentRecord.StudentContact__c) ) {
                        roster.contactids.push( studentRecord.StudentContact__c );
                    }/**
                    
                        !! place to load course data into current roster's store.
                    */
                    roster.studentCoursesStore.loadRawData(studentRecord, true);
                }
            }
        }
    },
//special for case load roster "My Course Mentor Case Load"
    doProcessStudentIdsResultSetPlus: function( queryResult, roster ) {
        var me = Ext.getCmp('WGUpanel');
        if ( queryResult.size > 0 ) {
            var studentResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
           // var roster = me.getRosterFromCourseNumber( studentResultSet[0].WGUCourseVersion__r.WGUCourse__r.Name );
  
            for ( var studentIndex = 0; studentIndex < studentResultSet.length; studentIndex++ ) {
                var studentRecord = studentResultSet[studentIndex];
                studentRecord.CourseCode = studentRecord.CourseCode__c;
                studentRecord.TermCode =  studentRecord.Term__c; 
                studentRecord.StudentAcademicCourse__c = studentRecord.Id;
             //   studentRecord.StudentCourseRegistration__c=studentRecord.StudentCourseRegistration__c;
                //dont load risk for case load.
                // The case load roster won't load requirements seperately, it will use the global AcademicRequrementStore to load requirements,
                //since all requirements should already been load in other rosters.
              /*  if(studentRecord.StudentAcademicCourseRequirements__r!=null&& AcademicRequirementStore.getGroups(studentRecord.Id)==null)
                {
                    result= studentRecord.StudentAcademicCourseRequirements__r;
                    result.records=!Ext.isArray(result.records)? (result.size>0?[result.records]:[]): result.records;
                    AcademicRequirementStore.loadRawData(result.records, true);
                    console.log(studentRecord.StudentAcademicCourseRequirements__r);
                }*/
                if(studentRecord.StudentContact__r.StudentRiskScore__c!=null){
                    studentRecord.HasRiskData=true;
                    studentRecord.StudentAction=studentRecord.StudentContact__r.StudentRiskScore__c;
                    studentRecord.StudentAnalyticMessage=studentRecord.StudentAnalyticMessage__c;
                }else
                {   //dont load risk factor data 
                    studentRecord.HasRiskData=false;
                    studentRecord.StudentAction=0;
                    studentRecord.StudentAnalyticMessage='';
                }
                if ( roster ) {
                    if ( !Ext.Array.contains( roster.contactidandcoursecodes, studentRecord.StudentContact__c+studentRecord.CourseCode) ) {
                        roster.contactidandcoursecodes.push( studentRecord.StudentContact__c+studentRecord.CourseCode );
                        roster.contactids.push( studentRecord.StudentContact__c );
                    }
                    
                    /**
                    
                        !! place to load course data into current roster's store.
                    */
                    roster.studentCoursesStore.loadRawData(studentRecord, true);
                }
            }
        }
    },
    doUpdateCourseRosters: function(currentRoster){
        var me = Ext.getCmp('WGUpanel');
        if ( currentRoster ) {
            var roster = currentRoster;
            me.totalCourseEnrollments - roster.Enrollment; //adjust total before update
            roster.Enrollment = roster.contactids.length;
            me.totalCourseEnrollments + roster.Enrollment; //adjust total with correct enrollment
            var courseRecord = mentorsCoursesStore.findRecord('BannerCourseCode__c', roster.BannerCourseCode__c);
            if ( courseRecord && courseRecord.data ) {
                if(currentRoster.BannerCourseCode__c.length==4)
                {
                    courseRecord.set('CodeTitle', roster.BannerCourseCode__c +" - "+ courseRecord.get('Title__c') + " (" + roster.Enrollment + " enrolled)" );
                }else
                {
                    courseRecord.set('CodeTitle', roster.BannerCourseCode__c +" - "+ courseRecord.get('Title__c') + " (" + roster.Enrollment + " assigned)" );                  
                }
                courseRecord.set('Enrollment',roster.Enrollment);
                roster.CodeTitle = courseRecord.get('CodeTitle');
                roster.done = true;
                var comboValue = me.mentorCourseListFilterCombo.getValue();
                if ( comboValue && comboValue.indexOf(roster.BannerCourseCode__c) == 0 ) {
                    me.mentorCourseListFilterCombo.setRawValue( courseRecord.get('CodeTitle') );
                }
            }
            if ( Ext.isChrome ) {
                console.log( 'Course Roster Update Complete ['+roster.BannerCourseCode__c+']');
            }
        }
    },
    //queryResult as  "SELECT CourseCode__c BannerCourseCode, count(StudentContact__c) Enrollment from StudentAcademicCourse__c WHERE StudentContact__c != null AND StudentContact__r.RecordType.DeveloperName = 'StudentRecord' AND StudentContact__r.Status__c IN ('AS','TB') AND Term__c  IN "+WGU.mySixTerms+" AND CourseCode__c IN " + bannerCourseIds+" GROUP BY CourseCode__c ";
         
    doProcessEnrollmentQueryResult: function( queryResult ) {
        var me = Ext.getCmp('WGUpanel');
        queryResult.size *= 1;
        queryResult.done = (queryResult.done == "true");
        var rosterResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
        for ( var rosterIndex = 0; rosterIndex < rosterResultSet.length; rosterIndex++ ) {

            var rosterRecord = rosterResultSet[rosterIndex];
            var currentRoster = me.getRosterFromCourseNumber( rosterRecord.BannerCourseCode );
            currentRoster.BannerCourseCode__c = rosterRecord.BannerCourseCode;
            currentRoster.Title__c = me.WGUCoursesStore.findRecord('CourseCode',rosterRecord.BannerCourseCode).data.Title;
            currentRoster.Enrollment = rosterRecord.Enrollment*1;
            me.totalCourseEnrollments += currentRoster.Enrollment;
            currentRoster.CodeTitle = rosterRecord.BannerCourseCode + " - " + currentRoster.Title__c;
            currentRoster.CodeTitle += " (" + currentRoster.Enrollment + " raw count)";

            mentorsCoursesStore.loadRawData( [currentRoster], true );

        }
    },
    
    
    
    
    //CM-student assignment:
    //for courseRosterCombo -->'show my case load' option
    //
    //          1. create the roster for 'Case Load'
    //          2. query and put Case Load assignment data into this roster
	addCourseMentorStudentAssignmentIntoRoster: function(courseRosters){
        var me = Ext.getCmp('WGUpanel');
        
        // course code we defined for pilot
        var courseList=$soap.query('select id,CourseLong__c from courselist__c order by createddate asc').records;
        if(Ext.isArray(courseList))
        {
            courseList=courseList[0];
        }
        // if the courseList__c haven't configured yet or not configured in correct format, then dont load CM-student assignment into page.
        if(courseList==null|| courseList.CourseLong__c==null || courseList.CourseLong__c=='' )
        {
            return;
        }
         
        var courses=courseList.CourseLong__c;
        
        if(courses==null||courses=='')
        {
            return;
        }else if(courses == 'all')
        {
            //allows all mentor when it set to all
        }else //if it is not null and not all, contains course code in form of 'QLT2','VUT2'
        {
            var quit=true;
            for(var i=0;i<me.courseRosters.length;i++)
            {
                if(courses.indexOf(me.courseRosters[i].BannerCourseCode__c)!=-1)
                {
                    quit=false;
                }
            }
            if(quit)
            {
                return;
            }
        }
        
        //how many case load?
        
        rosterQuery = "SELECT count(Id) Enrollment from CourseMentorStudentAssignment__c where IsActive__c=true And User__c = '"+thisMentorRecord.data.UserId+"' AND Student__r.Status__c IN ('AS','TB')";
        var Enrollment=0;
        try {
            $soap.batchSize = 2000; //fetch student ids
            queryResult = $soap.query( rosterQuery ); //query smallest roster synchronously
            queryResult.size *= 1;
            queryResult.done = (queryResult.done == "true");

            if ( queryResult.size > 0 ) {
                Enrollment=queryResult.records['Enrollment'];
 
                if ( Ext.isChrome ) {
                    console.log( 'Count my case load');
                }
            }
        } catch (e) {
            if ( Ext.isChrome ) {
                console.log( 'count my case load Exception: '+ (e.description? e.description: e));
            }
        }
        // 0 case load? quit!
        if(Enrollment==0)
        {
            return;
        }
        
        // Create Roster and load it into CourseCombo
        var currentRoster={ "BannerCourseCode__c": "My Course Mentor Case Load", "CodeTitle":"My Course Mentor Case Load: ("+Enrollment+" assigned to me)", "TiTle__c": "My Case Load", "records": null, "Enrollment":Enrollment, "dups":0, "done":false, "contactids":[], "contactidandcoursecodes":[],   "studentCoursesStore": Ext.create('WGU.data.Store', {storeId:'MyCaseLoadStore' }) } ;
        courseRosters.push( currentRoster);
        mentorsCoursesStore.loadRawData( [currentRoster], true );
        
        
        
        //load Case Load detail records 
        var roster = me.getRosterFromCourseNumber("My Course Mentor Case Load");
        try {
            // StudentCourseVersion__c records of related Case Load
            //rosterQuery = "SELECT Id,Student__c, Student__r.StudentRiskScore__c,CompletedDate__c, CompletedTermCode__c, EnrollTermCode__c, WGUCourseVersion__r.WGUCourse__r.Name, Completed__c, Status__c,  StudentCourseRegistration__c, StudentCourseRegistration__r.startdate__c, StudentCourseRegistration__r.enddate__c from StudentCourseVersion__c WHERE Student__c != null AND Student__r.Status__c IN ('AS','TB') AND (StudentCompletionCourse__c != null OR StudentCourseRegistration__c != null)  AND (EnrollTermcode__c  IN "+WGU.mySixTerms+" OR CompletedTermCode__c IN "+WGU.mySixTerms+" OR ActiveCurrentTermCourse__c = true) AND WGUCourseVersion__c != null AND StudentCourseRegistration__c IN (select StudentCourseRegistration__c from CourseMentorStudentAssignment__c where IsActive__c=true And User__c = '"+thisMentorRecord.data.UserId+"')";
            
            rosterQuery ="Select "+  me.academicQueryFields+" From StudentAcademicCourse__c "+
                                                " where  StudentContact__c != null "+
                                                " AND StudentContact__r.Status__c IN (\'AS\',\'TB\')"+
                                                " AND (Term__c  IN "+WGU.mySixTerms+"  AND ActiveCurrentTermCourse__c = true)" +
                                                 "AND id  IN (select StudentAcademicCourse__c from CourseMentorStudentAssignment__c where IsActive__c=true And User__c = '"+thisMentorRecord.data.UserId+"')";
            
            
            $soap.batchSize = roster.Enrollment > 1000? 500: 1000; //fetch student ids in smaller batches for larger enrollments (leveraging reusable open data paths)
            queryResult = $soap.query( rosterQuery);  
            queryResult.size *= 1;
            queryResult.done = (queryResult.done == "true");

            if ( queryResult.size > 0 ) {
                me.doProcessStudentIdsResultSetPlus(queryResult,roster);

                while ( !queryResult.done ) {
                    queryResult = $soap.queryMore( queryResult.queryLocator );
                    queryResult.size *= 1;
                    queryResult.done = (queryResult.done == "true");
                    me.doProcessStudentIdsResultSetPlus(queryResult,roster);
                }
                me.doUpdateCourseRosters( roster );
                if ( Ext.isChrome ) {
                    console.log( 'Roster Student Id Pre-Fetch ['+roster.BannerCourseCode__c+'] Complete.');
                }
            }
            // 11/8/13
            //  query Case Load and append to Courses 
            me.addCaseLoadInfoToCourseStore(currentRoster);
        } catch (e) {
            if ( Ext.isChrome ) {
                console.log( 'Roster Student Id Pre-Fetch ['+roster.BannerCourseCode__c+'] Exception: '+ (e.description? e.description: e));
            }
        }
         
    },
    
    
    // 1st round of couse grid data:
    //Create and initiate course rosters:
    // call by onViewRadioChange: check 'My Courses'
    // roster combo include information of: courses, start end date, completion , count of student(enrollment)
    // * In addition to courses, we put 'case load' into roster and load data right here
    getCourseAssignmentAndStudentData: function( mentorUserId ) {
        var me = Ext.getCmp('WGUpanel');
        $soap.batchSize = 2000;
        me.studentGridStatusBarText.setText('');
        me.courseGridStatusBarText.setText('');
        me.searchGridStatusBarText.setText('');

        if ( mentorUserId ) {

            var grid = me.studentsGridPanel.getLayout().getActiveItem();
            me.mentorCourseListFilterCombo.labelEl.update('Select Course Roster:');
            me.onClearCourseFiltersButtonClick();
            me.coursesGrid.getView().setLoading('Refreshing Course Rosters...');
            me.mentorCourseListFilterCombo.setValue('');

            coursesGridStore.loadRawData([], false);
            mentorsCoursesStore.loadRawData([], false);
            if ( !Ext.isEmpty(me.courseRosters) ) {
                delete me.courseRosters;
            }
            // empty course roster
            me.courseRosters = [];

            //get Course codes: 
            var courseAssignmentsQuery = "SELECT CourseNumber__c FROM MentorCourseAssignment__c WHERE (ActiveChk__c= \'1\' or ActiveChk__c= \'True\' ) and Mentor__c = \'" + mentorUserId + "\' ORDER BY CourseNumber__c ASC";
            //query for which course this mentor relate to
            var queryResult = $soap.query( courseAssignmentsQuery );
            queryResult.size *= 1;
            if (queryResult.size == 0) {
                //most likely, not a course mentor (no assigned courses)
                setTimeout( function(){me.studentsGridPanel.getLayout().getActiveItem().getView().setLoading(false);}, 50);
                me.setMentorRoleRadioEnable();
                if ( studentsStore.count() == 0 ) { //if no course and no student, the radio button goes to 'student search'
                    if ( !me.searchViewRadio.getValue() ) {
                        me.searchViewRadio.setValue(true);
                    }
                } else {
                    me.myStudentsViewRadio.setValue(true);
                }
                return;
            } else { //Courses found! proceed to load studentsCourseRegisrtaion__c of each course
                if ( studentsStore.count() == 0 ) {
                    //me.myCoursesViewRadio.setValue(true);
                    //SFMENTOR-478 set default radio to student search
                    me.searchViewRadio.setValue(true);
                } else {
                    me.myStudentsViewRadio.setValue(true);
                }
                if ( Ext.isChrome ) {
                    console.log( 'Course Assignment Query Result' );
                    console.log( queryResult );
                }
            }
            
            //Create one roster for each course
            queryResult.done = (queryResult.done == "true");
            var mentorResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
            var bannerCourseIds = '(';
            for ( var courseIndex=0; courseIndex<mentorResultSet.length; courseIndex++ ) {
                var assignmentRecord = mentorResultSet[courseIndex];
                if ( !Ext.isEmpty(assignmentRecord.CourseNumber__c) ) {
                    bannerCourseIds += (bannerCourseIds=='(')? "'"+assignmentRecord.CourseNumber__c+"'" : (",'"+assignmentRecord.CourseNumber__c+"'");
                    me.courseRosters.push( { "BannerCourseCode__c": assignmentRecord.CourseNumber__c, "records": null, "Enrollment":0, "dups":0, "done":false, "contactids":[], "contactidandcoursecodes":[],   "studentCoursesStore": Ext.create('WGU.data.Store', {storeId:'StudentCoursesStore'+assignmentRecord.CourseNumber__c}) } );
                }
            }
            bannerCourseIds += ')';
            me.setMentorRoleRadioEnable(); //depends on courseRosters.length 
            //create store for drop down combo    
            me.WGUCoursesStore = Ext.create('Ext.data.Store', {
                fields  : [
                    {name: 'Title' , mapping: 'Title__c', type: 'string'},
                    {name: 'CourseCode' , mapping: 'Name', type: 'string'}
                ],
                storeId: 'WGUCoursesStore',
                proxy : {
                    type    : 'memory',
                    reader  :
                    {
                        type : 'json'
                    }
                }
            });
            //get CourseCodes and Titles for WGUCourse
            $soap.batchSize = 2000;
            queryResult = $soap.query('SELECT Name,Title__c FROM WGUCourse__c WHERE Name IN ' + bannerCourseIds );
            me.WGUCoursesStore.loadRawData(queryResult.records);
             
            while( !queryResult.done == "true") {
                queryResult = $soap.queryMore( queryResult.queryLocator );
                me.WGUCoursesStore.loadRawData(queryResult.records);
            }


            /* For CourseMentorStudentAssignment:
                Add one new roster named 'My Course Mentor Case Load' to course Roster Combo for course mentors 
                This will load student-courses which assigned to this course mentor.
                
                1. create the roster for 'Case Load'
                2. query and put Case Load assignment data into this roster
            
            */ 
            me.addCourseMentorStudentAssignmentIntoRoster(me.courseRosters);
            
            //edit 1-1-14 change to studentacademiccourse
            //get raw (unqualified) course enrollment numbers for current mentor -- may contain duplicate count of same contact at this time
            var rosterQuery = "SELECT CourseCode__c BannerCourseCode, count(StudentContact__c) Enrollment from StudentAcademicCourse__c WHERE StudentContact__c != null AND StudentContact__r.RecordType.DeveloperName = 'StudentRecord' AND StudentContact__r.Status__c IN ('AS','TB') AND Term__c  IN "+WGU.mySixTerms+" AND CourseCode__c IN " + bannerCourseIds+" GROUP BY CourseCode__c ";
            try {
                $soap.query( rosterQuery , function(queryResult) {
                    try {
                        if ( Ext.isChrome ){
                            console.log('Enrollment Query Result');
                            console.log(queryResult);
                        }

                        me.doProcessEnrollmentQueryResult( queryResult );

                        while( !queryResult.done ) {
                            queryResult = $soap.queryMore( queryResult.queryLocator );
                            me.doProcessEnrollmentQueryResult( queryResult );
                        }

                        if ( mentorsCoursesStore.count() > 1 ) {
                          //  mentorsCoursesStore.sort('BannerCourseCode__c', 'ASC');
                            
                            me.coursesGrid.getView().setLoading(false);
                            me.coursesGrid.doLayout();
                            me.coursesGrid.getView().refresh();
                        }

                        //mentor may be assigned courses, but none of them have active enrollments
                        me.mentorCourseListFilterComboToolTip = Ext.getCmp('MentorCourseListFilterComboToolTip');
                        if ( mentorsCoursesStore.count() == 0 || bannerCourseIds == '()' ) {
                            me.mentorCourseListFilterComboToolTip.update('No Active Enrollments');
                            me.mentorCourseListFilterCombo.labelEl.update('No Enrollment Of your '+ me.courseRosters.length + ' course ' + (me.courseRosters.length==1?'assignment':'assignments')+':');
                            me.mentorCourseListFilterCombo.setRawValue("You Don't Have Active Enrollments");
                            me.mentorCourseListFilterCombo.setReadOnly(true);
                            me.studentsGridPanel.getLayout().getActiveItem().getView().setLoading(false);
                            me.coursesGrid.getView().setLoading(false);
                            me.coursesGrid.doLayout();
                            return;
                        } else {
                            me.mentorCourseListFilterComboToolTip.update('Please select a Course Roster...');
                        }


                        //IF ONLY ONE COURSE, FETCH IMMEDIATELY, ELSE USE ASYNCHRONOUS METHODS
                        if (mentorsCoursesStore.count()==1) {
                            Ext.callback( function() { me.doSingleCourseLoad(); }, window, null, 1 );
                        } else {
                            //try prefetching student ids for smallest course roster
                            Ext.callback( function() {
                                me.SmallestRoster = '_first';
                                me.SmallestRosterSize=10000000; //starting point for comparison purposes
                                for ( var r = 0; r < me.courseRosters.length; r++) {
                                    var roster = me.courseRosters[r];
                                    if ( roster.Enrollment > 0 ) {
                                        if ( me.SmallestRoster == '_first' ) {
                                            me.SmallestRoster = roster;
                                            me.SmallestRosterSize = roster.Enrollment;
                                        } else {
                                            if ( roster.Enrollment < me.SmallestRosterSize ) {
                                                me.SmallestRoster = roster;
                                                me.SmallestRosterSize = roster.Enrollment;
                                            }
                                        }
                                    }
                                }
                                //Load Courses (without Contact data) into each Roster
                                //  start from the roster with smallest amount.
                                // * load contact later. 
                                if ( me.SmallestRoster != '_first' ) {
                                    rosterQuery = "Select "+  me.academicQueryFields+" From StudentAcademicCourse__c "+
                                                " where  StudentContact__c != null "+
                                                " AND StudentContact__r.Status__c IN (\'AS\',\'TB\')"+
                                                " AND (Term__c  IN "+WGU.mySixTerms+"  AND ActiveCurrentTermCourse__c = true)" +
                                                 "AND CourseCode__c = \'"+me.SmallestRoster.BannerCourseCode__c +"\'";   
                                    //"SELECT Id, Student__c, Student__r.StudentRiskScore__c, CompletedDate__c, CompletedTermCode__c, EnrollTermCode__c, WGUCourseVersion__r.WGUCourse__r.Name, Completed__c, Status__c, StudentCourseRegistration__c, StudentCourseRegistration__r.startdate__c, StudentCourseRegistration__r.enddate__c from StudentCourseVersion__c WHERE Student__c != null AND Student__r.Status__c IN ('AS','TB') AND (StudentCompletionCourse__c != null OR StudentCourseRegistration__c != null)  AND (EnrollTermcode__c  IN "+WGU.mySixTerms+" OR CompletedTermCode__c IN "+WGU.mySixTerms+" OR ActiveCurrentTermCourse__c = true) AND WGUCourseVersion__c != null AND WGUCourseVersion__r.WGUCourse__r.Name = \'" + me.SmallestRoster.BannerCourseCode__c +"\'";
                                    try {
                                        $soap.batchSize = 2000; //fetch student ids
                                        queryResult = $soap.query( rosterQuery ); //query smallest roster synchronously
                                        queryResult.size *= 1;
                                        queryResult.done = (queryResult.done == "true");

                                        if ( queryResult.size > 0 ) {
                                            me.doProcessStudentIdsResultSet(queryResult);

                                            while ( !queryResult.done ) {
                                                queryResult = $soap.queryMore( queryResult.queryLocator );
                                                queryResult.size *= 1;
                                                queryResult.done = (queryResult.done == "true");
                                                me.doProcessStudentIdsResultSet(queryResult);
                                            }
                                            me.doUpdateCourseRosters( me.SmallestRoster );
                                            if ( Ext.isChrome ) {
                                                console.log( 'Smallest Roster Query Optimization ['+me.SmallestRoster.BannerCourseCode__c+'] Complete.');
                                            }
                                        }
                                    } catch (e) {
                                        if ( Ext.isChrome ) {
                                            console.log( 'Smallest Roster Query Optimization ['+me.SmallestRoster.BannerCourseCode__c+'] Exception: '+ (e.description? e.description: e));
                                        }
                                    }
                                }

                                Ext.callback( function() {
                                    //fetch remaining course roster student ids
                                    for ( var r = 0; r < me.courseRosters.length; r++) {
                                        var roster = me.courseRosters[r];
                                        if ( !roster.done ) { //smallest roster was already queried above
                                            Ext.callback( function(){
                                                try {
                                                    var roster = me.getRosterFromCourseNumber(Ext.decode(arguments[0]));
                                                    rosterQuery =  "select "+ me.academicQueryFields+" From StudentAcademicCourse__c "+
                                                " where  StudentContact__c != null "+
                                                " AND StudentContact__r.Status__c IN (\'AS\',\'TB\')"+
                                                " AND (Term__c  IN "+WGU.mySixTerms+"  AND ActiveCurrentTermCourse__c = true)" +
                                                 "AND CourseCode__c = \'" + roster.BannerCourseCode__c +"\'";
                                                    //"SELECT Id,Student__c,Student__r.StudentRiskScore__c, CompletedDate__c, CompletedTermCode__c, EnrollTermCode__c, WGUCourseVersion__r.WGUCourse__r.Name, Completed__c, Status__c,  StudentCourseRegistration__c, StudentCourseRegistration__r.startdate__c, StudentCourseRegistration__r.enddate__c from StudentCourseVersion__c WHERE Student__c != null AND Student__r.Status__c IN ('AS','TB') AND (StudentCompletionCourse__c != null OR StudentCourseRegistration__c != null)  AND (EnrollTermcode__c  IN "+WGU.mySixTerms+" OR CompletedTermCode__c IN "+WGU.mySixTerms+" OR ActiveCurrentTermCourse__c = true) AND WGUCourseVersion__c != null AND WGUCourseVersion__r.WGUCourse__r.Name = \'" + roster.BannerCourseCode__c +"\'";
                                                    $soap.batchSize = roster.Enrollment > 1000? 500: 1000; //fetch student ids in smaller batches for larger enrollments (leveraging reusable open data paths)
                                                    $soap.query( rosterQuery, function(queryResult) {
                                                        try {
                                                            queryResult.size *= 1;
                                                            queryResult.done = (queryResult.done == "true");

                                                            if ( queryResult.size > 0 ) {
                                                                me.doProcessStudentIdsResultSet(queryResult);

                                                                while ( !queryResult.done ) {
                                                                    queryResult = $soap.queryMore( queryResult.queryLocator );
                                                                    queryResult.size *= 1;
                                                                    queryResult.done = (queryResult.done == "true");
                                                                    me.doProcessStudentIdsResultSet(queryResult);
                                                                }
                                                                me.doUpdateCourseRosters( roster );
                                                                if ( Ext.isChrome ) {
                                                                    console.log( 'Roster Student Id Pre-Fetch ['+roster.BannerCourseCode__c+'] Complete.');
                                                                }
                                                            }
                                                        } catch (e) {
                                                            if ( Ext.isChrome ) {
                                                                console.log( 'Roster Student Id Pre-Fetch ['+roster.BannerCourseCode__c+'] Exception: '+ (e.description? e.description: e));
                                                            }
                                                        }
                                                    });
                                                } catch (e) {
                                                    if ( Ext.isChrome ) {
                                                        console.log( 'Roster Student Id Pre-Fetch ['+roster.BannerCourseCode__c+'] Exception: '+ (e.description? e.description: e));
                                                    }
                                                }
                                            }, me, [Ext.encode(roster.BannerCourseCode__c)], r*500); //space out callbacks by .5 seconds each for UI responsiveness
                                        }
                                    }//end for loop on me.courseRosters
                                }, me, null, 250); //timeout for remaining rosters
                            }, window, null, 0); //callback

                        }

                    } finally {

                        try {
                            me.setMentorRoleRadioEnable();
                            me.coursesGrid.doLayout();

                            var combo = me.mentorCourseListFilterCombo;
                            if ( mentorsCoursesStore.count() > 0  ) {
                                combo.labelEl.update( mentorsCoursesStore.count()==1? 'Current Selection:': 'Select My Case Load or a Course Roster:' );
                                combo.setReadOnly(mentorsCoursesStore.count()==1? true: false);
                            }
                        } catch (e) {
                            if ( Ext.isChrome ) {
                                console.log('getCourseAssignmentAndStudentData Error: ' + e.description? e.description: e);
                            }
                        }
                    }
                }); //$soap.query
            } catch (e) {
                me.studentsGridPanel.getLayout().getActiveItem().getView().setLoading(false);
                me.coursesGrid.getView().setLoading(false);
                if ( Ext.isChrome ) {
                    console.log('getCourseAssignmentAndStudentData Error: ' + e.description? e.description: e);
                }
            }
        }
    },

    doSingleCourseLoad: function(){
        var me = Ext.getCmp('WGUpanel');
        var combo = me.mentorCourseListFilterCombo;
        var firstCourseCode = mentorsCoursesStore.data.items[0].data.BannerCourseCode__c;
        var firstRoster = me.getRosterFromCourseNumber(firstCourseCode);
        me.studentsGridPanel.getLayout().getActiveItem().getView().setLoading(false);
        me.coursesGrid.getView().setLoading(false);
        me.courseGridStatusBarText.setText( 'Loading Course Roster ' + firstRoster.BannerCourseCode__c+'...' );
        combo.setValue(firstCourseCode);
        combo.setRawValue(firstRoster.CodeTitle);
    },
     
    
     
    
    
    // 11-8-13 
    //edit 1-1-14
    //Append Case Load Field to course data
    addCaseLoadInfoToCourseStoreBatch:function(currentRoster, queryResult)
    {
        var me = Ext.getCmp('WGUpanel');
        if ( queryResult.size > 0 ) {
                var assignmentResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
                var roster = currentRoster;
                var regAssignmentMap={};
                //store assignment in map as (key: registration__c value:assignment) to reduce the loading time
                for ( var assignmentIndex = 0; assignmentIndex < assignmentResultSet.length; assignmentIndex++ ) {
                    var assignmentRecord = assignmentResultSet[assignmentIndex];
                    regAssignmentMap[assignmentRecord.StudentAcademicCourse__c]=assignmentRecord;
                }
                
                for(var courseIndex=0; courseIndex< currentRoster.studentCoursesStore.data.items.length;courseIndex++){
                        var courseRecord = currentRoster.studentCoursesStore.data.items[courseIndex].data; 
                        //append assignment info into course if they have same studentcouresregistration__c id
                        if(courseRecord.StudentAcademicCourse__c != null && courseRecord.StudentAcademicCourse__c!= ""  && regAssignmentMap[courseRecord.StudentAcademicCourse__c]!=null)
                        {  
                            //fetch the assignment from map, this will reduce the complexity from n*n to n.
                            var assignmentRecord = regAssignmentMap[courseRecord.StudentAcademicCourse__c];
                            //window.alert(courseRecord);
                            courseRecord.CourseMentorId=assignmentRecord.Mentor__c;
                            courseRecord.CourseMentorPidm=assignmentRecord.MentorPidm__c;
                            courseRecord.CourseMentorUser=assignmentRecord.User__c;
                            courseRecord.CourseMentorAssignedStartDate=assignmentRecord.AssignmentStartDate__c;
                            courseRecord.CourseMentorAssignedEndDate=assignmentRecord.AssignmentEndDate__c;
                            courseRecord.CourseMentorIsActive=assignmentRecord.IsActive__c;
                            courseRecord.CourseMentorAssignedReason=assignmentRecord.ReasonOfAssignment__c; 
                        }
                    
                    }
                
             
            }
        
    },
    
     //11-8-13 
     //edit 1-1-14
     // After the 'Case Load' roster already have a list of courses (studentCourseVersion__c),
     //     append CourseMentorStudentAssignment__c field to each course.
    addCaseLoadInfoToCourseStore:function(currentRoster){
        var me = Ext.getCmp('WGUpanel');
    //  var courseCode=currentRoster.BannerCourseCode__c;
        var mentorUserId=thisMentorRecord.data.UserId;
        //query case loads
        rosterQuery = "SELECT Id,  CourseCode__c, StudentCourseRegistration__c,StudentAcademicCourse__c, Student__c, "+
        "AssignmentStartDate__c, AssignmentEndDate__c, Mentor__c,MentorPidm__c,User__c, "+
        "ReasonOfAssignment__c, IsActive__c, StartDate__c,EndDate__c "+
        "from CourseMentorStudentAssignment__c "+
        "where User__c = \'"+thisMentorRecord.data.UserId+"\' and IsActive__c=true";
                           
        try {
            $soap.batchSize = 2000; //batch size
            queryResult = $soap.query( rosterQuery ); //query assignments
            queryResult.size *= 1;
            queryResult.done = (queryResult.done == "true");
            //  window.alert(rosterQuery + queryResult.size);
            if ( queryResult.size > 0 ) {
                me.addCaseLoadInfoToCourseStoreBatch(currentRoster,queryResult);

                while ( !queryResult.done ) {
                    queryResult = $soap.queryMore( queryResult.queryLocator );
                    queryResult.size *= 1;
                    queryResult.done = (queryResult.done == "true");
                    me.addCaseLoadInfoToCourseStoreBatch(currentRoster,queryResult);
                }
            //    me.doUpdateCourseRosters( me.SmallestRoster );
                if ( Ext.isChrome ) {
                    console.log( 'Append Assignment to Courses Complete');
                }
            }
        } catch (e) {
            if ( Ext.isChrome ) {
                console.log( 'Append Assignment to Course Exception:'+ (e.description? e.description: e));
            }
        }
   
    /*  var studentCourses = currentRoster.studentCoursesStore.queryBy( function(record, id) {
                return (record.data.CourseStudentContactId == studentRecord.Id );
            });  */
    
    },
    // 2nd load : point 5
    //edit 1-1-14
    // 
    // Combine contact and course data from roster.store into roster.records (StudentAcademicCourse__c)
    //take contact-course list out of roster, append student detail information to each record
    //
    addStudentsToCourseStore: function(currentRoster, studentResultSet, batch) {//    student: list of contacts
        var me = Ext.getCmp('WGUpanel');
        var contactIds = [];
        var students = [];
        if ( batch != 0 ) {
            me.courseGridStatusBarText.setText( 'Please Wait. Continuing to Load Course Roster '+currentRoster.BannerCourseCode__c+'...' );
            me.coursesGrid.doLayout();
        }
        //append course mentor assignment information to course 
        for ( var studentIndex = 0; studentIndex < studentResultSet.length; studentIndex++ ) {//for each student
            var studentRecord = studentResultSet[studentIndex];
            studentRecord.CoursesList = '';
            //studentRecord.ActiveCoursesNotComplete = '';
            studentRecord.NameLastFirst = studentRecord.LastName +", " + studentRecord.FirstName;
            studentRecord.Mentor__r = studentRecord.Mentor__r==null? { "Phone":null, "Email": null, "Name":null}: studentRecord.Mentor__r;
            studentRecord.WGUDegreeProgram__r = studentRecord.WGUDegreeProgram__r==null? {"Title__c":studentRecord.ProgramName__c}: studentRecord.WGUDegreeProgram__r;
            
           
           
            if ( !Ext.Array.contains( contactIds, studentRecord.Id ) && (studentUserStore.count() > 0? studentUserStore.findExact('Id',studentRecord.Id) == -1: true) ) {
                contactIds.push( studentRecord.Id );
            }
            if ( !Ext.isEmpty(studentRecord.ProgramCode__c) && courseDegreeProgramStore.findExact('ProgramCode__c', studentRecord.ProgramCode__c) == -1  ) {
                //add record to degree program store for degree program filter
                var newDegreeProgram = Ext.create('DegreeProgramModel');
                newDegreeProgram.set('Id', studentRecord.WGUDegreeProgram__c);
                newDegreeProgram.set('Title__c', studentRecord.WGUDegreeProgram__c == null? studentRecord.ProgramName__c: studentRecord.WGUDegreeProgram__r.Title__c);
                newDegreeProgram.set('ProgramCatalogTerm__c', studentRecord.ProgramCatalogTerm__c);
                newDegreeProgram.set('Name', studentRecord.ProgramName__c);
                newDegreeProgram.set('ProgramCode__c', studentRecord.ProgramCode__c);
                newDegreeProgram.set('CodeTitle', studentRecord.ProgramCode__c + " - " + studentRecord.ProgramName__c );
                courseDegreeProgramStore.loadData([newDegreeProgram], true);
            }
            
            //get all course version info stored in currentRoster which matches the current Contact.id
            var studentCourses = currentRoster.studentCoursesStore.queryBy( function(record, id) {
                return (record.data.CourseStudentContactId == studentRecord.Id );
            });  
            
            /*
            
            for(var r=0; r< WGUpanel.courseRosters[5].studentCoursesStore.data.items.length;r++)
            { 
                    if(WGUpanel.courseRosters[5].studentCoursesStore.data.items[r].data.CourseStudentContactId=='003a000001YYxJq')
                    {
                    console.log('11'); 
                    }
            }
            */
            for (var r = 0; r < studentCourses.length; r++) {//for each chourse
                var courseRecord = studentCourses.get(r);
                //if this courseRecord is Fit current Roster's bannerCode or currentRoster is 'My Course Mentor Case Load' which doesn't care about bannerCode__c
                if ( courseRecord.data.CourseCode == currentRoster.BannerCourseCode__c ||currentRoster.BannerCourseCode__c=='My Course Mentor Case Load' ) {
                    //studentRecord.CourseCode == null:  Student contact 'Adam Smith' matched a studentCourseVersion__c 'Adam Smith--LAE1', ok match them.
                    //courseRecord.used == null : (for 'My Course Mentor Case Load') e.g.  We have student 'Adam Smith'with   2 couse 'Adam Smith--ITT1' and 'Adam Smith---LLO2', we want to assign those 2 courses into 2 slot 'Adam Smith#1' 'Adam Smith#2'.
                    //                                                  We will associate ITT1 to #1 contact, iterate through all record of ITT1. but when proceed to next loop of 'adam smith#2', we don't want to check ITT1 again. So we marked all 'ITT1' as 'userd=true'.                                  
                    if ( studentRecord.CourseCode == null && courseRecord.used == null ) {
                        studentRecord.CourseTermCode = courseRecord.data.CourseTermCode;
                        studentRecord.CourseCode = courseRecord.data.CourseCode;
                        studentRecord.CourseStartDate = courseRecord.data.CourseStartDate;
                        studentRecord.CourseEndDate = courseRecord.data.CourseEndDate;
                        studentRecord.CourseStatus = courseRecord.data.CourseStatus;
                        studentRecord.CourseCompletedDate = courseRecord.data.CourseCompletedDate;
                        studentRecord.CourseCompleted = courseRecord.data.CourseStatus == 'Passed';
                        //11/8 2 columns for Case Load assignment
                        studentRecord.CourseMentorAssignedReason = courseRecord.data.CourseMentorAssignedReason;
                        studentRecord.CourseMentorAssignedStartDate = courseRecord.data.CourseMentorAssignedStartDate;
                        //11-1-1 
                        studentRecord.StudentAcademicCourse__c = courseRecord.data.StudentAcademicCourse__c;
                        studentRecord.HasRiskData = courseRecord.data.HasRiskData; //10-2-13 only display risk for student mentor
                        studentRecord.StudentAction= courseRecord.data.StudentAction; 
                        //4/8/14 display MentorSuggestion as tooltip of lucky charm
			            studentRecord.StudentAnalyticMessage=studentRecord.StudentAnalyticMessage__c;
                        courseRecord.used = true; //this records already stored into a studentRecord
                         
                        
                    } else if ( !studentRecord.CourseCompleted && studentRecord.CourseCode == courseRecord.data.CourseCode) {  //course code already have value, but not completed.
                        //determine if the existing course fields should be replaced with the current data (in the case of dup course records)
                        if ( ( courseRecord.data.CourseStartDate && studentRecord.CourseStartDate && courseRecord.data.CourseStartDate > studentRecord.CourseStartDate ) ||
                                ( courseRecord.data.CourseEndDate && studentRecord.CourseEndDate && courseRecord.data.CourseEndDate > studentRecord.CourseEndDate ) ||
                                courseRecord.data.CourseCompleted ) {

                            //replace existing course fields
                            studentRecord.CourseTermCode = courseRecord.data.CourseTermCode;
                            studentRecord.CourseCode = courseRecord.data.CourseCode;
                            studentRecord.CourseStartDate = courseRecord.data.CourseStartDate;
                            studentRecord.CourseEndDate = courseRecord.data.CourseEndDate;
                            studentRecord.CourseStatus = courseRecord.data.CourseStatus;
                            studentRecord.CourseCompletedDate = courseRecord.data.CourseCompletedDate;
                            studentRecord.CourseCompleted = courseRecord.data.CourseStatus == 'Passed';
                            //11/8 2 columns for Case Load assignment
                            studentRecord.CourseMentorAssignedReason = courseRecord.data.CourseMentorAssignedReason;
                            studentRecord.CourseMentorAssignedStartDate = courseRecord.data.CourseMentorAssignedStartDate;
                            //11-1-1 
                            studentRecord.StudentAcademicCourse__c = courseRecord.data.StudentAcademicCourse__c;
                            //10-2-13 remove risk :only display risk for student mentor
                            //4/8/14 display MentorSuggestion as tooltip of lucky charm
				            studentRecord.StudentAnalyticMessage=studentRecord.StudentAnalyticMessage__c;
                            courseRecord.used = true;//this records already stored into a studentRecord
                             
                        }
                    }
                }
                
                
                
                
                

            }

            var student = Ext.ModelManager.create({
                Id : studentRecord.Id,
                Name : studentRecord.Name,
                PIDM__c : studentRecord.PIDM__c,
                CurrentTerm__c: studentRecord.CurrentTerm__c,
                FirstName : studentRecord.FirstName,
                LastName : studentRecord.LastName,
                NameLastFirst : studentRecord.NameLastFirst,
                Mentor__c : studentRecord.Mentor__c,
                MentorName : studentRecord.Mentor__r.Name,
                MentorPIDM__c : studentRecord.Mentor__r.PIDM__c,
                MentorEmail : studentRecord.Mentor__r.Email,
                MentorPhone : studentRecord.Mentor__r.Phone,
                AccountId : studentRecord.AccountId,
                CurrentTerm__c : studentRecord.CurrentTerm__c,
                MailingCity : studentRecord.MailingCity,
                MailingState : studentRecord.MailingState,
                ProgramCatalogTerm__c : studentRecord.ProgramCatalogTerm__c,
                TermNumber__c: studentRecord.TermNumber__c,
                ProgramCode__c : studentRecord.ProgramCode__c,
                ProgramName__c : studentRecord.ProgramName__c,
                DegreeProgramName__c : studentRecord.WGUDegreeProgram__r.Title__c,
                StudentID__c : studentRecord.StudentID__c,
                Status__c : studentRecord.Status__c,
                TermStartDate__c : studentRecord.TermStartDate__c,
				TermBreakStartDate__c: studentRecord.TermBreakStartDate__c,
				TermBreakEndDate__c: studentRecord.TermBreakEndDate__c,
                FAADate__c : studentRecord.FAADate__c,
                PlannedGraduationDate__c : studentRecord.PlannedGraduationDate__c,
                TermEndDate__c : studentRecord.TermEndDate__c,
                CurrentTermEnrolledCUs__c : studentRecord.CurrentTermEnrolledCUs__c*1,
                CurrentTermCompletedCUs__c : studentRecord.CurrentTermCompletedCUs__c*1,
                TermSap__c : studentRecord.TermSap__c*1,
                TotalAttemptedCUs__c : studentRecord.TotalAttemptedCUs__c*1,
                TotalCompletedCUs__c : studentRecord.TotalCompletedCUs__c*1,
                HistoricallyAttemptedCUs__c : studentRecord.HistoricallyAttemptedCUs__c*1,//SAP column change 10/3/13
                HistoricallyCompletedCUs__c : studentRecord.HistoricallyCompletedCUs__c*1,
                CumulativeSAP__c : studentRecord.CumulativeSAP__c*1,
                WGUEmail__c : studentRecord.WGUEmail__c,
                AcademicStanding__c: studentRecord.AcademicStanding__c,
                Timezone__c: studentRecord.Timezone__c,
                StudentPlannedGraduationDate__c: studentRecord.StudentPlannedGraduationDate__c,
                ComposeEmailLink__c : studentRecord.ComposeEmailLink__c,
                Phone : studentRecord.Phone,
                HomePhone : studentRecord.HomePhone,
                Email : studentRecord.Email,
                CoursesList : studentRecord.CoursesList,
                //ActiveCoursesNotComplete : studentRecord.ActiveCoursesNotComplete,
                IsNSE__c: studentRecord.IsNSE__c == "true",
                CourseTermCode: studentRecord.CourseTermCode,
                CourseCode: studentRecord.CourseCode,
                CourseStartDate: studentRecord.CourseStartDate,
                CourseEndDate: studentRecord.CourseEndDate,
                CourseStatus: studentRecord.CourseStatus,
                CourseCompletedDate: studentRecord.CourseCompletedDate,
                CourseCompleted: studentRecord.CourseCompleted,
                CourseMentorId: studentRecord.CourseMentorId,
                CourseMentorPidm: studentRecord.CourseMentorPidm,
                CourseMentorUser: studentRecord.CourseMentorUser,
                //11/8 re-enable this part for 'Case Load' project
                CourseMentorAssignedStartDate: studentRecord.CourseMentorAssignedStartDate,
                CourseMentorAssignedEndDate: studentRecord.CourseMentorAssignedEndDate,
                CourseMentorAssignedReason: studentRecord.CourseMentorAssignedReason,
                CourseMentorIsActive: studentRecord.CourseMentorIsActive,
                //1-1-14
                StudentAcademicCourse__c: studentRecord.StudentAcademicCourse__c,
                //risk factors
                HasRiskData: studentRecord.HasRiskData,
                StudentAction: studentRecord.StudentAction, 
                //4-8-14 mentorSuggestion__c
                StudentAnalyticMessage: studentRecord.StudentAnalyticMessage,
                //birthday
                Birthday: studentRecord.Birthdate,
                //last login and campus
                LastPortalLogin__c: studentRecord.LastPortalLogin__c, 
                CampusCode__c: studentRecord.CampusCode__c
            }, 'StudentModelWithCourse');
            currentRoster.records.push(student);
            students.push(student);
            
          
        } // end for

         
        if ( contactIds.length > 0 ) {
            setTimeout( function(){me.getStudentPhotos(contactIds)}, batch*1000 );
        }
        if ( students.length > 0 ) {

            coursesGridStore.loadData( students, true );

            if ( currentRoster.records.length >= currentRoster.contactids.length ) {

                coursesGridStore.sort( 'NameLastFirst', 'ASC');

                var grid = me.coursesGrid;
                var loadingMask = Ext.getCmp('LoadingMask'+currentRoster.BannerCourseCode__c);
                if ( loadingMask ) {
                    loadingMask.hide();
                    Ext.destroy( loadingMask );
                    delete loadingMask;
                }

                grid.getView().setLoading(false);
                grid.columns[0].setSortState(null);
                grid.columns[0].setSortState('ASC');
                me.fetchInBackground = false;
                Ext.callback( function(){
                    var gridId = me.studentsGridPanel.getLayout().getActiveItem().getId();
                    if ( gridId == 'MyCoursesGridPanel' ) {
                        me.courseGridStatusBarText.setText( 'Course Roster '+currentRoster.BannerCourseCode__c+' Download Complete [Enrollment: '+currentRoster.Enrollment+']' );
                    } else if ( gridId == 'SearchGridPanel' ) {
                        me.searchGridStatusBarText.setText( 'Course Roster '+currentRoster.BannerCourseCode__c+' Download Complete [Enrollment: '+currentRoster.Enrollment+']' );
                    } else {
                        me.studentGridStatusBarText.setText( 'Course Roster '+currentRoster.BannerCourseCode__c+' Download Complete [Enrollment: '+currentRoster.Enrollment+']' );
                    }
                    if ( me.courseCompletionStatusFilterCombo.getValue() != 'NotPassed' ) {
                        me.courseCompletionStatusFilterCombo.setValue('NotPassed');
                    } else {
                        me.onCourseGridFilter();
                    }
                    grid.doLayout();
                }, me, null, 1);

            }
        }
    },
    //2nd load : point 4 
    // combine contact to courses in course grid
    //retrieve detailed student's contact fields, and append it to currentRoster.store's each course data.
    doRetrieveStudentsRecords: function( currentRoster ) {
        var me = Ext.getCmp('WGUpanel');
        $soap.batchSize = me.fetchInBackground? 500: 800;
        var batchLimit = $soap.batchSize;
        var contactIds = currentRoster.contactids;
        var fieldList = me.contactQueryFields;
        var batches = Math.floor(contactIds.length / batchLimit) + (contactIds.length % batchLimit > 0 ? 1: 0);
        try {
            var b = 0;
            var offset = b*batchLimit;
            var recordIds = Ext.Array.slice(contactIds, offset, offset + (b==batches-1 && (contactIds.length % batchLimit)>0? contactIds.length % batchLimit : batchLimit) );
            // Fetch contacts
            var retrieveResult = $soap.retrieve( fieldList, 'Contact', recordIds );
            // combine contact and course info
            // append contact field to roster.courseStore.
            me.addStudentsToCourseStore(currentRoster, retrieveResult, b);
        } finally {
            var grid = me.coursesGrid;
            var loadingMask = Ext.getCmp('LoadingMask'+currentRoster.BannerCourseCode__c);
            if ( loadingMask ) {
                loadingMask.hide();
                Ext.destroy( loadingMask );
                delete loadingMask;
            }
            coursesGridStore.sort( 'NameLastFirst', 'ASC');
            grid.getView().setLoading(false);
            grid.getView().refresh();
            grid.columns[0].setSortState(null);
            grid.columns[0].setSortState('ASC');
        }
        if ( batches > 1 ) {
            for ( var batchIndex = 1; batchIndex < batches; batchIndex++ ) {
                var offset = batchIndex*batchLimit;
                var recordIds = Ext.Array.slice(contactIds, offset, offset + (batchIndex==batches-1 && (contactIds.length % batchLimit)>0? contactIds.length % batchLimit : batchLimit) );
                if ( recordIds.length > 0 ) {
                    if ( batchIndex == 1) {
                        me.coursesGrid.getView().refresh();
                    }
                    $soap.retrieve( fieldList, 'Contact', recordIds, function(retrieveResult) {
                        if ( me.fetchInBackground ) {
                            setTimeout( function(){ me.addStudentsToCourseStore(currentRoster, retrieveResult, batchIndex); }, 500);
                        } else {
                            me.addStudentsToCourseStore(currentRoster, retrieveResult, batchIndex);
                        }
                    } );
                }
            }
        }
    },
    //2nd time loading course: (load courses if not done then keep going)  point 3
    // main purpose here we want to load contacts and inject into courses.
    getStudentRoster: function( currentRoster ) {
        var me = Ext.getCmp('WGUpanel');

        //try to load students by course roster, if any       
        if ( currentRoster.Enrollment > 0 ) {

            if ( me.fetchInBackground == undefined || me.fetchInBackground == null ) {
                me.fetchInBackground = false;
            }
            if ( currentRoster.records !== null ) {
                delete currentRoster.records;
            }
            currentRoster.records = [];

            //if student ids were fetched previously, go straight to retrieve
            if ( currentRoster.done ) {
                //  !!!! load Contact info
                me.doRetrieveStudentsRecords( currentRoster );
            } else {
                //gather student ids for course, duplicode of loading studnet ids but then proceed to doRetrieveStudentsRecords.
                rosterQuery =  "Select  "+me.academicQueryFields    +   " From StudentAcademicCourse__c "+
                                                " where  StudentContact__c != null "+
                                                " AND StudentContact__r.Status__c IN (\'AS\',\'TB\')"+
                                                " AND (Term__c  IN "+WGU.mySixTerms+"  AND ActiveCurrentTermCourse__c = true)" +
                                                 "AND CourseCode__c = \'" + currentRoster.BannerCourseCode__c +"\'";
                //"SELECT Id,Student__c, Student__r.StudentRiskScore__c,CompletedDate__c, CompletedTermCode__c, EnrollTermCode__c, WGUCourseVersion__r.WGUCourse__r.Name, Completed__c, Status__c, StudentCourseRegistration__c, StudentCourseRegistration__r.startdate__c, StudentCourseRegistration__r.enddate__c from StudentCourseVersion__c WHERE Student__c != null AND Student__r.Status__c IN ('AS','TB') AND (StudentCompletionCourse__c != null OR StudentCourseRegistration__c != null)  AND (EnrollTermcode__c  IN "+WGU.mySixTerms+" OR CompletedTermCode__c IN "+WGU.mySixTerms+" OR ActiveCurrentTermCourse__c = true) AND WGUCourseVersion__c != null AND WGUCourseVersion__r.WGUCourse__r.Name = \'" + currentRoster.BannerCourseCode__c +"\'";
                try {
                    $soap.batchSize = me.fetchInBackground? 1000: 2000; //fetch student ids
                    $soap.query( rosterQuery, function(queryResult) {
                        queryResult.size *= 1;
                        queryResult.done = (queryResult.done == "true");

                        if ( queryResult.size > 0 ) {

                            if ( me.fetchInBackground ) {
                                setTimeout( function() {
                                    me.doProcessStudentIdsResultSet(queryResult);
                                    while ( !queryResult.done ) {
                                        queryResult = $soap.queryMore( queryResult.queryLocator );
                                        queryResult.size *= 1;
                                        queryResult.done = (queryResult.done == "true");
                                        me.doProcessStudentIdsResultSet(queryResult);
                                    }
                                    me.doUpdateCourseRosters( currentRoster );
                                    setTimeout( function() {
                                        me.doRetrieveStudentsRecords( currentRoster );
                                        me.studentsGridPanel.getLayout().getActiveItem().getView().setLoading(false);
                                        me.coursesGrid.getView().setLoading(false);
                                    }, 500);
                                }, 500);
                            } else {
                                me.doProcessStudentIdsResultSet(queryResult);

                                while ( !queryResult.done ) {
                                    queryResult = $soap.queryMore( queryResult.queryLocator );
                                    queryResult.size *= 1;
                                    queryResult.done = (queryResult.done == "true");
                                    me.doProcessStudentIdsResultSet(queryResult);
                                }

                                me.doUpdateCourseRosters( currentRoster );
                                me.doRetrieveStudentsRecords( currentRoster ); //oh loading done? keep going 
                                me.studentsGridPanel.getLayout().getActiveItem().getView().setLoading(false);
                                me.coursesGrid.getView().setLoading(false);
                            }
                        }
                    });
                } catch (e) {
                    if ( Ext.isChrome ) {
                        console.log( 'getStudentRoster Exception: ' +( e.description? e.description: e) );
                    }
                }

            }

            if ( courseDegreeProgramStore.count() > 1 ) {
                courseDegreeProgramStore.sort('CodeTitle', 'ASC');
            }
        } // end  currentRoster.Enrollment > 0

    },


    getStudentPhotos: function( contactIds ) {
        try {
            var me = Ext.getCmp('WGUpanel');
            //get student User records for photo urls, asynchronously
            if ( contactIds.length > 0 ) {
                if ( studentUserStore.count() > 0 ) {
                    //get rid of ids for students already in the student User Store
                    for ( var i = contactIds.length-1; i >= 0; i-- ) {
                        if ( studentUserStore.findExact('ContactId',contactIds[i]) != -1 ) {
                            Ext.Array.erase(contactIds,i,1);
                        }
                    }
                }
                //length of soql cannot exceed 1024 bytes, so batch up the contactIds in groups (each id is 18 bytes)
                var batchLimit = 49;
                var batches = Math.floor(contactIds.length / batchLimit) + (contactIds.length % batchLimit > 0 ? 1: 0);
                for ( var b = 0; b < batches; b++ ) {
                    var offset = b*batchLimit;
                    var batchIds = Ext.Array.slice(contactIds, offset, offset + (b==batches-1 && (contactIds.length % batchLimit)>0? contactIds.length % batchLimit : batchLimit) );
                    if ( batchIds.length > 0 ) {
                        var contactIdINClause = Ext.encode(batchIds).replaceAll('"',"'").replaceAll("\\[","(").replaceAll("\\]",")");
                        var userQuery = "SELECT Id,ContactId,SmallPhotoUrl FROM User WHERE isPortalEnabled = true AND ContactId IN " + contactIdINClause;
                        try {
                            $soap.query( userQuery, function(queryResult){
                                queryResult.size *= 1;
                                queryResult.done = (queryResult.done == "true");
                                var userRecords = [];
                                var studentUserResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
                                for ( var studentIndex = 0; studentIndex < studentUserResultSet.length; studentIndex++ ) {
                                    if ( studentUserStore.findExact( 'Id', studentUserResultSet[studentIndex].Id ) == -1 ) {
                                        userRecords.push( studentUserResultSet[studentIndex] );
                                    }
                                }

                                if ( userRecords.length > 0 ) {
                                    studentUserStore.loadRawData(userRecords, true);
                                }

                            }); //soap query callback
                        } catch (e) {
                            if ( Ext.isChrome ) {
                                console.log( 'getStudentPhotos Query Error: ' + e.description? e.description: e);
                            }
                        }
                    }
                }
            } // end if
        } catch(e) {
            if (Ext.isChrome ) {
                console.log( 'getStudentPhotos Error: ' + e.description? e.description: e);
            }
        }
    },

    getRosterFromCourseNumber: function( courseNumber ) {
        var me = Ext.getCmp('WGUpanel');
        var result = false;
        if ( !Ext.isEmpty(courseNumber) && me.courseRosters && me.courseRosters.length ) {
            for( var i = 0; i < me.courseRosters.length ; i ++ ) {
                if ( me.courseRosters[i].BannerCourseCode__c == courseNumber ) {
                    result = me.courseRosters[i];
                    break;
                }
            }
        }
        return result;
    },

	//4/14/14
	//grid to CSV
	ConvertGridToCSV: function (record) { 
		//get order of columns 
		//columns -WGUpanel.studentsGrid.columns
		//
		var me = Ext.getCmp('WGUpanel');
		var grid;
        if ( me.studentsGridPanel.getLayout().getActiveItem().getId() == 'MyStudentsGridPanel' ) {
            grid = me.studentsGrid;
        } else if ( me.studentsGridPanel.getLayout().getActiveItem().getId() == 'MyCoursesGridPanel' ) {
            grid = me.coursesGrid;
        } else {
            grid = me.searchGrid;
        }
        //beware: each column have a dataIndex field relate to store, and text field is the label
        var columns = [];
        for(i=0;i<  grid.columns.length;i++)
        { 
        	if(grid.columns[i].isHidden()==false && grid.columns[i].dataIndex != ''){
	        	columns.push(grid.columns[i]);
	       		console.log(grid.columns[i].dataIndex);
       		}
        }
        
        if (record) {
            records = Ext.isArray(record)? record: [record];
            var headers = '';
            var fields = '';
			//step 1 create header line:
            var firstHeader = true; 
			for(var i in columns)
			{
				var label = columns[i].text;
				if(label == '&#160;')
				{
					label = "Academic Standing";
				}
				var dataIndex = columns[i].dataIndex;
                headers += firstHeader? '\"'+label+'\"' : ',"'+label+'\"';
                firstHeader = false;
                
			}
			//step 2 loop through each records, and in each record, loop through right order of columns:
			
			
			 
            for ( var r= 0; r < records.length; r++ ) {
                var record = records[r].data;   
				var firstField = true;
				var processAssessment = true;
				var reqString='';
				var completiondate = '';
                fields += fields==''? '': '\r\n';
                for(var i in columns)
				{
					var label = columns[i].text;
					var dataIndex = columns[i].dataIndex;
				
					var value = (record[dataIndex]==null?'':record[dataIndex]);
					if ( typeof value == "object" && value.getTime ) { //date fields
                           if ( dataIndex == "StudentPlannedGraduationDate__c" ) {
                               value = record[dataIndex]==null||record[dataIndex]==""? record.raw.StudentPlannedGraduationDate__c: Ext.util.Format.date( record[dataIndex], 'F Y' );
                           } else {
                               value = Ext.util.Format.date( record[dataIndex], 'm/d/Y' );
                           }
                       }
					
						//remove html tag 
                       if(dataIndex == 'CoursesList')
                       {
                        	 
							value =Ext.util.Format.stripTags(value);
                       }
                       
                        
                       if(label.indexOf('%')!=-1)
                       {
                       		value = value+'%';
                       }
                       if(dataIndex  == 'ProgramCode__c')
                       {
                       		value = record[dataIndex]+ '('+record['ProgramCatalogTerm__c']+')';
                       }
                       if(dataIndex == 'LastPortalLogin__c')
                       {
                       		value = Ext.util.Format.date( record[dataIndex], 'Y-m-d H:i:s' );
                       }
                       
                       //====block of assessments=====
                       //  if StudentAcademicCourse__c not null (means this is course grid)
                       //		load string of all requirements and completion date.
                       if(processAssessment&&record['StudentAcademicCourse__c'])
                       {	
                       		processAssessment =  false; 
                        	
                        	//The assessment icon renderer is too slow when mentor have 1000+ students, so we load it from requirement store
                        	var reqRecords=AcademicRequirementStore.getGroups(record['StudentAcademicCourse__c']);
				             
				            //Verify that a group was actually retrieved
				            if (reqRecords!=null && reqRecords.children!=null)
                            {
                                //Loop through all Student Academic Course Requirement records
                                for (var i=0; i<reqRecords.children.length; i++)
                                { 
                                    if(reqString!='')
                                    {
                                        reqString = reqString + ' <> '; 
                                    }
                                    reqString=reqString+ reqRecords.children[i].data.FullTitle+'; Type:'+reqRecords.children[i].data.Type+'; Status:'+reqRecords.children[i].data.Status+'; Attempts:'+reqRecords.children[i].data.Attempts+'';
                                    
                                    //Preassessment Code is only displayed if populated
                                    if (reqRecords.children[i].data.PreassessmentCode!='')
                                    {
                                        reqString=reqString+'; Preassessment Code:'+reqRecords.children[i].data.PreassessmentCode+'';
                                    }
                                    
                                    //The following are displayed as a basic text flag if the associated boolean field is set to true
                                    if (reqRecords.children[i].data.Engaged)
                                    {
                                        reqString=reqString+'; Engaged';
                                    }
                                    
                                    if (reqRecords.children[i].data.EngagedPreassessment)
                                    {
                                        reqString=reqString+'; Preassessment Engaged';
                                    }
                                    
                                    if (reqRecords.children[i].data.Completed)
                                    {
                                        reqString=reqString+'; Completed';
                                    }
                                     
                                    
                                    //find the max course requirement completiondate
                                    if(reqRecords.children[i].data.CompletedDate__c > completiondate)
                                    {
                                        completiondate =   reqRecords.children[i].data.CompletedDate__c  ;
                                    } 
                                }
                                 
                            }
                       }
                       
                       if(dataIndex == 'StudentAcademicCourse__c' )
                       { 
                        	value = reqString;
                       }
                       if(dataIndex =='CourseCompletedDate')
                       { 
                        	value = completiondate;
                       }
                       //=====assessments block end =====
                       fields += firstField? '\"'+value+'\"': ',\"'+value+'\"';
                       firstField = false;
				}
				 
               
            }
            return headers + "\r\n" + fields + '\r\n';
        } else {
            return '';
        }
         
    },

    ConvertRecordToCSV: function (record) { 
        if (record) {
            records = Ext.isArray(record)? record: [record];
            var headers = '';
            var fields = '';

            var firstHeader = true;
            for ( var r= 0; r < records.length; r++ ) {
                var record = records[r].data;
                var firstField = true;
                fields += fields==''? '': '\r\n';
                for (var i in record) {
                    var fieldname = "" + i; 
                    if ( fieldname != "PIDM__c" && fieldname != "Mentor__c" && fieldname != "Id" && fieldname != 'AcademicStandingIcon' && fieldname != "AcademicStanding__c" && fieldname != "PlannedGraduationDate__c" && /*fieldname != "ActiveCoursesNotComplete" &&*/ fieldname != "Email" && fieldname != "AccountId" && fieldname != "ComposeEmailLink__c" && fieldname != "DegreeProgramName__c"
                        && fieldname !=  "TransferRisk"&& fieldname != "WrittingRisk" && fieldname != "EnglishRisk" && fieldname != "MathRisk" && fieldname != "StudentAnalyticMessage" && fieldname != "HasRiskData" && fieldname != "MentorSuggestion__c" && fieldname != "Birthday" &&  fieldname!='CourseMentorId'&&  fieldname!='CourseMentorPidm'&&  fieldname!='CourseMentorUser'&&  fieldname!='CourseMentorAssignedEndDate'&&  fieldname!='CourseMentorIsActive' &&  fieldname!='StudentAcademicCourse__c') //filter out risk data and birthday.
                        { //exclude some fields from all exports
                        if ( r==0) {  //only gather headers on first record
                            headers += firstHeader? '\"'+i+'\"' : ',"'+i+'\"';
                            firstHeader = false;
                        }
                        var value = (record[i]==null?'':record[i]);
                        if ( typeof value == "object" && value.getTime ) { //date fields
                            if ( fieldname == "StudentPlannedGraduationDate__c" ) {
                                value = record[i]==null||record[i]==""? record.raw.StudentPlannedGraduationDate__c: Ext.util.Format.date( record[i], 'F Y' );
                            } else {
                                value = Ext.util.Format.date( record[i], 'm/d/Y' );
                            }
                        }
                        //remove html tag 
                        if(fieldname == 'CoursesList')
                        {
                         	 
							value =Ext.util.Format.stripTags(value);
                        }
                        fields += firstField? '\"'+value+'\"': ',\"'+value+'\"';
                        firstField = false;
                    }
                }
            }
            return headers + "\r\n" + fields + '\r\n';
        } else {
            return '';
        }
    },

    onRefreshCourseSearchStore: function() {
        var me = Ext.getCmp('WGUpanel');

        if ( !me.nextSearchCoursesStoreRefresh || ( me.nextSearchCoursesStoreRefresh && me.nextSearchCoursesStoreRefresh < Date.now() ) ) {

            //only allow refreshes to the enrollments list ever 5 minutes as necessary (FDP/Informatica updates enrollment every 5 minutes)
            me.nextSearchCoursesStoreRefresh = new Date();
            me.nextSearchCoursesStoreRefresh.setMinutes( me.nextSearchCoursesStoreRefresh.getMinutes() + 5 );

            //get the list of courses with non-zero enrollments for the searchCoursesCombo          
            var rosterQuery =  "SELECT CourseCode__c BannerCourseCode__c, FullCourseTitle__c Title__c, count(Id) Enrollment "+
                                                " From StudentAcademicCourse__c "+
                                                " where  StudentContact__c != null "+ 
                                                " AND StudentContact__r.Status__c IN (\'AS\',\'TB\')"+
                                                " AND (Term__c  IN "+WGU.mySixTerms+"  AND ActiveCurrentTermCourse__c = true)" +
                                                " GROUP BY CourseCode__c,FullCourseTitle__c HAVING count(Id) > 0";
            //"SELECT Name BannerCourseCode__c, WGUCourse__r.Title__c Title__c, count(Id) Enrollment from StudentCourseRegistration__c WHERE Student__c != null AND Student__r.RecordType.DeveloperName = 'StudentRecord' AND Student__r.Status__c IN ('AS','TB') AND WGUCourse__c != null AND Termcode__c  IN "+WGU.mySixTerms+" GROUP BY Name,WGUCourse__r.Title__c HAVING count(Id) > 0";
            try {
                $soap.batchSize = 2000;
                $soap.query( rosterQuery , function(queryResult){
                    queryResult.size *= 1;
                    queryResult.done = (queryResult.done == "true");
                    var courseResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;

                    for ( var rosterIndex = 0; rosterIndex < courseResultSet.length; rosterIndex++ ) {

                        var rosterRecord = courseResultSet[rosterIndex];
                        rosterRecord.Enrollment = rosterRecord.Enrollment*1;
                        rosterRecord.CodeTitle = rosterRecord.BannerCourseCode__c + " - " + rosterRecord.Title__c;
                        rosterRecord.CodeTitle += " (" + rosterRecord.Enrollment + " registrations)";

                    }

                    searchCoursesStore.loadRawData( courseResultSet, false );

                    //cannot queryMore on aggregate queries, if we get more than 2000 enrolled courses, switch this code to a RemoteAction method on a controller
                    //while( !queryResult.done ) {}

                    setTimeout( function() {
                        me.searchGridStatusBarText.setText('Course Search List Refresh Complete');
                        setTimeout( function() {
                            me.searchGridStatusBarText.setText('Enter values in one or more criteria fields above and click [Search]');
                        }, 1000);
                    }, 50);

                    if ( searchCoursesStore.count() > 1 ) {
                        searchCoursesStore.sort('BannerCourseCode__c', 'ASC');
                    }

                });
            } catch (e) {
                if ( Ext.isChrome ) {
                    console.log('onRefreshCourseSearchStore Error: ' + e.description? e.description: e);
                }
            }
        }
    }


});


Ext.define('MentorModel', {
    extend  : 'Ext.data.Model',
    autoLoad: false,
    fields  : [
        {name: 'Id' , mapping: 'Id', type: 'string'},
        {name: 'SmallPhotoUrl' , mapping: 'User__r.SmallPhotoUrl', type: 'string'},
        {name: 'NameLastFirst' , mapping: 'NameLastFirst', type: 'string'},
        {name: 'Name' , mapping: 'Name', type: 'string'},
        {name: 'UserId' , mapping: 'User__r.Id', type: 'string'},
        {name: 'MentorRole__c' , mapping: 'MentorRole__c', type: 'string'},
        {name: 'AssignedCollege__c' , mapping: 'AssignedCollege__c', type: 'string'},
        {name: 'UserProfileName' , mapping: 'User__r.ProfileName__c', type: 'string'},
        {name: 'CanSelectOtherMentorsinMyStudents__c' , mapping: 'CanSelectOtherMentorsinMyStudents__c', type: 'string'}
    ]
});

Ext.define('StudentFilterCourseModel', {
    extend  : 'Ext.data.Model',
    autoLoad: false,
    fields  : [
        {name: 'CodeTitle' , mapping: 'CodeTitle', type: 'string'},
        {name: 'Title__c' , mapping: 'WGUCourse__r.Title__c', type: 'string'},
        {name: 'Enrollment' , mapping: 'enrollment', type: 'int'},
        {name: 'BannerCourseCode__c' , mapping: 'BannerCourseCode__c', type: 'string'}
    ]
});

Ext.define('MentorCourseModel', {
    extend  : 'Ext.data.Model',
    autoLoad: false,
    fields  : [
        {name: 'CodeTitle' , mapping: 'CodeTitle', type: 'string'},
        {name: 'Title__c' , mapping: 'Title__c', type: 'string'},
        {name: 'Enrollment' , mapping: 'Enrollment', type: 'int'},
        {name: 'BannerCourseCode__c' , mapping: 'BannerCourseCode__c', type: 'string'}
    ]
});

Ext.define('DegreeProgramModel', {
    extend  : 'Ext.data.Model',
    autoLoad: false,
    fields  : [
        {name: 'Id' , mapping: 'WGUDegreeProgram__c', type: 'string'},
        {name: 'CodeTitle' , mapping: 'CodeTitle', type: 'string'},
        {name: 'Title__c' , mapping: 'WGUDegreeProgram__r.Title__c', type: 'string'},
        {name: 'Name' , mapping: 'ProgramName__c', type: 'string'},
        {name: 'ProgramCode__c' , mapping: 'ProgramCode__c', type: 'string'},
        {name: 'ProgramCatalogTerm__c' , mapping: 'ProgramCatalogTerm__c', type: 'string'}
    ]
});

Ext.define('StudentUserModel', {
    extend  : 'Ext.data.Model',
    autoLoad: false,
    fields  : [
        {name: 'Id' , mapping: 'Id', type: 'string'},
        {name: 'ContactId' , mapping: 'ContactId', type: 'string'},
        {name: 'SmallPhotoUrl' , mapping: 'SmallPhotoUrl', type: 'string'}
    ]
});
//student grid model
Ext.define('StudentModel', {
    extend  : 'Ext.data.Model',
    autoLoad: false,
    fields  : [
        {name: 'Id' , mapping: 'Id', type: 'string'},
        {name: 'Name' , mapping: 'Name', type: 'string'},
        {name: 'FirstName' , mapping: 'FirstName', type: 'string'},
        {name: 'LastName' , mapping: 'LastName', type: 'string'},
        {name: 'NameLastFirst' , mapping: 'NameLastFirst', type: 'string'},
        {name: 'Mentor__c' , mapping: 'Mentor__c', type: 'string'},
        {name: 'MentorName' , mapping: 'Mentor__r.Name', type: 'string'},
        {name: 'MentorPIDM__c' , mapping: 'Mentor__r.PIDM__c', type: 'string'},
        {name: 'MentorEmail' , mapping: 'Mentor__r.Email', type: 'string'},
        {name: 'MentorPhone' , mapping: 'Mentor__r.Phone', type: 'string'},
        {name: 'Timezone__c' , mapping: 'Timezone__c', type: 'string'},
        {name: 'AccountId' , mapping: 'AccountId', type: 'string'},
        {name: 'CurrentTerm__c' , mapping: 'CurrentTerm__c', type: 'string'},
        {name: 'MailingCity' , mapping: 'MailingCity', type: 'string'},
        {name: 'MailingState' , mapping: 'MailingState', type: 'string'},
        {name: 'ProgramCatalogTerm__c' , mapping: 'ProgramCatalogTerm__c', type: 'string'},
        {name: 'ProgramCode__c' , mapping: 'ProgramCode__c', type: 'string'},
        {name: 'ProgramName__c' , mapping: 'ProgramName__c', type: 'string'},
        {name: 'DegreeProgramName__c' , mapping: 'WGUDegreeProgram__r.Title__c', type: 'string'},
        {name: 'StudentID__c' , mapping: 'StudentID__c', type: 'string'},
        {name: 'Status__c' , mapping: 'Status__c', type: 'string'},
        {name: 'CurrentTerm__c', mapping: 'CurrentTerm__c', type: 'string'},
        {name: 'TermNumber__c', mapping: 'TermNumber__c', type: 'int'},
        {name: 'TermBreakStartDate__c', mapping: 'TermBreakStartDate__c', type: 'date', dateFormat: 'Y-m-d'},
        {name: 'TermBreakEndDate__c', mapping: 'TermBreakEndDate__c', type: 'date', dateFormat: 'Y-m-d'},
        {name: 'TermStartDate__c', mapping: 'TermStartDate__c', type: 'date', dateFormat: 'Y-m-d'},
        {name: 'FAADate__c', mapping: 'FAADate__c', type: 'date', dateFormat: 'Y-m-d'},
        {name: 'TermEndDate__c', mapping: 'TermEndDate__c', type: 'date', dateFormat: 'Y-m-d'},
        {name: 'TermDaysCount', mapping: '', type: 'int', defaultValue: 0,
            convert: function(value, record) {
                return Ext.Date.intervalDiff('d',record.raw.TermEndDate__c,record.raw.TermStartDate__c);
            }
        },
        {name: 'TermWeeksCount', mapping: '', type: 'int', defaultValue: 0,
            convert: function(value, record) {
                return Ext.Date.intervalDiff('w',record.raw.TermEndDate__c,record.raw.TermStartDate__c);
            }
        },
        {name: 'WeeksLeftInTerm', mapping: '', type: 'int', defaultValue: 0,
            convert: function(value, record) {
                var totalWeeks = Ext.Date.intervalDiff('w',record.raw.TermEndDate__c,record.raw.TermStartDate__c);
                var weeksIntoTerm = Ext.Date.intervalDiff('w', new Date(), record.raw.TermStartDate__c);
                var weeksLeft = totalWeeks - weeksIntoTerm;
                return weeksLeft < 0? 0: weeksLeft;
            }
        },
        {name: 'DaysLeftInTerm', mapping: '', type: 'int', defaultValue: 0,
            convert: function(value, record) {
                var totalDays = Ext.Date.intervalDiff('d',record.raw.TermEndDate__c,record.raw.TermStartDate__c);
                var daysIntoTerm = Ext.Date.intervalDiff('d', new Date(), record.raw.TermStartDate__c);
                var daysLeft = totalDays - daysIntoTerm;
                return daysLeft < 0? 0 : daysLeft;
            }
        },
        {name: 'WeeksInToTerm', mapping: '', type: 'int' , defaultValue: 0,
            convert: function(value, record) {
                return Ext.Date.intervalDiff('w', new Date(), record.raw.TermStartDate__c);
            }
        },
        {name: 'DaysInToTerm', mapping: '', type: 'int', defaultValue: 0,
            convert: function(value, record) {
                return Ext.Date.intervalDiff('d', new Date(), record.raw.TermStartDate__c);
            }
        },
        {name: 'CurrentTermEnrolledCUs__c', mapping: 'CurrentTermEnrolledCUs__c', type: 'int', defaultValue: 0},
        {name: 'CurrentTermCompletedCUs__c', mapping: 'CurrentTermCompletedCUs__c', type: 'int', defaultValue: 0},
        {name: 'TermSap__c', mapping: 'TermSap__c', type: 'float', defaultValue: 0 },
        {name: 'TotalAttemptedCUs__c', mapping: 'TotalAttemptedCUs__c', type: 'int', defaultValue: 0},
        {name: 'TotalCompletedCUs__c', mapping: 'TotalCompletedCUs__c', type: 'int', defaultValue: 0},
        {name: 'HistoricallyAttemptedCUs__c', mapping: 'HistoricallyAttemptedCUs__c', type: 'int', defaultValue: 0},
        {name: 'HistoricallyCompletedCUs__c', mapping: 'HistoricallyCompletedCUs__c', type: 'int', defaultValue: 0},
        {name: 'CumulativeSAP__c', mapping: 'CumulativeSAP__c', type: 'float', defaultValue: 0},
        {name: 'Phone', mapping: 'Phone', type: 'string'},
        {name: 'HomePhone', mapping: 'HomePhone', type: 'string'},
        {name: 'WGUEmail__c', mapping: 'WGUEmail__c', type: 'string'},
        {name: 'ComposeEmailLink__c', mapping: 'ComposeEmailLink__c', type: 'string'},
        {name: 'AcademicStandingIcon', mapping: '', type: 'string',
            convert: function(value, record) {
                var asCode = record.get('AcademicStanding__c');
                var iconString = "";
                if ( asCode == '' || asCode == 'GS' || asCode == 'OT' || asCode == '100' || asCode == 'DEFALT' ) {
                    iconString = record.data.Status__c =='IN'? '{!$Resource.noteTypesPNG}/standings/NewStudent.png': '{!$Resource.noteTypesPNG}/standings/GoodStanding.png';
                } else if ( asCode == 'WR' ) {
                    iconString = '{!$Resource.noteTypesPNG}/standings/Warning.png';
                } else if ( asCode == 'AP' ) {
                    iconString = '{!$Resource.noteTypesPNG}/standings/Probation.png';
                } else if ( asCode == 'PN' || asCode == 'PB' || asCode == 'PR') {
                    iconString = '{!$Resource.noteTypesPNG}/standings/Probation.png';
                } else if ( asCode == 'IN' || asCode == 'NS' ) {
                    iconString = '{!$Resource.noteTypesPNG}/standings/NewStudent.png';
                } else if ( asCode == 'TM' ) {
                    iconString = '{!$Resource.noteTypesPNG}/standings/Terminated.png';
                } else if ( asCode == 'SU' ) {
                    iconString = '{!$Resource.noteTypesPNG}/standings/Terminated.png';
                } else if ( asCode == 'IC' ) {
                    iconString = Ext.BLANK_IMAGE_URL;
                } else if ( asCode == 'X' ) {
                    iconString = Ext.BLANK_IMAGE_URL;
                } else if ( asCode == 'MX' ) {
                    iconString = Ext.BLANK_IMAGE_URL;
                }
                return iconString;
            }
        },
        {name: 'AcademicStanding', mapping: 'AcademicStanding', type: 'string',
            convert: function(value, record) {
                var asCode = record.get('AcademicStanding__c');
                var asString = "";
                if ( asCode == '' || asCode == 'GS' || asCode == 'OT' || asCode == '100' || asCode == 'DEFALT' ) {
                    asString = record.data.Status__c =='IN'? 'New Student': 'Good Standing';
                } else if ( asCode == 'WR' ) {
                    asString = 'Warning';
                } else if ( asCode == 'AP' ) {
                    asString = 'Probation Academic Plan';
                } else if ( asCode == 'PN' || asCode == 'PB' || asCode == 'PR') {
                    asString = 'Probation';
                } else if ( asCode == 'IN' || asCode == 'NS' ) {
                    asString = 'New Student';
                } else if ( asCode == 'TM' ) {
                    asString = 'Terminated';
                } else if ( asCode == 'SU' ) {
                    asString = 'Suspended';
                } else if ( asCode == 'IC' ) {
                    asString = 'Incomplete';
                } else if ( asCode == 'X' ) {
                    asString = 'Not Yet Reviewed';
                } else if ( asCode == 'MX' ) {
                    asString = 'Maximum Timeframe Exceeded';
                }
                return asString;
            }
        },
        {name: 'AcademicStanding__c', mapping: 'AcademicStanding__c', type: 'string'},
        {name: 'StudentPlannedGraduationDate__c', mapping: 'StudentPlannedGraduationDate__c', type: 'date', dateFormat: 'F Y',
            convert: function(value, record) {
                if (value) {
                    value = value.trim? value.trim(): value;
                    while ( value.indexOf('  ') != -1 ) {
                        value = value.replaceAll('  ', ' ');  //replace every two spaces with one, seeking a value of MonthName[space]YYYY
                    }
                    value = value.replace(' ', ' 01 '); //set the date to the first of the month for all graduation dates
                    try { value = Ext.Date.parse(value,'F d Y'); } catch(e) {}
                }
                return value;
            }
        },
        {name: 'Email', mapping: 'Email', type: 'string'},
        {name: 'CoursesList' , mapping: 'CoursesList', type: 'string'},
        //{name: 'ActiveCoursesNotComplete' , mapping: 'ActiveCoursesNotComplete', type: 'string'},
        {name: 'PIDM__c' , mapping: 'PIDM__c', type: 'string'},
        {name: 'IsNSE__c' , mapping: 'IsNSE__c', type: 'boolean'},
        {name: 'HasRiskData', mapping: 'HasRiskData', type: 'boolean'}, 
        //4-8-14 MentorSuggestion__c as tooltip of lucky charm 
        {name: 'StudentAction', mapping: 'StudentAction', type: 'int',defaultValue: 0},
        //4-22-14
        {name: 'StudentAnalyticMessage', mapping: 'StudentAnalyticMessage', type: 'string' },
        {name: 'Birthday' , mapping: 'Birthdate', type: 'date', dateFormat:'Y-m-d'},
        {name: 'CampusCode__c', mapping: 'CampusCode__c', type: 'string'},
        {name: 'LastPortalLogin__c', mapping: 'LastPortalLogin__c',type: 'date', dateFormat:'c'}   //LastPortalLogin__c is datetime format

        /*    convert: function(value, record) {
                if(value!=null&&value!='')
                {
                    return Ext.Date.parseDate(value,'c')
                }
            
        
            }///"2013-07-12T22:21:00.000Z"
        }*/
    ]
});

//1-7-14 adacemic course requirement
//Data model for Student Academic Course Requirement data
        Ext.define('AcademicRequirementModel',
        {
            extend: 'Ext.data.Model',
            fields:
            [
                {name: 'Id', mapping: 'Id', type: 'string'},                
                {name: 'CreatedDate', mapping: 'CreatedDate', type: 'date', dateFormat: 'c'},
                {name: 'Name', mapping: 'Name', type: 'string'},
                {name: 'Attempts', mapping: 'Attempts__c', type: 'int'},
                {name: 'Completed', mapping: 'Completed__c', type: 'bool'},
        		{name: 'CompletedDate__c', mapping: 'CompletedDate__c', type: 'date', dateFormat: 'Y-m-d'},
                {name: 'Engaged', mapping: 'Engaged__c', type: 'bool'},
                {name: 'EngagedPreassessment', mapping: 'EngagedPreassessment__c', type: 'bool'},
                {name: 'FullTitle', mapping: 'FullTitle__c', type: 'string'},
                {name: 'PreassessmentCode', mapping: 'PreassessmentCode__c', type: 'string'},
                {name: 'Referred', mapping: 'Referred__c', type: 'bool'},
                {name: 'Status', mapping: 'Status__c', type: 'string'},
                {name: 'StudentAcademicCourse', mapping: 'StudentAcademicCourse__c', type: 'string'},
                {name: 'Type', mapping: 'Type__c', type: 'string'}
            ]
        });
//4-3-14 analytic model
Ext.define('StudentAnalyticModel',
 {
     extend: 'Ext.data.Model',
     fields:
     [
         {name: 'Id', mapping: 'Id', type: 'string'},                
         {name: 'CreatedDate', mapping: 'CreatedDate', type: 'date', dateFormat: 'c'},
         {name: 'Name', mapping: 'Name', type: 'string'},
         {name: 'Student__c', mapping: 'Student__c', type: 'string'},
         {name: 'StudentName', mapping: 'Student__r.Name', type: 'string'},
         {name: 'CoursesForGraduation__c', mapping: 'CoursesForGraduation__c', type: 'int'},
         {name: 'CourseOTP__c', mapping: 'CourseOTP__c', type: 'int'},
         {name: 'HighRiskDropAlert__c', mapping: 'HighRiskDropAlert__c', type: 'int'},
         {name: 'StudentAction', mapping: 'StudentAction', type: 'int'},
         {name: 'StudentAnalyticMessage' , mapping: 'StudentAnalyticMessage', type: 'string'}
     ]
 });
          
//Course grid model
Ext.define('StudentModelWithCourse', {
    extend  : 'Ext.data.Model',
    autoLoad: false,
    fields  : [
        {name: 'Id' , mapping: 'Id', type: 'string'},
        {name: 'Name' , mapping: 'Name', type: 'string'},
        {name: 'FirstName' , mapping: 'FirstName', type: 'string'},
        {name: 'LastName' , mapping: 'LastName', type: 'string'},
        {name: 'NameLastFirst' , mapping: 'NameLastFirst', type: 'string'},
        {name: 'Mentor__c' , mapping: 'Mentor__c', type: 'string'},
        {name: 'MentorName' , mapping: 'Mentor__r.Name', type: 'string'},
        {name: 'MentorPIDM__c' , mapping: 'Mentor__r.PIDM__c', type: 'string'},
        {name: 'MentorEmail' , mapping: 'Mentor__r.Email', type: 'string'},
        {name: 'MentorPhone' , mapping: 'Mentor__r.Phone', type: 'string'}, 
        {name: 'Timezone__c' , mapping: 'Timezone__c', type: 'string'},
        {name: 'AccountId' , mapping: 'AccountId', type: 'string'},
        {name: 'CurrentTerm__c' , mapping: 'CurrentTerm__c', type: 'string'},
        {name: 'MailingCity' , mapping: 'MailingCity', type: 'string'},
        {name: 'MailingState' , mapping: 'MailingState', type: 'string'},
        {name: 'ProgramCatalogTerm__c' , mapping: 'ProgramCatalogTerm__c', type: 'string'},
        {name: 'ProgramCode__c' , mapping: 'ProgramCode__c', type: 'string'},
        {name: 'ProgramName__c' , mapping: 'ProgramName__c', type: 'string'},
        {name: 'DegreeProgramName__c' , mapping: 'WGUDegreeProgram__r.Title__c', type: 'string'},
        {name: 'StudentID__c' , mapping: 'StudentID__c', type: 'string'},
        {name: 'Status__c' , mapping: 'Status__c', type: 'string'},
        {name: 'CurrentTerm__c', mapping: 'CurrentTerm__c', type: 'string'},
        {name: 'TermNumber__c', mapping: 'TermNumber__c', type: 'int'},
        {name: 'TermBreakStartDate__c', mapping: 'TermBreakStartDate__c', type: 'date', dateFormat: 'Y-m-d'},
        {name: 'TermBreakEndDate__c', mapping: 'TermBreakEndDate__c', type: 'date', dateFormat: 'Y-m-d'},
        {name: 'TermStartDate__c', mapping: 'TermStartDate__c', type: 'date', dateFormat: 'Y-m-d'},
        {name: 'FAADate__c', mapping: 'FAADate__c', type: 'date', dateFormat: 'Y-m-d'},
        {name: 'TermEndDate__c', mapping: 'TermEndDate__c', type: 'date', dateFormat: 'Y-m-d'},
        {name: 'TermDaysCount', mapping: '', type: 'int', defaultValue: 0,
            convert: function(value, record) {
                return Ext.Date.intervalDiff('d',record.raw.TermEndDate__c,record.raw.TermStartDate__c);
            }
        },
        {name: 'TermWeeksCount', mapping: '', type: 'int', defaultValue: 0,
            convert: function(value, record) {
                return Ext.Date.intervalDiff('w',record.raw.TermEndDate__c,record.raw.TermStartDate__c);
            }
        },
        {name: 'WeeksLeftInTerm', mapping: '', type: 'int', defaultValue: 0,
            convert: function(value, record) {
                var totalWeeks = Ext.Date.intervalDiff('w',record.raw.TermEndDate__c,record.raw.TermStartDate__c);
                var weeksIntoTerm = Ext.Date.intervalDiff('w', new Date(), record.raw.TermStartDate__c);
                var weeksLeft = totalWeeks - weeksIntoTerm;
                return weeksLeft < 0? 0: weeksLeft;
            }
        },
        {name: 'DaysLeftInTerm', mapping: '', type: 'int', defaultValue: 0,
            convert: function(value, record) {
                var totalDays = Ext.Date.intervalDiff('d',record.raw.TermEndDate__c,record.raw.TermStartDate__c);
                var daysIntoTerm = Ext.Date.intervalDiff('d', new Date(), record.raw.TermStartDate__c);
                var daysLeft = totalDays - daysIntoTerm;
                return daysLeft < 0? 0 : daysLeft;
            }
        },
        {name: 'WeeksInToTerm', mapping: '', type: 'int', defaultValue: 0,
            convert: function(value, record) {
                return Ext.Date.intervalDiff('w',record.raw.TermStartDate__c, new Date());
            }
        },
        {name: 'DaysInToTerm', mapping: '', type: 'int', defaultValue: 0,
            convert: function(value, record) {
                return Ext.Date.intervalDiff('d',record.raw.TermStartDate__c, new Date());
            }
        },
        {name: 'CurrentTermEnrolledCUs__c', mapping: 'CurrentTermEnrolledCUs__c', type: 'int', defaultValue: 0},
        {name: 'CurrentTermCompletedCUs__c', mapping: 'CurrentTermCompletedCUs__c', type: 'int', defaultValue: 0},
        {name: 'TermSap__c', mapping: 'TermSap__c', type: 'float', defaultValue: 0},
        {name: 'TotalAttemptedCUs__c', mapping: 'TotalAttemptedCUs__c', type: 'int', defaultValue: 0},
        {name: 'TotalCompletedCUs__c', mapping: 'TotalCompletedCUs__c', type: 'int', defaultValue: 0},
        {name: 'HistoricallyAttemptedCUs__c', mapping: 'HistoricallyAttemptedCUs__c', type: 'int', defaultValue: 0},
        {name: 'HistoricallyCompletedCUs__c', mapping: 'HistoricallyCompletedCUs__c', type: 'int', defaultValue: 0},
        {name: 'CumulativeSAP__c', mapping: 'CumulativeSAP__c', type: 'float', defaultValue: 0},
        {name: 'Phone', mapping: 'Phone', type: 'string'},
        {name: 'HomePhone', mapping: 'HomePhone', type: 'string'},
        {name: 'WGUEmail__c', mapping: 'WGUEmail__c', type: 'string'},
        {name: 'ComposeEmailLink__c', mapping: 'ComposeEmailLink__c', type: 'string'},
        {name: 'AcademicStandingIcon', mapping: '', type: 'string',
            convert: function(value, record) {
                var asCode = record.get('AcademicStanding__c');
                var iconString = "";
                if ( asCode == '' || asCode == 'GS' || asCode == 'OT' || asCode == '100' || asCode == 'DEFALT' ) {
                    iconString = record.data.Status__c =='IN'? '{!$Resource.noteTypesPNG}/standings/NewStudent.png': '{!$Resource.noteTypesPNG}/standings/GoodStanding.png';
                } else if ( asCode == 'WR' ) {
                    iconString = '{!$Resource.noteTypesPNG}/standings/Warning.png';
                } else if ( asCode == 'AP' ) {
                    iconString = '{!$Resource.noteTypesPNG}/standings/Probation.png';
                } else if ( asCode == 'PN' || asCode == 'PB' || asCode == 'PR') {
                    iconString = '{!$Resource.noteTypesPNG}/standings/Probation.png';
                } else if ( asCode == 'IN' || asCode == 'NS' ) {
                    iconString = '{!$Resource.noteTypesPNG}/standings/NewStudent.png';
                } else if ( asCode == 'TM' ) {
                    iconString = '{!$Resource.noteTypesPNG}/standings/Terminated.png';
                } else if ( asCode == 'SU' ) {
                    iconString = '{!$Resource.noteTypesPNG}/standings/Terminated.png';
                } else if ( asCode == 'IC' ) {
                    iconString = Ext.BLANK_IMAGE_URL;
                } else if ( asCode == 'X' ) {
                    iconString = Ext.BLANK_IMAGE_URL;
                } else if ( asCode == 'MX' ) {
                    iconString = Ext.BLANK_IMAGE_URL;
                }
                return iconString;
            }
        },
        {name: 'AcademicStanding', mapping: 'AcademicStanding', type: 'string',
            convert: function(value, record) {
                var asCode = record.get('AcademicStanding__c');
                var asString = "";
                if ( asCode == '' || asCode == 'GS' || asCode == 'OT' || asCode == '100' || asCode == 'DEFALT' ) {
                    asString = 'Good Standing';
                } else if ( asCode == 'WR' ) {
                    asString = 'Warning';
                } else if ( asCode == 'AP' ) {
                    asString = 'Probation Academic Plan';
                } else if ( asCode == 'PN' || asCode == 'PB' || asCode == 'PR') {
                    asString = 'Probation';
                } else if ( asCode == 'IN' || asCode == 'NS' ) {
                    asString = 'New Student';
                } else if ( asCode == 'TM' ) {
                    asString = 'Terminated';
                } else if ( asCode == 'SU' ) {
                    asString = 'Suspended';
                } else if ( asCode == 'IC' ) {
                    asString = 'Incomplete';
                } else if ( asCode == 'X' ) {
                    asString = 'Not Yet Reviewed';
                } else if ( asCode == 'MX' ) {
                    asString = 'Maximum Timeframe Exceeded';
                }
                return asString;
            }
        },
        {name: 'AcademicStanding__c', mapping: 'AcademicStanding__c', type: 'string'},
        {name: 'StudentPlannedGraduationDate__c', mapping: 'StudentPlannedGraduationDate__c', type: 'date', dateFormat: 'F Y',
            convert: function(value, record) {
                if (value) {
                    value = value.trim? value.trim(): value;
                    while ( value.indexOf('  ') != -1 ) {
                        value = value.replaceAll('  ', ' ');  //replace every two spaces with one, seeking a value of MonthName[space]YYYY
                    }
                    value = value.replace(' ', ' 01 '); //set the date to the first of the month for all graduation dates
                    try { value = Ext.Date.parse(value,'F d Y'); } catch(e) {}
                }
                return value;
            }
        },
        {name: 'Email', mapping: 'Email', type: 'string'},
        {name: 'CoursesList' , mapping: 'CoursesList', type: 'string'},
        //{name: 'ActiveCoursesNotComplete' , mapping: 'ActiveCoursesNotComplete', type: 'string'},
        {name: 'PIDM__c' , mapping: 'PIDM__c', type: 'string'},
        {name: 'IsNSE__c' , mapping: 'IsNSE__c', type: 'boolean'},
        {name: 'CourseTermCode' , mapping: 'TermCode', type: 'string'},
        {name: 'CourseCode' , mapping: 'Name', type: 'string'},
        {name: 'CourseStartDate', mapping: 'StartDate__c', type: 'date', dateFormat: 'Y-m-d'}, //edit 1-1-14
        {name: 'CourseEndDate', mapping: 'EndDate__c', type: 'date', dateFormat: 'Y-m-d'},
        {name: 'CourseStatus' , mapping: 'Status__c', type: 'string'},
        {name: 'CourseCompletedDate', mapping: 'CompletedDate__c', type: 'date', dateFormat: 'Y-m-d'},
        {name: 'CourseCompleted', mapping: 'Completed__c', type: 'boolean'},
        //assignment will change to risk factor
        {name: 'CourseMentorId' , mapping: 'CourseMentorId', type: 'string'},
        {name: 'CourseMentorPidm' , mapping: 'CourseMentorPidm', type: 'string'},
        {name: 'CourseMentorUser' , mapping: 'CourseMentorUser', type: 'string'},
        //11-8 'Case Load' project finally will include this change 
        {name: 'CourseMentorAssignedStartDate' , mapping: 'CourseMentorAssignedStartDate',  type: 'date', dateFormat: 'Y-m-d'},
        {name: 'CourseMentorAssignedEndDate' , mapping: 'CourseMentorAssignedEndDate',  type: 'date', dateFormat: 'Y-m-d'},
        {name: 'CourseMentorAssignedReason' , mapping: 'CourseMentorAssignedReason', type: 'string'},
        {name: 'CourseMentorIsActive' , mapping: 'CourseMentorIsActive', type: 'string'},
        {name: 'CourseMentorName' , mapping: 'CourseMentorName', type: 'string'},
        //academic 
        {name: 'StudentAcademicCourse__c' , mapping: 'StudentAcademicCourse__c', type: 'string'},
        //risk  
        {name: 'HasRiskData', mapping: 'HasRiskData', type: 'boolean'},
        {name: 'StudentAction', mapping: 'StudentAction', type: 'int',defaultValue: 0}, 
        //4-8-14 MentorSuggestion  as tooltip of lucky charm
        {name: 'StudentAnalyticMessage', mapping: 'StudentAnalyticMessage', type: 'string' },
        {name: 'MathRisk', mapping: 'MathRisk', type: 'int', defaultValue: 0}, 
        {name: 'WrittingRisk', mapping: 'WrittingRisk', type: 'int', defaultValue: 0}, 
        {name: 'EnglishRisk', mapping: 'EnglishRisk', type: 'int', defaultValue: 0}, 
        {name: 'TransferRisk', mapping: 'TransferRisk', type: 'int', defaultValue: 0} ,
        //birthday
        {name: 'Birthday' , mapping: 'Birthdate', type: 'date', dateFormat:'Y-m-d'},
        {name: 'CampusCode__c', mapping: 'CampusCode__c', type: 'string'},
        {name: 'LastPortalLogin__c', mapping: 'LastPortalLogin__c',type: 'date' , dateFormat:'c'} //LastPortalLogin__c is datetime format

          /*  convert: function(value, record) {
                if(value!=null&&value!='')
                {
                    return Ext.Date.parseDate(value,'c')
                }
            
        
            }///"2013-07-12T22:21:00.000Z"
        }*/
    ]
});


//Data model for  roster, first load course data into rosters without contact.
Ext.define('StudentCourseModel',
        {
            extend  : 'Ext.data.Model',
            fields  :
                    [
                        {name: 'CourseStudentContactId' , mapping: 'StudentContact__c', type: 'string'},
                        {name: 'CourseTermCode' , mapping: 'TermCode', type: 'string'},
                        {name: 'CourseCode' , mapping: 'CourseCode', type: 'string'},
                        {name: 'StudentCourseRegistration__c' , mapping: 'StudentCourseRegistration__c', type: 'string'},
                        {name: 'CourseMentorId' , mapping: 'CourseMentorId', type: 'string'},
                        {name: 'CourseMentorPidm' , mapping: 'CourseMentorPidm', type: 'string'},
                        {name: 'CourseMentorUser' , mapping: 'CourseMentorUser', type: 'string'},
                        {name: 'CourseMentorAssignedStartDate' , mapping: 'CourseMentorAssignedStartDate', type: 'string'},
                        {name: 'CourseMentorAssignedEndDate' , mapping: 'CourseMentorAssignedEndDate', type: 'string'},
                        {name: 'CourseMentorAssignedReason' , mapping: 'CourseMentorAssignedReason', type: 'string'},
                        {name: 'CourseMentorIsActive' , mapping: 'CourseMentorIsActive', type: 'string'},
                        {name: 'CourseStartDate', mapping: 'StartDate__c', type: 'date', dateFormat: 'Y-m-d'},//1-1-14 edit
                        {name: 'CourseEndDate', mapping: 'EndDate__c', type: 'date', dateFormat: 'Y-m-d'},
                        {name: 'CourseStatus' , mapping: 'Status__c', type: 'string'},
                        {name: 'CourseCompletedDate', mapping: 'CompletedDate__c', type: 'date', dateFormat: 'Y-m-d'},
                        {name: 'CourseCompleted', mapping: 'Completed__c', type: 'boolean', //edit 1-1-14
                         convert: function(value, record) { 
                            return record.get('Status__c')=='Passed';
                         }
                        },
                        {name: 'StudentAcademicCourse__c' , mapping: 'StudentAcademicCourse__c', type: 'string'},
                        //risk in roster
                        //risk   
                        {name: 'HasRiskData', mapping: 'HasRiskData', type: 'boolean'},
                        {name: 'StudentAction', mapping: 'StudentAction', type: 'string'},
        				{name: 'StudentAnalyticMessage', mapping: 'StudentAnalyticMessage', type: 'string' },
                        {name: 'MathRisk', mapping: 'MathRisk', type: 'string'}, 
                        {name: 'WrittingRisk', mapping: 'WrittingRisk', type: 'string'}, 
                        {name: 'EnglishRisk', mapping: 'EnglishRisk', type: 'string'}, 
                        {name: 'TransferRisk', mapping: 'TransferRisk', type: 'string'} 
                    ]
        });


// store in each roster
Ext.define('WGU.data.Store',
        {
            extend  : 'Ext.data.Store',
            model : 'StudentCourseModel',
            proxy : {
                type: 'memory',
                reader: {
                    type: 'json'
                }
            }
        });

mentorStore = Ext.create('Ext.data.Store', { storeId: 'MentorStore', model : 'MentorModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });
studentFilterCoursesStore = Ext.create('Ext.data.Store', { storeId: 'StudentFilterCoursesStore', model : 'StudentFilterCourseModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });
mentorsCoursesStore = Ext.create('Ext.data.Store', { storeId: 'MentorsCoursesStore', model : 'MentorCourseModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });
studentsStore = Ext.create('Ext.data.Store', { storeId: 'StudentsStore', model : 'StudentModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });
studentUserStore = Ext.create('Ext.data.Store', { storeId: 'StudentUserStore', model : 'StudentUserModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });
degreeProgramStore = Ext.create('Ext.data.Store', { storeId: 'DegreeProgramStore', model : 'DegreeProgramModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });
courseDegreeProgramStore = Ext.create('Ext.data.Store', { storeId: 'CourseDegreeProgramStore', model : 'DegreeProgramModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });
coursesGridStore = Ext.create('Ext.data.Store', { pageSize: 100, storeId: 'CoursesGridStore', model : 'StudentModelWithCourse', proxy : { type    : 'memory', reader  : { type : 'json' } } });
searchResultsStore = Ext.create('Ext.data.Store', { pageSize: 100, storeId: 'SearchResultsStore', model : 'StudentModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });
searchCoursesStore = Ext.create('Ext.data.Store', { storeId: 'SearchCoursesStore', model : 'MentorCourseModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });
//4-3-14 student analytic store
studentAnalyticStore = Ext.create('Ext.data.Store', { storeId: 'StudentAnalyticStore', model : 'StudentAnalyticModel', proxy : { type    : 'memory', reader  : { type : 'json' } } });

//1-1-14
//Data store for Student Academic Course Requirement data
if(!AcademicRequirementStore){
        var AcademicRequirementStore = Ext.create('Ext.data.Store',
        {
            model : 'AcademicRequirementModel',
            proxy :
            {
                type: 'memory',
                autoSync: true,
                reader:
                {
                    type: 'json',
                    root: 'Records'
                }
            },
            remoteSort: false,
            groupField: 'StudentAcademicCourse',
            sorters:
            [           
                {
                    property: 'Name',
                    direction: 'ASC'
                }
            ]
        });
       }
//These values are hard ocded only until a place is established to store this data.
//Once a place to store the performance action has been established, and it should likely be a picklist, a data model should be made and this store converted to a standard data store using that data model.
//Code will be needed to pull the available values for the picklist.
//Basically it should look just like the noteSubType store, model, and code.
//Student Performance Actions Store to be used with the Student Performance Actions drop-down
//Added 10/3/2013 by Katarina Melki
if (!performanceActionStore)
{
  var performanceActionStore = new Ext.data.ArrayStore({
          fields: ['text'],
          data: [
              ['Create an entire term plan with weekly progress goals that allow the student to achieve OTP'],
              ['Enroll the student in a cohort'],
              ['When the student fails to achieve the weekly goal, set a follow up call later in the week or the day to provide time for them to accomplish the goal that week'],
              ['Create a study calendar with specific times blocked out for schoolwork and ask the student to share it with his or her family/support system'],
              ['Ask questions to determine if the student is struggling with the content, time management, or motivation. Then set a follow up appointment with an additional person (course mentor, student success mentor, etc.) based upon the studentï¿½s response'],
              ['Share screens with the student and walk through a learning resource or task together'],
              ['Share screens and watch a welcome video together then create a plan for finishing the course'],
              ['When a goal is achieved, discuss what actions the student took to achieve that goal and look for ways to replicate those actions'],
              ['Review communities with the students and search out tips and information'],
              ['Share screens and watch a clip of a graduation speaker and then craft a graduation goal and plan for achieving that goal'],
              ['Use questions in the course of study to quiz the student. Set up a course mentor appointment to further discuss the topic']
          ]
      });
}

Ext.define('WGU.dialog.CopyRecordDialog', {
    extend: 'Ext.window.Window',

    height: 480,
    width: 640,
    minWidth: 640,
    resizable: true,
    id: 'CopyRecordDialog',
    layout: {
        type: 'border'
    },
    title: 'Export Student Data to CSV',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'textareafield',
                    region: 'center',
                    id: 'DlgCopyTextArea',
                    fieldLabel: '',
                    fieldStyle: 'font-size:10px;',
                    selectOnFocus: true,
                    autoScroll: true
                },
                {
                    xtype: 'container',
                    region: 'south',
                    height: 40,
                    padding: '5 0 5 0',
                    layout: {
                        align: 'stretch',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        },
                        {
                            xtype: 'component',
                            html: '<div id="downloadify"></div>',
                            width: 100
                        },
                        {
                            xtype: 'tbspacer',
                            width: 10
                        },
                        {
                            xtype: 'button',
                            width: 100,
                            text: 'Cancel',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            width: 5
                        }
                    ]
                },
                {
                    xtype: 'container',
                    region: 'north',
                    height: 24,
                    layout: {
                        type: 'absolute'
                    },
                    items: [
                        {
                            xtype: 'label',
                            id: 'DlgHelpLabel',
                            x: 6,
                            y: 4,
                            width: 500,
                            text: 'Copy the record data below (Right-Click + Copy or keystroke: CTRL/CMD+C):',
                            style: 'font-size:10.5px;'
                        }
                    ]
                }
            ],
            listeners: {
                show: {
                    fn: me.onWindowShow,
                    scope: me
                },
                destroy: {
                    fn: me.onWindowDestroy,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
        me.dlgCopyTextArea = Ext.getCmp('DlgCopyTextArea');
    },

    setText: function(text) {
        var me = Ext.getCmp('CopyRecordDialog');
        me.dlgCopyTextArea.setValue(text);
    },

    onButtonClick: function(button, e, eOpts) {
        this.hide();
        Ext.destroy(this);
    },

    onWindowShow: function(component, eOpts) {

        Ext.fly('DlgCopyTextArea-inputEl').dom.wrap = "off";
        setTimeout( function(){
            var me = Ext.getCmp('CopyRecordDialog');
            var memo = me.dlgCopyTextArea;
            memo.selectText();
        }, 300);
        Ext.create('Ext.tip.ToolTip', {
            id: 'DlgCopyToolTip',
            target: 'DlgHelpLabel',
            maxHeight: 300,
            maxWidth: 500,
            width: 500,
            showDelay: 10,
            dismissDelay: 0,
            html: 'To paste the student data into Excel 2010 columns, copy and paste text into a cell and then use the "Text to Columns" button on the Data tab. Then complete the Excel wizard by setting the "Original data type" to "Delimited", click [Next >], and set the delimiter to Comma, ensuring the "Text Qualifier" is set to " and click [Finish].',
            listeners: {
                hide: function( tip, eOpts ){
                    setTimeout( function(){Ext.getCmp('DlgCopyTextArea').selectText()}, 0);
                }
            }
        });

        setTimeout( function() {
            Downloadify.create('downloadify',{
                filename: function(){
                    return "StudentExport.CSV";
                },
                data: function(){
                    return Ext.getCmp('DlgCopyTextArea').getValue();
                },
                onComplete: function(){
                    Ext.getCmp('DlgCopyTextArea').setLoading('File Saved Successfully...');
                    setTimeout( function() {
                        var dialog = Ext.getCmp('CopyRecordDialog');
                        dialog.hide();
                        Ext.destroy(dialog);
                    },500);
                },
                onCancel: function(){ },
                onError: function(){ },
                transparent: false,
                swf: '{!$Resource.downloadify}/media/downloadify.swf',
                downloadImage: '{!$Resource.downloadify}/images/download.png',
                width: 100,
                height: 30,
                transparent: true,
                append: false
            });
        }, 1);

    },

    onWindowDestroy: function(component, eOpts) {
        Ext.destroy(Ext.getCmp('DlgCopyToolTip'));
    }

});

function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regexS = "[\\?&]" + name + "=([^&#]*)";
    var regex = new RegExp(regexS);
    var results = regex.exec(window.location.search);
    if(results == null)
        return null;
    else
        return decodeURIComponent(results[1].replace(/\+/g, " "));
}


</script>

<script type="text/javascript">

Ext.define('WGU.container.EmbeddedStudentNoteView', {
    extend: 'Ext.container.Container',
    id: 'EmbeddedStudentNoteView',
    alias: 'widget.embeddednotesgridpanel',
    validNoteTypes: [],
    validActionTypes: [],
    studentRecord: null,
    noteTypesPNG: '{!$Resource.noteTypesPNG}/',
    blankNoteJSON: '{"attributes":{"type": "WGUStudentNote__c","url":null},"ShortText__c":null,"WGUCreationDateTime__c":null,"Text__c":null,"SystemModstamp":null,"SubType__c":null,"Student__c":null,"PIDM__c":null,"Name":null,"MentorId__c":null,"Level1Image__c":null,"Id":null,"Type__c":null,"Author__c":null,"AuthorPidm__c":null}',
    noteRecord: null,
    talismaLinkUrl: WGU.talismaLinkBaseUrl || 'http://webapp4.wgu.edu/MentorNotes?pidm=',
    layout: {
        align: 'stretch',
        type: 'vbox'
    },
    requires: [
        'Ext.grid.plugin.BufferedRenderer'
    ],
    listeners: {
        afterlayout: {
            fn: function() {
                var me = Ext.getCmp('EmbeddedStudentNoteView');
                if ( !me.attachmentImage ) {
                    me.attachmentImage = Ext.create('Ext.Img', {
                        src: me.noteTypesPNG+'Attachment.png',
                        renderTo: 'NoteViewerAttachment',
                        width: 24,
                        height: 24,
                        visible: false
                    });

                    me.performanceToolTip = Ext.create('Ext.tip.ToolTip', {
                        target: 'NoteViewerAttachment',
                        id: 'PerformanceToolTip',
                        manageHeight: Ext.isIE? false: true,
                        maxWidth: 500,
                        width: 500,
                        showDelay: 0,
                        dismissDelay: 0,
                        html: 'No Assessment Data for this Note'
                    });
                }
            },
            scope: this
        },
        added: {
            fn: function() {

                setTimeout( function() {
                    var me = Ext.getCmp('EmbeddedStudentNoteView');
                    me.noteRecord = Ext.decode( me.blankNoteJSON );
                    if ( !me.WGUStudentNoteMeta || me.noteTypeFilterCombo.store.count() == 0 ) {
                        me.WGUStudentNoteMeta = WGU.WGUStudentNoteMeta || $soap.describeSObject("WGUStudentNote__c");
                        var noteTypesData = [{value:"All",name:"All"}];
                        for ( var f = 0; f < me.WGUStudentNoteMeta.fields.length; f++ ) {
                            var field = me.WGUStudentNoteMeta.fields[f];
                            if ( field.name == "Type__c" ) {
                                me.WGUStudentNoteTypeMeta = field;
                                var picklistValues = field.picklistValues;
                                for ( var p = 0; p < picklistValues.length; p++ ) {
                                    var pickValue = picklistValues[p];
                                    noteTypesData.push( {"name": pickValue.label,"value":pickValue.value } );
                                }
                            } else if ( field.name == "SubType__c" ) {
                                me.WGUStudentNoteSubTypeMeta = field;
                            }else if ( field.name == "PersonalizationMenu__c" ) {
                                WGU.WGUStudentActionTypeMeta = field;
                                me.WGUStudentActionTypeMeta = field;
                            } else if ( field.name == "PersonalizationMenuSubType__c" ) {
                                WGU.WGUStudentActionSubTypeMeta = field;
                               me.WGUStudentActionSubTypeMeta = field;
                            }
                        }
                        me.noteTypeFilterCombo.store.loadRawData(noteTypesData);
                    }

                    me.noteTypeFilterCombo.store.each( function(record) {
                        me.validNoteTypes.push( record.data.value );
                    }, me);

                }, 1000);
            },
            scope: this
        }
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    id: 'NotesGridViewCards',
                    flex: 1,
                    layout: {
                        align: 'stretch',
                        type: 'card',
                        deferredRender: false
                    },
                    items: [
                        {
                            xtype: 'gridpanel',
                            flex: 1,
                            id: 'NoteHistoryGridPanel',
                            store: notesStore,
                            title: '',
                            forceFit: true,
                            enableColumnHide: false,
                            columnLines: false,
                            multiSelect: false,
                            viewConfig: {
                                itemId: 'note-grid-view',
                                stripeRows: true,
                                floating: false,
                                trackOver: true,
                                listeners: {
                                    itemclick: {
                                        fn: me.onNotesGridviewItemClick,
                                        scope: me
                                    },
                                    itemdblclick: {
                                        fn: me.onNotesGridviewItemDblClick,
                                        scope: me
                                    }
                                }
                            },
                            listeners : {
                                itemcontextmenu :  function( grid, record, item, index, event){
                                    event.stopEvent();
                                    var grid = me.noteHistoryGridPanel;
                                    var selModel = grid.getSelectionModel();
                                    if (selModel instanceof Ext.selection.RowModel) {
                                        if (!selModel.isSelected(record)) {
                                            selModel.select(record);
                                            grid.fireEvent('itemclick', grid, record, item, index, event);
                                        }
                                    }
                                    var isEditable = record && record.get && (record.get("AuthorPidm__c") == thisUser.PIDM__c);
                                    var menu = !Ext.isEmpty(Ext.getCmp('NotesGridContextMenu')) ? Ext.getCmp('NotesGridContextMenu'):
                                            Ext.create('Ext.menu.Menu',{
                                                id: 'NotesGridContextMenu',
                                                items: [
                                                    {
                                                        text: 'Add New Note',
                                                        itemId: 'NotesGridMenuNewNoteMenuItem',
                                                        handler: WGU.onHandleNoteMenuClick,
                                                        menu: WGU.WGUStudentNoteMenuArray
                                                    },
                                                    {
                                                        text: 'cc: this Note',
                                                        handler: WGU.onHandleNoteMenuClick,
                                                        id: 'NotesGridMenuCCNoteMenuItem',
                                                        itemId: 'NotesGridMenuCCNoteMenuItem'
                                                    },
                                                    {
                                                        text: 'Edit this Note',
                                                        disabled: true,
                                                        id: 'NotesGridMenuEditNoteMenuItem',
                                                        itemId: 'NotesGridMenuEditNoteMenuItem',
                                                        handler: WGU.onHandleNoteMenuClick
                                                    },
                                                    {
                                                        text: 'Open in Note View Mode',
                                                        handler: function() {
                                                            var grid = me.noteHistoryGridPanel;
                                                            var selected = grid.getSelectionModel().getSelection();
                                                            if ( selected.length > 0 ) {
                                                                me.onNotesGridviewItemDblClick( grid.getView(), selected[0], null, selected[0].index, null, null);
                                                            } else {
                                                                grid.getSelectionModel().select(0,false,false);
                                                                grid.getView().focusRow(0);
                                                                selected = grid.getSelectionModel().getSelection();
                                                                me.onNotesGridviewItemDblClick( grid.getView(), selected[0], null, selected[0].index, null, null);
                                                            }
                                                            me.studentNoteIndexText.setValue( (selected[0].index+1)+' of '+ me.studentNoteCountText.getValue() + (grid.store.getCount()<me.studentNoteCountText.getValue()? ' (filtered)': '') );
                                                        }
                                                    },
                                                    {
                                                        text: 'Refresh Notes List',
                                                        handler: function() {
                                                            try { Ext.getCmp('EmbeddedStudentNoteView').onRefreshNoteHistoryButtonClick(); } catch(e) { if ( Ext.isChrome ) { console.log('Notes Grid Refresh Error:' + (e.description?e.description:e))} }
                                                        }
                                                    }
                                                ]
                                            });
                                    Ext.getCmp('NotesGridMenuEditNoteMenuItem').setDisabled(!isEditable);
                                    menu.showAt(event.xy);
                                }
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    text: 'Team / Author',
                                    cls: 'wgu-grid-text',
                                    dataIndex: 'AuthorName',
                                    width: 130,
                                    filterable: true,
                                    sortable: true
                                },
                                {
                                    xtype: 'templatecolumn',
                                    text: 'Type',
                                    cls: 'wgu-grid-text',
                                    tpl: Ext.create('Ext.XTemplate',
                                            '<tpl for=".">',
                                            '<img src="{Level1Image__c}"/>',
                                            '</tpl>'),
                                    width: 50,
                                    align: 'center',
                                    sortable: false
                                },
                                {
                                    xtype: 'templatecolumn',
                                    text: 'Subject / Text',
                                    tooltip: 'Subject and Partial Text (double-click view note text)',
                                    cls: 'wgu-grid-text',
                                    tpl: Ext.create('Ext.XTemplate',
                                            '<tpl for=".">',
                                            '<div id="{Id}" class="subjectColumn"><span>{Name}: </span>{ShortText__c}</div>',
                                            '</tpl>'),
                                    width: 654,
                                    sortable: false
                                },
                                {
                                    xtype: 'datecolumn',
                                    text: 'Date',
                                    cls: 'wgu-grid-text',
                                    dataIndex: 'WGUCreationDateTime__c',
                                    width: 105,
                                    filterable: true,
                                    format: "Y-m-d",
                                    sortable: true
                                }
                            ],
                            plugins: {
                                ptype: 'bufferedrenderer',
                                trailingBufferZone: 100,
                                leadingBufferZone:  100
                            },
                            features: [
                                {
                                    ftype: 'filters',
                                    encode: true, // json encode the filter query
                                    local: true   // defaults to false (remote filtering)
                                }
                            ],
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    items: [
                                        { xtype: 'tbspacer', width: 2 },
                                        {
                                            xtype: 'tool',
                                            type: 'pin',
                                            id: 'NavToNoteViewButton',
                                            style: 'border-color: #81A4D0;',
                                            tooltip: 'Switch to Note View',
                                            handler: function() {
                                                var grid = me.noteHistoryGridPanel;
                                                var selected = grid.getSelectionModel().getSelection();
                                                if ( selected.length == 0 ){
                                                    grid.getSelectionModel().select(0,false,false);
                                                    grid.getView().focusRow(0);
                                                    selected = grid.getSelectionModel().getSelection();
                                                }
                                                me.onNotesGridviewItemDblClick(null, selected[0], null, null, null, null );
                                            }
                                        },
                                        { xtype: 'tbspacer', width: 5 },
                                        '-',
                                        { xtype: 'tbspacer', width: 5 },
                                        {
                                            xtype: 'combobox',
                                            id: 'NoteTypeFilterCombo',
                                            selectOnFocus: true,
                                            fieldLabel: 'Note Type Filter',
                                            labelStyle: 'font-size:10.5px;',
                                            labelAlign: 'left',
                                            labelWidth: 90,
                                            value: 'All',
                                            forceSelection: true,
                                            listConfig: {
                                                maxHeight: 111,
                                                resizable: false,
                                                width: 200,
                                                matchFieldWidth: false,
                                                minWidth: 200
                                            },
                                            queryMode: 'local',
                                            displayField: 'name',
                                            valueField: 'value',
                                            store: Ext.create('Ext.data.Store', {
                                                id: 'NoteTypesFilterStore',
                                                fields: ['value', 'name'],
                                                data : []
                                            }),
                                            listeners: {
                                                select: {
                                                    fn: function(combo, records, opts){
                                                        me.onNotesGridFilter(combo, combo.getValue(), opts);
                                                    },
                                                    scope: me

                                                }
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            id: 'NoteTextFilterText',
                                            fieldLabel: 'Note Text Filter',
                                            selectOnFocus: true,
                                            enableKeyEvents: true,
                                            labelAlign: 'right',
                                            labelWidth: 110,
                                            labelStyle: 'font-size:10.5px;',
                                            listeners: {
                                                keyup: {
                                                    fn: function(field, e){
                                                        me.onNotesGridFilter(field, field.getValue(), e);
                                                    },
                                                    buffer: 350
                                                }
                                            }
                                        },
                                        { xtype: 'tbspacer', width: 10 },
                                        {
                                            text: 'Clear Filters',
                                            id: 'NotesGridClearFiltersButton',
                                            tooltip: 'Clear all grid filters and show all notes for this student',
                                            style: 'border-color: #81A4D0;',
                                            handler: me.onClearFiltersClick
                                        },
                                        '->',
                                        {
                                            xtype: 'displayfield',
                                            id: 'StudentNoteCountText',
                                            fieldLabel: 'Note Count',
                                            labelWidth: 75,
                                            labelAlign: 'right',
                                            name: 'StudentNoteCountText',
                                            value: '0',
                                            fieldStyle: 'font-weight: bold;'
                                        },
                                        { xtype: 'tbspacer', width: 10 },
                                        {
                                            text: 'Actions',
                                            style: 'border-color: #81A4D0;',
                                            menu: [
                                                {
                                                    text: 'Switch to Note View',
                                                    itemId: 'GridActionsButtonSwitchToNoteViewMenuItem',
                                                    handler: function() {
                                                        var grid = me.noteHistoryGridPanel;
                                                        var selected = grid.getSelectionModel().getSelection();
                                                        if ( selected.length == 0 ){
                                                            grid.getSelectionModel().select(0,false,false);
                                                            grid.getView().focusRow(0);
                                                            selected = grid.getSelectionModel().getSelection();
                                                        }
                                                        me.onNotesGridviewItemDblClick(null, selected[0], null, null, null, null );
                                                    }
                                                },
                                                {
                                                    text: 'Add New Note',
                                                    itemId: 'GridActionsButtonNewNoteMenuItem',
                                                    handler: WGU.onHandleNoteMenuClick,
                                                    menu: WGU.WGUStudentNoteMenuArray
                                                },
                                                {
                                                    text: 'cc: this Note',
                                                    disabled: true,
                                                    id: 'GridActionsButtonCCNoteMenuItem',
                                                    itemId: 'GridActionsButtonCCNoteMenuItem',
                                                    handler: WGU.onHandleNoteMenuClick
                                                },
                                                {
                                                    text: 'Edit this Note',
                                                    disabled: true,
                                                    id: 'GridActionsButtonEditNoteMenuItem',
                                                    itemId: 'GridActionsButtonEditNoteMenuItem',
                                                    handler: WGU.onHandleNoteMenuClick
                                                },
                                                {
                                                    text: 'Refresh Notes List',
                                                    id: 'GridActionsButtonRefreshNotesMenuItem',
                                                    tooltip: 'Refresh the Student Notes Grid',
                                                    handler: function() {
                                                        try { Ext.getCmp('EmbeddedStudentNoteView').onRefreshNoteHistoryButtonClick(); } catch(e) { if ( Ext.isChrome ) { console.log('Notes Grid Refresh Error:' + (e.description?e.description:e))} }
                                                    }

                                                },
                                                {
                                                    text: 'Open Student Notes',
                                                    tooltip: 'Open Student Notes in new window',
                                                    itemId: 'GridActionsButtonOpenNotesMenuItem',
                                                    handler: function() {
                                                        var me = Ext.getCmp('WGUpanel');
                                                        var grid = me.studentsGridPanel.getLayout().getActiveItem();
                                                        var selected = grid.getView().getSelectionModel().getSelection()[0];
                                                        if ( selected.data.Id ) {
                                                            window.open('/apex/Notes?contactId='+selected.data.Id, 'Notes'+selected.data.Id);
                                                        }
                                                        return false;
                                                    }
                                                },
                                                {
                                                    text: 'Open Talisma Notes',
                                                    tooltip: 'Open Legacy Notes (Talisma) in a new window',
                                                    itemId: 'GridActionsButtonOpenTalismaNotesMenuItem',
                                                    handler: function(){
                                                        var me = Ext.getCmp('WGUpanel');
                                                        var grid = me.studentsGridPanel.getLayout().getActiveItem();
                                                        var record = grid.getView().getSelectionModel().getSelection()[0];
                                                        if ( record.data.PIDM__c ) {
                                                            talismaWindow = window.open(WGU.talismaLinkBaseUrl+record.data.PIDM__c, "Talisma_"+record.data.PIDM__c, "location=1,status=1,scrollbars=1,width=800,height=600");
                                                            talismaWindow.moveTo(0, 0);
                                                        }
                                                        return false;
                                                    }
                                                }

                                            ]
                                        },
                                        { xtype: 'tbspacer', width: 2 }
                                    ]
                                }
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {
                                enableKeyNav: true,
                                mode: 'SINGLE',
                                allowDeselect: false,
                                ignoreRightMouseSelection: true,
                                listeners: {
                                    selectionchange: function( thisModel, selected, eOpts ) {
                                        if ( selected.length > 0 ) {
                                            me.onNotesGridviewItemClick( null, selected[0], null, null, null, eOpts );
                                        }
                                    }
                                }
                            })
                        },
                        {
                            xtype: 'panel',
                            id: 'NoteViewingPanel',
                            flex: 1,
                            layout: {
                                align: 'stretch',
                                type: 'vbox'
                            },
                            title: '',
                            items: [
                                {
                                    xtype: 'container',
                                    id: 'NoteViewDetailsContainer',
                                    height: 40,
                                    minHeight: 40,
                                    padding: '1px 0 0 0',
                                    layout: {
                                        type: 'border'
                                    },
                                    items: [
                                        {
                                            xtype: 'container',
                                            region: 'center',
                                            id: 'NoteViewDetailsBorderContainer',
                                            layout: {
                                                align: 'stretch',
                                                type: 'vbox'
                                            },
                                            items: [
                                                {
                                                    xtype: 'container',
                                                    id: 'NoteViewingPanelTopContainer',
                                                    height: 18,
                                                    minHeight: 18,
                                                    layout: {
                                                        align: 'stretch',
                                                        type: 'hbox'
                                                    },
                                                    items: [
                                                        {
                                                            xtype: 'tbspacer',
                                                            width: 10
                                                        },
                                                        {
                                                            xtype: 'displayfield',
                                                            id: 'NoteViewerType',
                                                            flex: 1,
                                                            minWidth: 220,
                                                            value: '',
                                                            fieldLabel: 'Note Type',
                                                            labelStyle: 'font-size: 9.5px;color: #797979;',
                                                            fieldStyle: 'font-size: 9.5px;font-weight: bold;color: darkblue;',
                                                            labelAlign: 'left',
                                                            labelWidth: 57
                                                        },
                                                        {
                                                            xtype: 'displayfield',
                                                            id: 'NoteViewerSubType',
                                                            flex: 1,
                                                            minWidth: 262,
                                                            value: '',
                                                            fieldLabel: 'Sub Type',
                                                            labelStyle: 'font-size: 9.5px;color: #797979;',
                                                            fieldStyle: 'font-size: 9.5px;font-weight: bold;color: darkblue;',
                                                            labelAlign: 'left',
                                                            labelWidth: 55
                                                        },
                                                        {
                                                            xtype: 'displayfield',
                                                            id: 'NoteViewerSubject',
                                                            flex: 1,
                                                            minWidth: 350,
                                                            value: '',
                                                            fieldLabel: 'Subject',
                                                            labelStyle: 'font-size: 9.5px;color: #797979;',
                                                            fieldStyle: 'font-size: 9.5px;font-weight: bold;color: darkblue;',
                                                            labelAlign: 'left',
                                                            labelWidth: 47
                                                        }
                                                    ]
                                                },
                                                {
                                                    xtype: 'container',
                                                    id: 'NoteViewingPanel2ndRowContainer',
                                                    flex: 1,
                                                    minHeight: 18,
                                                    padding: '0 0 0 0',
                                                    layout: {
                                                        align: 'stretch',
                                                        type: 'hbox'
                                                    },
                                                    items: [
                                                        {
                                                            xtype: 'tbspacer',
                                                            width: 10
                                                        },
                                                        {
                                                            xtype: 'displayfield',
                                                            id: 'NoteViewerAuthor',
                                                            flex: 1,
                                                            minWidth: 220,
                                                            value: '',
                                                            fieldLabel: 'Author',
                                                            labelStyle: 'font-size: 9.5px;color: #797979;',
                                                            fieldStyle: 'font-size: 9.5px;font-weight: bold;color: darkblue;',
                                                            labelAlign: 'left',
                                                            labelWidth: 57
                                                        },
                                                        {
                                                            xtype: 'displayfield',
                                                            id: 'NoteViewerCreationDate',
                                                            flex: 1,
                                                            minWidth: 262,
                                                            value: '',
                                                            fieldLabel: 'Created',
                                                            labelStyle: 'font-size: 9.5px;color: #797979;',
                                                            fieldStyle: 'font-size: 9.5px;font-weight: bold;color: darkblue;',
                                                            labelAlign: 'left',
                                                            labelWidth: 55
                                                        },
                                                        {
                                                            xtype: 'tbspacer',
                                                            minWidth: 350,
                                                            flex : 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'container',
                                            id: 'NoteAttachmentContainer',
                                            region: 'west',
                                            padding: '6px 0 0 5px',
                                            layout: {
                                                align: 'stretch',
                                                type: 'vbox'
                                            },
                                            items: [
                                                {
                                                    xtype: 'component',
                                                    id: 'NoteViewerAttachment',
                                                    width: 24,
                                                    height: 24,
                                                    visible: true
                                                },
                                                {
                                                    xtype: 'tbspacer',
                                                    flex: 1
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: 'container',
                                    id: 'NoteViewHTMLContainer',
                                    flex: 1,
                                    padding: '3 5 5 5',
                                    border: false,
                                    style: 'background-color:#dfe8f6;',
                                    bodyStyle: 'border-right:lightgray solid 1px; padding: 1px 1px 1px 1px;background-color:#dfe8f6;',
                                    layout: {
                                        type: 'fit'
                                    },
                                    listeners: {
                                        resize: {
                                            fn: function( panel, width, height, oldWidth, oldHeight, eOpts ) {

                                                me.noteViewerHTMLWrapper = me.noteViewerHTMLWrapper || Ext.get('NoteViewerHTMLWrapper');
                                                if (me.noteViewerHTMLWrapper){
                                                    me.noteViewerHTMLWrapper.setSize(width-12,height-10);
                                                    panel.doLayout();
                                                }
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            html: "<iframe id='NoteViewerHTMLWrapper' name='NoteViewerHTMLWrapper' style='height:69px;width:944px;border:none;overflowY:auto,overflowX:auto;font-size:10.5px;font-family:tahoma,arial,verdana,sans-serif;'>"
                                        }
                                    ]

                                }
                            ],
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    items: [
                                        { xtype: 'tbspacer', width: 2 },
                                        {
                                            xtype: 'tool',
                                            type: 'unpin',
                                            id: 'NavToGridNoteButton',
                                            style: 'border-color: #81A4D0;',
                                            tooltip: 'Switch to Grid View',
                                            handler: function() {
                                                me.notesGridViewCards.getLayout().setActiveItem(0);
                                                var grid = me.noteHistoryGridPanel;
                                                if ( grid.getSelectionModel().getSelection().length > 0 ){
                                                    var row = grid.getSelectionModel().getSelection()[0];
                                                    grid.getView().focusRow(row.index);
                                                    me.studentNoteIndexText.setValue( (row.index+1)+' of '+ grid.store.getCount() + (grid.store.getCount()<me.studentNoteCountText.getValue()? ' (filtered)': '') );
                                                }
                                            }
                                        },
                                        { xtype: 'tbspacer', width: 5 },
                                        '-',
                                        { xtype: 'tbspacer', width: 5 },
                                        {
                                            text: 'Clear Filters',
                                            id: 'NotGridClearFiltersButton',
                                            tooltip: 'Clear all grid filters and show all notes for this student',
                                            style: 'border-color: #81A4D0;',
                                            handler: function(){
                                                var grid = me.noteHistoryGridPanel;
                                                if ( grid.getSelectionModel().getSelection().length > 0 ){
                                                    var row = grid.getSelectionModel().getSelection()[0];
                                                    if ( row ){
                                                        me.onClearFiltersClick();
                                                        grid.getSelectionModel().select(row,false,false);
                                                        grid.getView().focusRow(row);
                                                        me.studentNoteIndexText.setValue( (row.index+1)+' of '+grid.store.getCount());
                                                    }
                                                }
                                            }
                                        },
                                        { xtype: 'tbspacer', width: 10 },
                                        {
                                            xtype: 'displayfield',
                                            id: 'StudentNoteIndexText',
                                            fieldLabel: 'Note',
                                            labelWidth: 27,
                                            labelAlign: 'left',
                                            width: 310,
                                            value: '0 of 0',
                                            fieldStyle: 'font-size: 10.5px;font-weight: bold;'
                                        },
                                        '->',
                                        '-',
                                        { xtype: 'tbspacer', width: 2 },
                                        {
                                            xtype: 'tool',
                                            type: 'left',
                                            id: 'NavFirstNoteButton',
                                            style: 'border-color: #81A4D0;',
                                            disabled: false,
                                            tooltip: 'Go to the first note in the grid',
                                            handler: function() {
                                                var grid = me.noteHistoryGridPanel;
                                                grid.getSelectionModel().select(0,false,false);
                                                grid.getView().focusRow(0);
                                                me.studentNoteIndexText.setValue( '1 of '+grid.store.getCount() + (grid.store.getCount()<me.studentNoteCountText.getValue()? ' (filtered)': ''));
                                            }
                                        },
                                        { xtype: 'tbspacer', width: 2 },
                                        {
                                            xtype: 'tool',
                                            type: 'prev',
                                            id: 'NavPreviousNoteButton',
                                            style: 'border-color: #81A4D0;',
                                            disabled: false,
                                            tooltip: 'Go to the previous note in the grid',
                                            handler: function() {
                                                var grid = me.noteHistoryGridPanel;
                                                if ( grid.getSelectionModel().getSelection().length > 0 ){
                                                    var row = grid.getSelectionModel().getSelection()[0];
                                                    if ( row && row.index != 0 ){
                                                        grid.getSelectionModel().select(row.index-1,false,false);
                                                        grid.getView().focusRow(row.index-1);
                                                        me.studentNoteIndexText.setValue( (row.index)+' of '+grid.store.getCount() + (grid.store.getCount()<me.studentNoteCountText.getValue()? ' (filtered)': ''));
                                                    }
                                                }
                                            }
                                        },
                                        { xtype: 'tbspacer', width: 6 },
                                        {
                                            xtype: 'tool',
                                            type: 'next',
                                            id: 'NavNextNoteButton',
                                            style: 'border-color: #81A4D0;',
                                            tooltip: 'Go to the next note in the grid',
                                            handler: function() {
                                                var grid = me.noteHistoryGridPanel;
                                                var lastRowIndex = grid.getStore().count()-1;
                                                if ( grid.getSelectionModel().getSelection().length > 0 ){
                                                    var row = grid.getSelectionModel().getSelection()[0];
                                                    if (row && row.index != lastRowIndex ){
                                                        grid.getSelectionModel().select(row.index+1 ,false,false);
                                                        grid.getView().focusRow(row.index+1);
                                                        me.studentNoteIndexText.setValue( (row.index+2)+' of '+grid.store.getCount() + (grid.store.getCount()<me.studentNoteCountText.getValue()? ' (filtered)': ''));
                                                    }
                                                }
                                            }
                                        },
                                        { xtype: 'tbspacer', width: 2 },
                                        {
                                            xtype: 'tool',
                                            type: 'right',
                                            id: 'NavLastNoteButton',
                                            style: 'border-color: #81A4D0;',
                                            tooltip: 'Go to the last note in the grid',
                                            handler: function() {
                                                var grid = me.noteHistoryGridPanel;
                                                var lastRowIndex = grid.getStore().count()-1;
                                                grid.getSelectionModel().select(lastRowIndex ,false,false);
                                                grid.getView().focusRow(lastRowIndex);
                                                me.studentNoteIndexText.setValue( grid.getStore().count()+' of '+grid.store.getCount() + (grid.store.getCount()<me.studentNoteCountText.getValue()? ' (filtered)': ''));
                                            }
                                        },
                                        { xtype: 'tbspacer', width: 2 },
                                        '-',
                                        { xtype: 'tbspacer', width: 10 },
                                        {
                                            text: 'Actions',
                                            style: 'border-color: #81A4D0;',
                                            menu: [
                                                {
                                                    text: 'Switch to Grid View',
                                                    itemId: 'NotGridActionsButtonSwitchToGridViewMenuItem',
                                                    handler: function() {
                                                        me.notesGridViewCards.getLayout().setActiveItem(0);
                                                        var grid = me.noteHistoryGridPanel;
                                                        if ( grid.getSelectionModel().getSelection().length > 0 ){
                                                            var row = grid.getSelectionModel().getSelection()[0];
                                                            grid.getView().focusRow(row.index);
                                                            me.studentNoteIndexText.setValue( (row.index+1)+' of '+ grid.store.getCount() + (grid.store.getCount()<me.studentNoteCountText.getValue()? ' (filtered)': '') );
                                                        }
                                                    }
                                                },
                                                {
                                                    text: 'Add New Note',
                                                    itemId: 'NotGridActionsButtonNewNoteMenuItem',
                                                    handler: WGU.onHandleNoteMenuClick,
                                                    menu: WGU.WGUStudentNoteMenuArray
                                                },
                                                {
                                                    text: 'cc: this Note',
                                                    itemId: 'NotGridActionsButtonCCNoteMenuItem',
                                                    handler: WGU.onHandleNoteMenuClick
                                                },
                                                {
                                                    text: 'Edit this Note',
                                                    disabled: true,
                                                    id: 'NotGridActionsButtonEditNoteMenuItem',
                                                    itemId: 'NotGridActionsButtonEditNoteMenuItem',
                                                    handler: WGU.onHandleNoteMenuClick
                                                },
                                                {
                                                    text: 'Refresh Notes List',
                                                    id: 'NotGridActionsButtonRefreshNotesMenuItem',
                                                    tooltip: 'Refresh the Student Notes Grid',
                                                    handler: function() {
                                                        try { Ext.getCmp('EmbeddedStudentNoteView').onRefreshNoteHistoryButtonClick(); } catch(e) { if ( Ext.isChrome ) { console.log('Notes Grid Refresh Error:' + (e.description?e.description:e))} }
                                                    }

                                                },
                                                {
                                                    text: 'Open Student Notes',
                                                    tooltip: 'Open Student Notes in new window',
                                                    itemId: 'NotGridActionsButtonOpenNotesMenuItem',
                                                    handler: function() {
                                                        var me = Ext.getCmp('WGUpanel');
                                                        var grid = me.studentsGridPanel.getLayout().getActiveItem();
                                                        var selected = grid.getView().getSelectionModel().getSelection()[0];
                                                        if ( selected.data.Id ) {
                                                            window.open('/apex/Notes?contactId='+selected.data.Id, 'Notes'+selected.data.Id);
                                                        }
                                                        return false;
                                                    }
                                                },
                                                {
                                                    text: 'Open Talisma Notes',
                                                    tooltip: 'Open Legacy Notes (Talisma) in a new window',
                                                    itemId: 'NotGridActionsButtonOpenTalismaNotesMenuItem',
                                                    handler: function(){
                                                        var me = Ext.getCmp('WGUpanel');
                                                        var grid = me.studentsGridPanel.getLayout().getActiveItem();
                                                        var record = grid.getView().getSelectionModel().getSelection()[0];
                                                        if ( record.data.PIDM__c ) {
                                                            talismaWindow = window.open(WGU.talismaLinkBaseUrl+record.data.PIDM__c, "Talisma_"+record.data.PIDM__c, "location=1,status=1,scrollbars=1,width=800,height=600");
                                                            talismaWindow.moveTo(0, 0);
                                                        }
                                                        return false;
                                                    }
                                                }

                                            ]
                                        },
                                        { xtype: 'tbspacer', width: 2 }
                                    ]
                                }]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
        me.noteHistoryGridPanel = Ext.getCmp('NoteHistoryGridPanel');
        me.noteTypeFilterCombo = Ext.getCmp('NoteTypeFilterCombo');
        me.searchTextField = Ext.getCmp('NoteTextFilterText');
        me.studentNoteCountText = Ext.getCmp('StudentNoteCountText');
        me.notesGridViewCards = Ext.getCmp('NotesGridViewCards');
        me.studentNoteIndexText = Ext.getCmp('StudentNoteIndexText');

        me.noteViewerType =  Ext.getCmp('NoteViewerType');
        me.noteViewerSubType = Ext.getCmp('NoteViewerSubType');
        me.noteViewerSubject = Ext.getCmp('NoteViewerSubject');
        me.noteViewerAuthor = Ext.getCmp('NoteViewerAuthor');
        me.noteViewerCreationDate = Ext.getCmp('NoteViewerCreationDate');
        me.noteViewerHTMLWrapper = Ext.fly('NoteViewerHTMLWrapper');
    },

    onNotesGridFilter: function(field, fieldValue, e){
        var me = Ext.getCmp('EmbeddedStudentNoteView');

        if ( notesStore && (notesStore.count() > 0 || (notesStore.snapshot && notesStore.snapshot.items.length > 0) ) ) {

            var grid = me.noteHistoryGridPanel;
            var selected = grid.getView().getSelectionModel().getSelection();
            grid.getView().getSelectionModel().deselectAll(true);
            try {

                var noteTypeFilter = me.noteTypeFilterCombo.getValue() !== "All";
                var noteTextFilter = me.searchTextField.getRawValue() !== "";

                notesStore.filterBy( function(record) {
                    return (noteTypeFilter? record.get('Type__c') == me.noteTypeFilterCombo.getValue(): true) &&
                            (noteTextFilter? record.get('Text__c').toLowerCase().indexOf( me.searchTextField.getRawValue().toLowerCase() ) != -1: true);
                }, me);
                notesStore.sort('WGUCreationDateTime__c','DESC');
                me.noteHistoryGridPanel.columns[3].setSortState(null);
                me.noteHistoryGridPanel.columns[3].setSortState('DESC');

            } finally {
                if ( selected && selected[0] ) {
                    if ( notesStore.findExact( 'Id', selected[0].data.Id ) != -1 ) {
                        grid.getView().getSelectionModel().select( selected, false, false );
                        grid.getView().focusRow(selected[0]);
                    }
                }
            }


        }

    },

    onClearFiltersClick: function() {
        var me = Ext.getCmp('EmbeddedStudentNoteView');
        me.noteTypeFilterCombo.setRawValue('All');
        me.searchTextField.setRawValue('');
        me.noteHistoryGridPanel.filters.clearFilters();
        me.noteHistoryGridPanel.getStore().filterBy( function(record) {
            return true;
        }, me);
        notesStore.sort('WGUCreationDateTime__c', 'DESC');
        Ext.Function.defer( function() {
            me.noteHistoryGridPanel.columns[0].setSortState(null);
            me.noteHistoryGridPanel.columns[3].setSortState(null);
            me.noteHistoryGridPanel.columns[3].setSortState('DESC');
        }, 300);
    },

    onRefreshNoteHistoryButtonClick: function( e, target, options ) {
        var me = Ext.getCmp('EmbeddedStudentNoteView');
        Ext.getCmp('NotesGridViewCards').getLayout().setActiveItem(0);
        Ext.getCmp('GridActionsButtonCCNoteMenuItem').setDisabled( true );
        Ext.getCmp('GridActionsButtonEditNoteMenuItem').setDisabled( true );
        Ext.getCmp('NotGridActionsButtonEditNoteMenuItem').setDisabled( true );
        if ( !Ext.isEmpty(Ext.getCmp('NotesGridMenuEditNoteMenuItem')) ) {
            Ext.getCmp('NotesGridMenuEditNoteMenuItem').setDisabled( true );
        }
        if ( me.studentRecord.Id ) {
            me.noteHistoryGridPanel.getView().setLoading('Refreshing Notes List...');
            me.onClearFiltersClick();
            $soap.batchSize = 200;
            try {
                $soap.query("Select ShortText__c, WGUCreationDateTime__c, Text__c, SubType__c, Student__c, PIDM__c, Name, MentorId__c, Level1Image__c, Id, Type__c, Author__c, Author__r.Name, CreatedBy.Name, AuthorPidm__c, (Select s.EvidenceOfAcademicActivity__c, s.GoalPerformanceSinceLastCall__c, s.WGUStudentNote__c, s.Student__c, s.Name, s.Id From WGUStudentPerformanceSurveys__r s) From WGUStudentNote__c WHERE Student__c = '"+me.contactId+"'", function(queryResult) {
                    if ( queryResult.size*1 > 0 ) {
                        try {
                            queryResult.size *= 1;
                            queryResult.done = (queryResult.done == "true");
                            me.studentNoteCountText.setValue(queryResult.size);
                            var performanceSurveys = [];
                            var notesResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
                            for ( var r=0; r< notesResultSet.length; r++ ) {
                                var note = notesResultSet[r];
                                var shortText = note.Text__c==null? null: note.Text__c.replace( /(<br\ ?\/?>)+/gi,' ' ).replace( /<[^<|>]+?>/gi,'' );
                                note.ShortText__c = Ext.String.ellipsis(shortText,100,true);
                                if ( Ext.Array.contains( me.validNoteTypes, note.Type__c ) ) {
                                    note.Level1Image__c = note.Type__c==null?'':(me.noteTypesPNG+note.Type__c.replace(/\s+/g, '').replace('/', '')+'.png');
                                } else {
                                    note.Level1Image__c = me.noteTypesPNG+'unknown.gif';
                                }
                                if ( note.Author__r == null ) {
                                    note.Author__r = { Name: '' };
                                }
                                if ( !note.WGUStudentPerformanceSurveys__r || !note.WGUStudentPerformanceSurveys__r.records ) {
                                    note.WGUStudentPerformanceSurveys__r = { records:
                                    {
                                        EvidenceOfAcademicActivity__c: null,
                                        GoalPerformanceSinceLastCall__c: null,
                                        WGUStudentNote__c: null,
                                        Student__c: null,
                                        Name: null,
                                        Id: null
                                    }
                                    };
                                }
                            }
                            notesStore.loadRawData( notesResultSet, false );
                        } finally {
                            me.noteHistoryGridPanel.getView().setLoading(false);
                        }
                        if ( !queryResult.done ) {
                            me.addMoreNoteRecords(queryResult.queryLocator);
                        } else {
                            notesStore.sort('WGUCreationDateTime__c','DESC');
                            me.noteHistoryGridPanel.columns[3].setSortState(null);
                            me.noteHistoryGridPanel.columns[3].setSortState('DESC');
                        }
                    } else {
                        me.noteHistoryGridPanel.getView().setLoading(false);
                        me.studentNoteCountText.setValue('0');
                        notesStore.loadRawData( [], false );
                    }
                });
            } catch(e) {
                if ( Ext.isChrome ) {
                    console.log(e);
                }
            }
        }
    },


    addMoreNoteRecords: function(queryLocator) {
        var me = Ext.getCmp('EmbeddedStudentNoteView');
        $soap.batchSize = 200;
        $soap.queryMore( queryLocator, function(queryResult) {
            if ( queryResult.size*1 > 0 ) {
                queryResult.size *= 1;
                queryResult.done = (queryResult.done == "true");
                var performanceSurveys = [];
                var notesResultSet = !Ext.isArray(queryResult.records)? (queryResult.size>0?[queryResult.records]:[]): queryResult.records;
                for ( var r=0; r< notesResultSet.length; r++ ) {
                    var note = notesResultSet[r];
                    var shortText = note.Text__c==null? null: note.Text__c.replace( /(<br\ ?\/?>)+/gi,' ' ).replace( /<[^<|>]+?>/gi,'' );
                    note.ShortText__c = Ext.String.ellipsis(shortText,100,true);
                    if ( Ext.Array.contains( me.validNoteTypes, note.Type__c ) ) {
                        note.Level1Image__c = note.Type__c==null?'':(me.noteTypesPNG+note.Type__c.replace(/\s+/g, '').replace('/', '')+'.png');
                    } else {
                        note.Level1Image__c = me.noteTypesPNG+'unknown.gif';
                    }
                    if ( note.Author__r == null ) {
                        note.Author__r = { Name: '' };
                    }
                    if ( !note.WGUStudentPerformanceSurveys__r || !note.WGUStudentPerformanceSurveys__r.records ) {
                        note.WGUStudentPerformanceSurveys__r = { records:
                        {
                            EvidenceOfAcademicActivity__c: null,
                            GoalPerformanceSinceLastCall__c: null,
                            WGUStudentNote__c: null,
                            Student__c: null,
                            Name: null,
                            Id: null
                        }
                        };
                    }
                }
                notesStore.loadRawData( notesResultSet, true );  //append
                if ( !queryResult.done ) {
                    me.addMoreNoteRecords(queryResult.queryLocator);
                } else {
                    notesStore.sort('WGUCreationDateTime__c','DESC');
                    me.noteHistoryGridPanel.columns[3].setSortState(null);
                    me.noteHistoryGridPanel.columns[3].setSortState('DESC');
                }
            }
        });
    },

    setContactId: function( Id ) {
        var me = Ext.getCmp('EmbeddedStudentNoteView');
        me.contactId = Id;
        me.noteHistoryGridPanel.getView().setLoading('Refreshing Notes List...');
        queryResult = $soap.query("SELECT AccountId,Name,FirstName,LastName,Email,PIDM__c,StudentID__c,Id,Phone,OtherPhone,MobilePhone,HomePhone,TermCode__c,MentorPidm__c,Mentor__c,StudentMentor__c FROM Contact WHERE Id = '"+me.contactId+"' LIMIT 1");
        if ( queryResult.size*1 != 0 ) {
            me.studentRecord = queryResult.records;
            me.talismaLinkUrl = me.talismaLinkUrl + me.studentRecord.PIDM__c;
            me.noteRecord.Author__c = thisUser.Id;
            me.noteRecord.AuthorPidm__c = thisUser.PIDM__c;
            me.noteRecord.Student__c = me.studentRecord.Id;
            me.noteRecord.PIDM__c = me.studentRecord.PIDM__c;
            me.studentNoteCountText.setValue( $soap.query("select count() from WGUStudentNote__c where Student__c = '"+me.contactId+"'").size*1 );
            Ext.callback( function(){ me.onRefreshNoteHistoryButtonClick(); }, window, [], 0 );
        }

    },

    setStudentRecord: function( record ) {
        var me = Ext.getCmp('EmbeddedStudentNoteView');
        me.studentId = record.data.StudentID__c;
        me.noteHistoryGridPanel.getView().setLoading('Refreshing Notes List...');
        me.notesGridViewCards.getLayout().setActiveItem(0);
        me.studentRecord = record.data;
        me.contactId = me.studentRecord.Id;
        me.talismaLinkUrl = me.talismaLinkUrl + me.studentRecord.PIDM__c;
        me.noteRecord.Author__c = thisUser.Id;
        me.noteRecord.AuthorPidm__c = thisUser.PIDM__c;
        me.noteRecord.Student__c = me.studentRecord.Id;
        me.noteRecord.PIDM__c = me.studentRecord.PIDM__c;
        me.studentNoteCountText.setValue( $soap.query("select count() from WGUStudentNote__c where Student__c = '"+me.contactId+"'").size*1 );
        Ext.callback( function(){ me.onRefreshNoteHistoryButtonClick(); }, window, [], 0 );

    },

    onNotesGridviewItemClick: function(dataview, record, item, index, e, options) {
        if (record) {
            Ext.getCmp('GridActionsButtonCCNoteMenuItem').setDisabled(false);
            var me = Ext.getCmp('EmbeddedStudentNoteView');
            var gridRecord = record.data;
            Ext.getCmp('GridActionsButtonEditNoteMenuItem').setDisabled( gridRecord.AuthorPidm__c != thisUser.PIDM__c );
            Ext.getCmp('NotGridActionsButtonEditNoteMenuItem').setDisabled( gridRecord.AuthorPidm__c != thisUser.PIDM__c );
            if ( !Ext.isEmpty(Ext.getCmp('NotesGridMenuEditNoteMenuItem')) ) {
                Ext.getCmp('NotesGridMenuEditNoteMenuItem').setDisabled( gridRecord.AuthorPidm__c != thisUser.PIDM__c );
            }
            me.noteRecord = Ext.decode( me.blankNoteJSON );
            me.noteRecord.Text__c = gridRecord.Text__c;
            me.noteRecord.ShortText__c = me.noteRecord.Text__c==null? null: Ext.String.ellipsis(gridRecord.Text__c.replace( /(<br\ ?\/?>)+/gi,' ' ).replace( /<[^<|>]+?>/gi,'' ),100,true);
            me.noteRecord.Type__c = gridRecord.Type__c;
            me.noteRecord.SubType__c = gridRecord.SubType__c;
            me.noteRecord.Id = gridRecord.Id;
            me.noteRecord.Name = gridRecord.Name;
            me.noteRecord.Author__c = gridRecord.Author__c;
            me.noteRecord.AuthorPidm__c = gridRecord.AuthorPidm__c;
            me.noteRecord.Student__c = gridRecord.Student__c;
            me.noteRecord.PIDM__c = gridRecord.PIDM__c;
            me.noteRecord.Author__r = { Name: gridRecord.AuthorName };
            me.noteRecord.WGUCreationDateTime__c = gridRecord.WGUCreationDateTime__c;

            me.noteRecord.WGUStudentPerformanceSurveys__r = {records:{}};
            me.noteRecord.WGUStudentPerformanceSurveys__r.records.Id = gridRecord.SurveyId;
            me.noteRecord.WGUStudentPerformanceSurveys__r.records.Student_c = gridRecord.SurveyStudent__c;
            me.noteRecord.WGUStudentPerformanceSurveys__r.records.WGUStudentNote__c = gridRecord.SurveyWGUStudentNote__c;
            me.noteRecord.WGUStudentPerformanceSurveys__r.records.Name = gridRecord.SurveyName;
            me.noteRecord.WGUStudentPerformanceSurveys__r.records.EvidenceOfAcademicActivity__c = gridRecord.SurveyEvidenceOfAcademicActivity__c;
            me.noteRecord.WGUStudentPerformanceSurveys__r.records.GoalPerformanceSinceLastCall__c = gridRecord.SurveyGoalPerformanceSinceLastCall__c;

            me.loadNoteRecord(me.noteRecord);
        } else {
            Ext.getCmp('GridActionsButtonCCNoteMenuItem').setDisabled( true );
            Ext.getCmp('GridActionsButtonEditNoteMenuItem').setDisabled( true );
            Ext.getCmp('NotGridActionsButtonEditNoteMenuItem').setDisabled( true );
            if ( !Ext.isEmpty(Ext.getCmp('NotesGridMenuEditNoteMenuItem')) ) {
                Ext.getCmp('NotesGridMenuEditNoteMenuItem').setDisabled( true );
            }
        }
    },

    onNotesGridviewItemDblClick: function(dataview, record, item, index, e, options) {
        var me = Ext.getCmp('EmbeddedStudentNoteView');
        me.notesGridViewCards.getLayout().setActiveItem(1);
        me.onNotesGridviewItemClick(dataview, record, item, index, e, options);
        var grid = me.noteHistoryGridPanel;
        if ( grid.getSelectionModel().getSelection().length > 0 ){
            var row = grid.getSelectionModel().getSelection()[0];
            me.studentNoteIndexText.setValue( (row.index+1)+' of '+ grid.store.getCount() + (grid.store.getCount()<me.studentNoteCountText.getValue()? ' (filtered)': ''));
        }
    },

    getDocMarkup: function(html) {
        var noteHTML = String(html);
        if (Ext.isWebKit) { // strip safari nonsense
            noteHTML = noteHTML.replace(/\sclass="(?:Apple-style-span|Apple-tab-span|khtml-block-placeholder)"/gi, '');
        }

        if (noteHTML.charCodeAt(0) === parseInt("&#8203;".replace(/\D/g, ''), 10)) {
            noteHTML = noteHTML.substring(1);
        }
        noteHTML =
                '<!DOCTYPE html>'
                        + '<html><head><style type="text/css">'
                        + 'body{border:0;margin:0;padding:3px;direction:ltr;'
                        + 'box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;cursor:text;background-color:white;'
                        + 'font-size:12px;font-family:tahoma'
                        + '}</style></head><body>'+noteHTML+'</body></html>';
        return noteHTML;
    },

    loadNoteRecord: function( note ) {
        var me = Ext.getCmp('EmbeddedStudentNoteView');
        if (note) {
            if ( me.notesGridViewCards.getLayout().getActiveItem().getId() != "NoteHistoryGridPanel" ) {
                me.noteViewerHTMLWrapper.hide();
                try {

                    me.noteViewerType.hide();
                    me.noteViewerSubType.hide();
                    me.noteViewerSubject.hide();
                    me.noteViewerAuthor.hide();
                    me.noteViewerCreationDate.hide();

                    me.noteViewerHTMLWrapper = me.noteViewerHTMLWrapper || Ext.get('NoteViewerHTMLWrapper');
                    if ( me.noteViewerHTMLWrapper ) {
                        var noteHTML = me.getDocMarkup( note.Text__c || '' );
                        if (!Ext.isIE) {
                            me.noteViewerHTMLWrapper.dom.src = "data:text/html;charset=utf-8," + encodeURIComponent(noteHTML);
                        } else {
                            try {
                                me.noteViewerHTMLWrapper.win = me.noteViewerHTMLWrapper.win || ( me.noteViewerHTMLWrapper.dom.contentWindow || window.frames[me.noteViewerHTMLWrapper.dom.name] );
                                me.noteViewerHTMLWrapper.doc = me.noteViewerHTMLWrapper.doc || (!Ext.isIE ? me.noteViewerHTMLWrapper.dom.contentDocument : me.noteViewerHTMLWrapper.win.document);
                                me.noteViewerHTMLWrapper.body = me.noteViewerHTMLWrapper.body || (me.noteViewerHTMLWrapper.doc.body || me.noteViewerHTMLWrapper.doc.documentElement);
                                me.noteViewerHTMLWrapper.doc.open();
                                me.noteViewerHTMLWrapper.doc.write(noteHTML);
                                me.noteViewerHTMLWrapper.doc.close();
                            } catch(e) {
                                if ( console && console.log() ) {
                                    try { console.log(e); } catch(e) {}
                                }
                            }
                        }
                    }
                    me.noteViewerType.setRawValue( note.Type__c );
                    me.noteViewerSubType.setRawValue( note.SubType__c );
                    me.noteViewerSubject.setRawValue( note.Name );
                    var noteAuthor = note.Author__r? note.Author__r.Name: (note.AuthorName? note.AuthorName: '');
                    var authorNameHTML;
                    //set Student Mentor Name Links in Student Properties Panel
                    var qtipAttr = 'data-qwidth="'+noteAuthor.length*14+'" data-qtip="View '+noteAuthor+'\'s Profile" ';
                    if ( $sconsole ) {
                        authorNameHTML = "<a "+qtipAttr+" style='text-decoration:none;' id='AuthorNameProfile-"+note.Author__c+"' href='#' onclick='$sconsole.openPrimaryTab( null, \"/"+note.Author__c+"\", true, \""+noteAuthor+"\", function(){}, \""+noteAuthor+"\" );return false;'>" + noteAuthor + "</a>";
                    } else {
                        authorNameHTML = "<a "+qtipAttr+" style='text-decoration:none;' id='AuthorNameProfile-" + note.Author__c + "' href='#' onclick='window.open(\"/"+note.Author__c+"\", \"Mentor_"+note.Author__c+"\" );window.focus();return false;'>" + noteAuthor + "</a>";
                    }

                    me.noteViewerAuthor.setRawValue( authorNameHTML  );
                    me.noteViewerCreationDate.setRawValue( (note.WGUCreationDateTime__c? Ext.Date.format(note.WGUCreationDateTime__c, "m/d/Y g:i a T"): '') );


                    if ( !Ext.isEmpty(note.SurveyId) || ( !Ext.isEmpty(note.WGUStudentPerformanceSurveys__r) && !Ext.isEmpty(note.WGUStudentPerformanceSurveys__r.records.Id) ) ) {
                        var survey = {};
                        survey.evidence = note.WGUStudentPerformanceSurveys__r? note.WGUStudentPerformanceSurveys__r.records.EvidenceOfAcademicActivity__c : note.SurveyEvidenceOfAcademicActivity__c;
                        survey.performancePercent = note.WGUStudentPerformanceSurveys__r? note.WGUStudentPerformanceSurveys__r.records.GoalPerformanceSinceLastCall__c : note.SurveyGoalPerformanceSinceLastCall__c;
                        var performancePercent = survey.performancePercent;
                        var evidences = survey.evidence.split(';');
                        var evidenceHTML = '';
                        var firstItem = true;
                        for ( var x = 0; x < evidences.length ; x++ ) {
                            evidenceHTML += (firstItem?'':'<br/>') + evidences[x];
                            if ( firstItem ) {
                                firstItem = false;
                            }
                        }
                        me.performanceToolTip.update('<p style="font-size: 10.2px;font-weight:bold;padding:1px 0 3px 0;">Student Performance Questions for this Note:</p><table style="font-size: 10.2px;border:0;width:100%"><tr style="padding:0 0 3px 0;font-weight:bold"><td style="">Did this student meet the academic progress goals set on the last call?</td><td>What evidence is present that this student has been academically active since the previous call?</td></tr><tr><td style="margin:2px 0 0 3px;vertical-align:top">'+performancePercent+'</td><td style="margin:2px 0 0 3px;vertical-align:top">'+evidenceHTML+'</td></tr></table>');
                        me.performanceToolTip.setWidth(475);
                        me.attachmentImage.setVisible(true);
                        me.attachmentImage.getEl().setStyle('border','1px solid lightgreen');
                    } else {
                        me.performanceToolTip.update('<p style="font-size: 10.2px;font-weight:bold">No Student Performance Questions for this Note</p>');
                        me.performanceToolTip.setWidth(265);
                        me.attachmentImage.setVisible(false);
                        me.attachmentImage.getEl().setStyle('border','none');
                    }

                    me.noteViewerType.show();
                    me.noteViewerSubType.show();
                    me.noteViewerSubject.show();
                    me.noteViewerAuthor.show();
                    me.noteViewerCreationDate.show();

                } finally {
                    me.noteViewerHTMLWrapper.show();
                }
            }

        }
    }
});

Ext.define('NotesModel', {
    extend  : 'Ext.data.Model',
    fields  : [
        {name: 'Id' , mapping: 'Id', type: 'string'},
        {name: 'Name' , mapping: 'Name', type: 'string'},
        {name: 'Student__c' , mapping: 'Student__c', type: 'string'},
        {name: 'Author__c' , mapping: 'Author__c', type: 'string'},
        {name: 'AuthorName' , mapping: 'Author__r.Name', type: 'string'},
        {name: 'PIDM__c' , mapping: 'PIDM__c', type: 'string'},
        {name: 'AuthorPidm__c' , mapping: 'AuthorPidm__c', type: 'string'},
        {name: 'Level1Image__c' , mapping: 'Level1Image__c', type: 'string'},
        {name: 'WGUCreationDateTime__c', mapping: 'WGUCreationDateTime__c', type: 'date', dateFormat: 'c'},
        {name: 'Type__c' , mapping: 'Type__c', type: 'string'},
        {name: 'SubType__c' , mapping: 'SubType__c', type: 'string'},
        {name: 'Text__c' , mapping: 'Text__c', type: 'string'},
        {name: 'ShortText__c' , mapping: 'ShortText__c', type: 'string'},
        {name: 'SurveyId' , mapping: 'WGUStudentPerformanceSurveys__r.records.Id', type: 'string'},
        {name: 'SurveyStudent__c' , mapping: 'WGUStudentPerformanceSurveys__r.records.Student__c', type: 'string'},
        {name: 'SurveyName' , mapping: 'WGUStudentPerformanceSurveys__r.records.Name', type: 'string'},
        {name: 'SurveyWGUStudentNote__c' , mapping: 'WGUStudentPerformanceSurveys__r.records.WGUStudentNote__c', type: 'string'},
        {name: 'SurveyNoteSubject' , mapping: 'WGUStudentPerformanceSurveys__r.records.Name', type: 'string'},
        {name: 'SurveyEvidenceOfAcademicActivity__c' , mapping: 'WGUStudentPerformanceSurveys__r.records.EvidenceOfAcademicActivity__c', type: 'string'},
        {name: 'SurveyGoalPerformanceSinceLastCall__c' , mapping: 'WGUStudentPerformanceSurveys__r.records.GoalPerformanceSinceLastCall__c', type: 'string'}
    ]
});


var notesStore = Ext.create('Ext.data.Store', {
    pageSize: 125,
    model : 'NotesModel',
    proxy : {
        type: 'memory',
        reader: {
            type: 'json'
        }
    },
    sorters: [{
        property: 'WGUCreationDateTime__c',
        direction: 'DESC'
    }]
});

</script>



<!-- Notes Dialog -->
<script>
Ext.define('WGU.dialog.StudentNoteContainerDlg', {
    extend: 'Ext.container.Container',
    alias: 'widget.wgustudentnotecontainerdlg',
    id: 'StudentNoteContainerDlg',
    noteTypesPNG: '{!$Resource.noteTypesPNG}/',
    height: 524,
    width: 960,
    layout: {
        align: 'stretch',
        type: 'vbox'
    },
    noteSubTypeStoreData: [],
    actionSubTypeStoreData: [],

    getSubTypePickListValues: function(typeValue, index) {
        var me = Ext.getCmp('StudentNoteContainerDlg');
        var returnObj = {
            success: true,
            message: 'Operation Ran Successfully',
            values: []
        };

        try {
            var picklistValues = WGU.WGUStudentNoteSubTypeMeta.picklistValues;

            // sub function to do the validFor test
            function isDependentValue(index, validFor) {
                var base64 = new sforce.Base64Binary("");
                var decoded = base64.decode(validFor);
                var bits = decoded.charCodeAt(index >> 3);

                return ((bits & (0x80 >> (index % 8))) != 0);
            }

            for (var i = 0; i < picklistValues.length; i++) {
                if (isDependentValue(index, picklistValues[i].validFor)) {
                    var newValue = new Object();
                    newValue.label = picklistValues[i].label;
                    newValue.value = picklistValues[i].value;
                    newValue.defaultValue = picklistValues[i].defaultValue;
                    newValue.validFor = picklistValues[i].validFor;
                    newValue.validForName = typeValue;
                    returnObj.values.push(newValue);
                }
            }

        } catch (exception) {
            returnObj.success = false;
            returnObj.message = exception;
        }
        return returnObj;
    },
    //edit 12-10 action type
    getActionSubTypePickListValues: function(typeValue, index) {
        var me = Ext.getCmp('StudentNoteContainerDlg');
        var returnObj = {
            success: true,
            message: 'Operation Ran Successfully',
            values: []
        };

        try {
            var picklistValues = WGU.WGUStudentActionSubTypeMeta.picklistValues;

            // sub function to do the validFor test
            function isDependentValue(index, validFor) {
                var base64 = new sforce.Base64Binary("");
                var decoded = base64.decode(validFor);
                var bits = decoded.charCodeAt(index >> 3);

                return ((bits & (0x80 >> (index % 8))) != 0);
            }

            for (var i = 0; i < picklistValues.length; i++) {
                if (isDependentValue(index, picklistValues[i].validFor)) {
                    var newValue = new Object();
                    newValue.label = picklistValues[i].label;
                    newValue.value = picklistValues[i].value;
                    newValue.defaultValue = picklistValues[i].defaultValue;
                    newValue.validFor = picklistValues[i].validFor;
                    newValue.validForName = typeValue;
                    returnObj.values.push(newValue);
                }
            }

        } catch (exception) {
            returnObj.success = false;
            returnObj.message = exception;
        }
        return returnObj;
    },
    listeners: {
        beforerender: {
            fn: function() {
                var me = Ext.getCmp('StudentNoteContainerDlg');
                if ( !window.thisUser ) {
                    window.thisUser = $soap.retrieve("Id,FirstName,LastName,Name,ProfileName__c,SmallPhotoUrl,PIDM__c","User",['{!$User.Id}'])[0];
                }
            },
            scope: this
        },
        afterlayout: {
            fn: function() {
                var me = Ext.getCmp('StudentNoteContainerDlg');
                me.saveNoteButton = Ext.getCmp('SaveNoteButtonDlg');
                me.NoteHTMLTextEditorDlg = Ext.getCmp('NoteHTMLTextEditorDlg');

                if ( !Ext.isEmpty( me.viewState.note ) ) {
                    var note = me.viewState.note;
                    if ( note.Author__c == thisUser.Id ) {
                        me.isEditable = true;
                    }
                    var gridRecord = note;
                    me.noteRecord = Ext.decode( me.blankNoteJSON );
                    me.noteRecord.Text__c = gridRecord.Text__c;
                    me.noteRecord.ShortText__c = me.noteRecord.Text__c==null? null: Ext.String.ellipsis(gridRecord.Text__c.replace( /(<br\ ?\/?>)+/gi,' ' ).replace( /<[^<|>]+?>/gi,'' ),100,true);
                    me.noteRecord.Type__c = gridRecord.Type__c;
                    me.noteRecord.SubType__c = gridRecord.SubType__c;
                    me.noteRecord.Id = me.viewState.cc || Ext.isEmpty(me.viewState.note.Id)? null: gridRecord.Id;
                    me.noteRecord.Name = gridRecord.Name;
                    me.noteRecord.Author__c = me.viewState.cc || Ext.isEmpty(me.viewState.note.Id)? thisUser.Id: gridRecord.Author__c;
                    me.noteRecord.AuthorPidm__c = me.viewState.cc || Ext.isEmpty(me.viewState.note.Id)? thisUser.PIDM__c: gridRecord.AuthorPidm__c;
                    me.noteRecord.Student__c = gridRecord.Student__c;
                    me.noteRecord.PIDM__c = gridRecord.PIDM__c;
                    me.noteRecord.Author__r = { Name: me.viewState.cc || Ext.isEmpty(me.viewState.note.Id)? thisUser.Name: gridRecord.AuthorName };
                    me.noteRecord.WGUCreationDateTime__c = me.viewState.cc || Ext.isEmpty(me.viewState.note.Id)? null: gridRecord.WGUCreationDateTime__c;

                    me.noteRecord.WGUStudentPerformanceSurveys__r = {records:{}};
                    if (me.viewState.cc) {
                        me.noteRecord.WGUStudentPerformanceSurveys__r.records.Id = null;
                        me.noteRecord.WGUStudentPerformanceSurveys__r.records.Student_c = null;
                        me.noteRecord.WGUStudentPerformanceSurveys__r.records.WGUStudentNote__c = null;
                        me.noteRecord.WGUStudentPerformanceSurveys__r.records.Name = null;
                        me.noteRecord.WGUStudentPerformanceSurveys__r.records.EvidenceOfAcademicActivity__c = null;
                        me.noteRecord.WGUStudentPerformanceSurveys__r.records.GoalPerformanceSinceLastCall__c = null;

                        me.noteRecord.SurveyId = null;
                        me.noteRecord.SurveyStudent_c = null;
                        me.noteRecord.SurveyWGUStudentNote__c = null;
                        me.noteRecord.SurveyName = null;
                        me.noteRecord.SurveyEvidenceOfAcademicActivity__c = null;
                        me.noteRecord.SurveyGoalPerformanceSinceLastCall__c = null;
                    } else {
                        me.noteRecord.WGUStudentPerformanceSurveys__r.records.Id = gridRecord.SurveyId;
                        me.noteRecord.WGUStudentPerformanceSurveys__r.records.Student_c = gridRecord.SurveyStudent__c;
                        me.noteRecord.WGUStudentPerformanceSurveys__r.records.WGUStudentNote__c = gridRecord.SurveyWGUStudentNote__c;
                        me.noteRecord.WGUStudentPerformanceSurveys__r.records.Name = gridRecord.SurveyName;
                        me.noteRecord.WGUStudentPerformanceSurveys__r.records.EvidenceOfAcademicActivity__c = gridRecord.SurveyEvidenceOfAcademicActivity__c;
                        me.noteRecord.WGUStudentPerformanceSurveys__r.records.GoalPerformanceSinceLastCall__c = gridRecord.SurveyGoalPerformanceSinceLastCall__c;

                        me.noteRecord.SurveyId = gridRecord.SurveyId;
                        me.noteRecord.SurveyStudent_c = gridRecord.SurveyStudent__c;
                        me.noteRecord.SurveyWGUStudentNote__c = gridRecord.SurveyWGUStudentNote__c;
                        me.noteRecord.SurveyName = gridRecord.SurveyName;
                        me.noteRecord.SurveyEvidenceOfAcademicActivity__c = gridRecord.SurveyEvidenceOfAcademicActivity__c;
                        me.noteRecord.SurveyGoalPerformanceSinceLastCall__c = gridRecord.SurveyGoalPerformanceSinceLastCall__c;
                    }
                    setTimeout( function() {
                        me.loadDlgNoteRecord(me.noteRecord);
                    }, 250 );
                } else {
                    setTimeout( function() {
                        me.newNoteButtonClick();
                    }, 250 );
                }

                setTimeout( function() {
                    if ( Ext.isEmpty(me.noteTypeCombo.getValue()) ) {
                        me.noteTypeCombo.focus();
                    } else if ( Ext.isEmpty(me.noteSubTypeCombo.getValue()) && me.noteSubTypeCombo.store.count() > 0 ) {
                        me.noteSubTypeCombo.focus();
                    } else if ( !Ext.isEmpty( me.NoteHTMLTextEditorDlg.getValue() ) ) {
                        if ( me.isStudentMentor ) {
                            me.hundredPercentRadio.focus();
                        } else {
                            Ext.select('iframe#NoteHTMLTextEditorDlg-inputCmp-iframeEl').elements[0].focus();
                            setTimeout( function(){me.NoteHTMLTextEditorDlg.focus();}, 150);
                        }
                    }

                }, 1000);
            },
            scope: this
        }
    },

    initComponent: function() {
        var me = this;

        me.blankNoteJSON = '{"attributes":{"type": "WGUStudentNote__c","url":null},"ShortText__c":null,"WGUCreationDateTime__c":null,"Text__c":null,"SystemModstamp":null,"SubType__c":null,"Student__c":null,"PIDM__c":null,"Name":null,"MentorId__c":null,"Level1Image__c":null,"LastModifiedDate":null,"LastModifiedById":null,"LastActivityDate":null,"IsDeleted": false,"InteractionID__c":null,"Id":null,"CreatedDate":null,"CreatedById":null,"Type__c":null,"Author__c":null,"Author__r":{"attributes":{"type": "User","url":null},"Name":null},"CreatedBy":{"attributes":{"type": "User","url":null},"Name":null},"AuthorPidm__c":null}';
        me.blankSurveyJSON = '{"attributes":{"type":"WGUStudentPerformanceSurvey__c","url":null},"EvidenceOfAcademicActivity__c":null,"GoalPerformanceSinceLastCall__c":null,"WGUStudentNote__c":null,"Student__c":null,"Name":null,"LastModifiedDate":null,"LastModifiedById":null,"Id":null,"CreatedDate":null,"CreatedById":null,"CreatedBy":{"attributes":{"type":"User","url":null},"Name":null}}';
        me.validNoteTypes = [];
        me.validActionTypes = [];
        me.isStudentMentor = false;
        me.AtRiskScore = null;
        me.studentRecord;
        me.talismaLinkUrl = 'https://webapp4.wgu.edu/MentorNotes?pidm=';
        me.isEditable = false;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    id: 'NoteEntryContainerDlg',
                    minHeight: 180,
                    flex: 1,
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    items: [
                        {
                            xtype: 'container',
                            id: 'NoteEntryWrapperContainerDlg',
                            flex: 1,
                            layout: {
                                align: 'stretch',
                                type: 'vbox'
                            },
                            items: [
                                {
                                    xtype: 'container',
                                    id: 'NoteEntryTopContainerDlg',
                                    height: 234,
                                    layout: {
                                        type: 'absolute'
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            x: 0,
                                            y: 0,
                                            id: 'NoteTypeComboDlg',
                                            selectOnFocus: true,
                                            editable: true,
                                            typeAhead: true,
                                            forceSelection: true,
                                            multiSelect: false,
                                            fieldLabel: 'Note Type',
                                            tabIndex: 1,
                                            labelAlign: 'top',
                                            labelStyle: 'font-size: 10.5px;font-weight: 700',
                                            width: 220,
                                            queryMode: 'local',
                                            displayField: 'name',
                                            valueField: 'value',
                                            store: Ext.create('Ext.data.Store', {
                                                fields: ['value', 'name'],
                                                data : []
                                            }),
                                            allowBlank: true,
                                            listeners: {
                                                change: {
                                                    fn: me.noteTypeComboChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            x: 230,
                                            y: 0,
                                            id: 'NoteSubTypeComboDlg',
                                            editable: true,
                                            typeAhead: true,
                                            selectOnFocus: true,
                                            forceSelection: true,
                                            multiSelect: false,
                                            fieldLabel: 'Note Sub Type',
                                            tabIndex: 2,
                                            labelAlign: 'top',
                                            labelStyle: 'font-size: 10.5px;font-weight: 700',
                                            width: 220,
                                            queryMode: 'local',
                                            displayField: 'noteSubType',
                                            valueField: 'noteSubTypeValue',
                                            store: Ext.create('Ext.data.Store', {
                                                fields  : [
                                                    {name: 'noteSubType' , mapping: 'noteSubType', type: 'string'},
                                                    {name: 'noteSubTypeValue' , mapping: 'noteSubTypeValue', type: 'string'}
                                                ],
                                                proxy: {
                                                    type: 'memory',
                                                    reader: {
                                                        type: 'json',
                                                        root: 'subTypes'
                                                    }
                                                },
                                                remoteSort: false,
                                                recordSets : me.noteSubTypeStoreData,
                                                setSubTypeRecords: function(record) {
                                                    var result;
                                                    if ( this.recordSets && record ) {
                                                        for ( var x=0; x < this.recordSets.length; x++ ) {
                                                            if ( this.recordSets[x].noteType == record ) {
                                                                this.loadRawData(this.recordSets[x], false);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    return result;
                                                }
                                            }),
                                            disabled: false,
                                            readOnly: true,
                                            allowBlank: true,
                                            listeners: {
                                                change: {
                                                    fn: me.disableSave,
                                                    scope: me
                                                },
                                                blur: {
                                                    fn: function(){
                                                        if ( me.noteSubTypeCombo.readOnly && Ext.isEmpty(me.noteSubTypeCombo.getValue()) && !Ext.isEmpty(me.noteRecord.SubType__c) ) {
                                                            me.noteSubTypeCombo.setRawValue(me.noteRecord.SubType__c);
                                                        }
                                                    },
                                                    scope: me
                                                },
                                                focus: {
                                                    fn: function(){
                                                        if ( me.noteSubTypeCombo.readOnly && Ext.isEmpty(me.noteSubTypeCombo.getValue()) && !Ext.isEmpty(me.noteRecord.SubType__c) ) {
                                                            me.noteSubTypeCombo.setRawValue(me.noteRecord.SubType__c);
                                                        }
                                                    },
                                                    scope: me
                                                }
                                            },
                                            listConfig: {
                                                resizable: false,
                                                width: 240,
                                                matchFieldWidth: false,
                                                minWidth: 240
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            x: 460,
                                            y: 0,
                                            id: 'NoteSubjectTextFieldDlg',
                                            selectOnFocus: true,
                                            fieldLabel: 'Subject',
                                            tabIndex: 3,
                                            labelStyle: 'font-size: 10.5px;font-weight: 700',
                                            labelAlign: 'top',
                                            allowBlank: true,
                                            width: 497,
                                            maxLength: 80,
                                            enableKeyEvents: true,
                                            listeners: {
                                                keydown: {
                                                    fn: me.onSubjectTextKeyDown,
                                                    scope: me,
                                                    buffer: 100
                                                },
                                                change: {
                                                    fn: me.noteSubjectTextFieldChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'panel',
                                            id: 'PerformanceSurveyPanelDlg',
                                            cls: 'PerformanceSurveyPanelDlg',
                                            title: 'Student Performance Questions',
                                            bodyStyle: 'background:#F2F2F2;',
                                            x: 0,
                                            y: 53,
                                            width: 957,
                                            height: 100,
                                            border: 1,
                                            layout: {
                                                type: 'absolute'
                                            },
                                            items: [
                                                {
                                                    xtype: 'label',
                                                    id: 'PerformanceQuestion1LabelDlg',
                                                    style: 'font-size:10.5px;font-weight: bold;color: #505050;',
                                                    width: 225,
                                                    x: 5,
                                                    y: 2,
                                                    text: 'Did this student meet the academic progress goals set on the last call?'
                                                },
                                                {
                                                    xtype: 'radiofield',
                                                    id: 'HundredPercentRadioDlg',
                                                    x: 5,
                                                    y: 33,
                                                    cls: 'progressCls',
                                                    style: 'font-size:10px;',
                                                    boxLabel: 'Yes - 100%',
                                                    handler: me.disableSave,
                                                    checked: me.isStudentMentor,
                                                    name: 'goalPerformanceObj'
                                                },
                                                {
                                                    xtype: 'radiofield',
                                                    id: 'ParitalPercentRadioDlg',
                                                    x: 85,
                                                    y: 33,
                                                    cls: 'progressCls',
                                                    style: 'font-size:10px;',
                                                    boxLabel: 'Partially Met',
                                                    handler: me.disableSave,
                                                    checked: false,
                                                    name: 'goalPerformanceObj'
                                                },
                                                {
                                                    xtype: 'radiofield',
                                                    id: 'ZeroPercentRadioDlg',
                                                    x: 165,
                                                    y: 33,
                                                    cls: 'progressCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.disableSave,
                                                    boxLabel: 'No - 0%',
                                                    checked: false,
                                                    name: 'goalPerformanceObj'
                                                },
                                                {
                                                    xtype: 'label',
                                                    id: 'PerformanceQuestion2LabelDlg',
                                                    style: 'font-size:10.5px;font-weight: bold;color: #505050;',
                                                    x: 257,
                                                    y: 2,
                                                    text: 'What evidence is present that this student has been academically active since the previous call?'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'EngagedInNewStudentProtocolsCheckboxDlg',
                                                    x: 257,
                                                    y: 17,
                                                    cls: 'evidenceCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.onPerformanceEvidenceCheckChange,
                                                    fieldLabel: '',
                                                    hideLabel: true,
                                                    boxLabel: 'Engaged in New Student Protocols',
                                                    checked: false,
                                                    inputValue: 'Engaged in New Student Protocols'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'EngagedInLearningResourceCheckboxDlg',
                                                    x: 257,
                                                    y: 33,
                                                    cls: 'evidenceCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.onPerformanceEvidenceCheckChange,
                                                    fieldLabel: '',
                                                    hideLabel: true,
                                                    boxLabel: 'Engaged in a Learning Resource',
                                                    checked: false,
                                                    inputValue: 'Engaged in a Learning Resource'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'UtilizedACommunityResourceCheckboxDlg',
                                                    x: 257,
                                                    y: 49,
                                                    cls: 'evidenceCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.onPerformanceEvidenceCheckChange,
                                                    fieldLabel: '',
                                                    hideLabel: true,
                                                    boxLabel: 'Utilized a Community Resource',
                                                    checked: false,
                                                    inputValue: 'Utilized a Community Resource'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'AttendedASeminarCheckboxDlg',
                                                    x: 447,
                                                    y: 17,
                                                    cls: 'evidenceCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.onPerformanceEvidenceCheckChange,
                                                    fieldLabel: '',
                                                    hideLabel: true,
                                                    boxLabel: 'Attended a Seminar',
                                                    checked: false,
                                                    inputValue: 'Attended a Seminar'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'MetWithACourseMentorCheckboxDlg',
                                                    x: 447,
                                                    y: 33,
                                                    cls: 'evidenceCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.onPerformanceEvidenceCheckChange,
                                                    fieldLabel: '',
                                                    hideLabel: true,
                                                    boxLabel: 'Met with a Course Mentor',
                                                    checked: false,
                                                    inputValue: 'Met with a Course Mentor'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'TookAPreAssessmentCheckboxDlg',
                                                    x: 447,
                                                    y: 49,
                                                    cls: 'evidenceCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.onPerformanceEvidenceCheckChange,
                                                    fieldLabel: '',
                                                    hideLabel: true,
                                                    boxLabel: 'Took a Pre-Assessment',
                                                    checked: false,
                                                    inputValue: 'Took a Pre-Assessment'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'ScheduledAnAssessmentCheckboxDlg',
                                                    x: 606,
                                                    y: 17,
                                                    cls: 'evidenceCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.onPerformanceEvidenceCheckChange,
                                                    fieldLabel: '',
                                                    hideLabel: true,
                                                    boxLabel: 'Scheduled an Assessment',
                                                    checked: false,
                                                    inputValue: 'Scheduled an Assessment'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'TookAndFailedAnAssessmentCheckboxDlg',
                                                    x: 606,
                                                    y: 33,
                                                    cls: 'evidenceCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.onPerformanceEvidenceCheckChange,
                                                    fieldLabel: '',
                                                    hideLabel: true,
                                                    boxLabel: 'Took and Failed an Assessment',
                                                    checked: false,
                                                    inputValue: 'Took and Failed an Assessment'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'TookAndPassedAnAssessmentCheckboxDlg',
                                                    x: 606,
                                                    y: 49,
                                                    cls: 'evidenceCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.onPerformanceEvidenceCheckChange,
                                                    fieldLabel: '',
                                                    hideLabel: true,
                                                    boxLabel: 'Took and Passed an Assessment',
                                                    checked: false,
                                                    inputValue: 'Took and Passed an Assessment'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'SubmittedATaskStreamTaskCheckboxDlg',
                                                    x: 790,
                                                    y: 17,
                                                    cls: 'evidenceCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.onPerformanceEvidenceCheckChange,
                                                    fieldLabel: '',
                                                    hideLabel: true,
                                                    boxLabel: 'Submitted a TaskStream Task',
                                                    checked: false,
                                                    inputValue: 'Submitted a TaskStream Task'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'RevisedATaskStreamTaskCheckboxDlg',
                                                    x: 790,
                                                    y: 33,
                                                    cls: 'evidenceCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.onPerformanceEvidenceCheckChange,
                                                    fieldLabel: '',
                                                    hideLabel: true,
                                                    boxLabel: 'Revised a TaskStream Task',
                                                    checked: false,
                                                    inputValue: 'Revised a TaskStream Task'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'NoEvidenceIsPresentCheckboxDlg',
                                                    x: 790,
                                                    y: 49,
                                                    cls: 'evidenceCls',
                                                    style: 'font-size:10px;',
                                                    handler: me.onPerformanceEvidenceCheckChange,
                                                    fieldLabel: '',
                                                    hideLabel: true,
                                                    boxLabel: 'No Evidence is Present',
                                                    checked: false,
                                                    inputValue: 'No Evidence is Present'
                                                }

                                            ]
                                        },
                                      //Current code would enable and disable this panel but keep it visible at all times.
                                        //Hiding the panel will require significant changes to the layout setup of this section to allow for resizing.
                                        //Student Performance Action drop-down in panel.
                                        //Added 10/3/2013 by Katarina Melki
                                        {
                                            xtype: 'panel',
                                            id: 'performanceActionsPanel',
                                            cls: 'performanceSurveyPanel',
                                            title: 'Student Performance Actions:',
                                            bodyStyle: 'background:#F2F2F2;',
                                            x: 0,
                                            y: 153,
                                            width: 957,
                                            height: 60,
                                            border: 1, 
                                            layout: { type: 'absolute' },
                                            items: 
                                            [
                                                {
                                                    xtype: 'combo',
                                                    id: 'performanceActionCombo',
                                                    typeAhead: true,
                                                    width: 945,
                                                    x: 5,
                                                    y: 2,
                                                    hidden: true,
                                                    store: performanceActionStore,
                                                    displayField: 'text',
                                                    valueField: 'text',
                                                    emptyText: 'Select Student Performance Action...',
                                                    valueNotFoundText: 'Select Student Performance Action...',
                                                    queryMode: 'local',
                                                    editable: false
                                                },
                                                //12/10 personalization new sub-type change
                                                {
                                                    xtype: 'combo',
                                                    x: 5,
                                                    y: 5,
                                                    id: 'actionTypeCombo',
                                                    selectOnFocus: true,
                                                    editable: true,
                                                    typeAhead: true,
                                                    forceSelection: true,
                                                    multiSelect: false,
                                                    fieldLabel: 'Action Type',
                                                    tabIndex: 1,
                                                    labelAlign: 'left',
                                                    labelStyle: 'font-size: 10.5px;font-weight: 700',
                                                    width: 280,
                                                    queryMode: 'local',
                                                    displayField: 'name',
                                                    valueField: 'value',
                                                    store: Ext.create('Ext.data.Store', {
                                                        fields: ['value', 'name'],
                                                        data : []
                                                    }),
                                                    allowBlank: true,
                                                    listeners: {
                                                        change: {
                                                            fn: me.actionTypeComboChange,
                                                            scope: me
                                                        }
                                                    }
                                                },
                                                {
                                                    xtype: 'combo',
                                                    x: 300,
                                                    y: 5,
                                                    id: 'actionSubTypeCombo',
                                                    editable: true,
                                                    typeAhead: true,
                                                    selectOnFocus: true,
                                                    forceSelection: true,
                                                    multiSelect: false,
                                                    fieldLabel: 'Action Sub Type',
                                                    tabIndex: 2,
                                                    labelAlign: 'left',
                                                    labelStyle: 'font-size: 10.5px;font-weight: 700',
                                                    width: 500,
                                                    queryMode: 'local',
                                                    displayField: 'actionSubType',
                                                    valueField: 'actionSubTypeValue',
                                                    store: Ext.create('Ext.data.Store', {
                                                        fields  : [
                                                            {name: 'actionSubType' , mapping: 'actionSubType', type: 'string'},
                                                            {name: 'actionSubTypeValue' , mapping: 'actionSubTypeValue', type: 'string'}
                                                        ],
                                                        proxy: {
                                                            type: 'memory',
                                                            reader: {
                                                                type: 'json',
                                                                root: 'subTypes'
                                                            }
                                                        },
                                                        remoteSort: false,
                                                        recordSets : me.actionSubTypeStoreData,
                                                        setSubTypeRecords: function(record) {
                                                            var result;
                                                            if ( this.recordSets && record ) {
                                                                for ( var x=0; x < this.recordSets.length; x++ ) {
                                                                    if ( this.recordSets[x].actionType == record ) {
                                                                        this.loadRawData(this.recordSets[x], false);
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            return result;
                                                        }
                                                    }),
                                                    disabled: false,
                                                    readOnly: true,
                                                    allowBlank: true,
                                                    listeners: {
                                                        change: {
                                                            fn: me.disableSave,
                                                            scope: me
                                                        },
                                                        blur: {
                                                            fn: function(){
                                                                if ( me.actionSubTypeCombo.readOnly && Ext.isEmpty(me.actionSubTypeCombo.getValue()) && !Ext.isEmpty(me.noteRecord.PersonalizationMenuSubType__c) ) {
                                                                    me.actionSubTypeCombo.setRawValue(me.noteRecord.PersonalizationMenuSubType__c);
                                                                }
                                                            },
                                                            scope: me
                                                        },
                                                        focus: {
                                                            fn: function(){
                                                                if ( me.actionSubTypeCombo.readOnly && Ext.isEmpty(me.actionSubTypeCombo.getValue()) && !Ext.isEmpty(me.noteRecord.PersonalizationMenuSubType__c) ) {
                                                                    me.actionSubTypeCombo.setRawValue(me.noteRecord.SPersonalizationMenuSubType__c);
                                                                }
                                                            },
                                                            scope: me
                                                        }
                                                    },
                                                    listConfig: {
                                                        resizable: false,
                                                        width: 240,
                                                        matchFieldWidth: false,
                                                        minWidth: 240
                                                    }
                                                }   
                                            ]
                                        },
                                                        
                                        {
                                            xtype: 'label',
                                            style: 'font-size: 10.5px;font-weight: 700',
                                            x: 2,
                                            y: 218,
                                            text: 'Academic Progress Goals and Other Notes:'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'htmleditor',
                                    selectOnFocus: true,
                                    id: 'NoteHTMLTextEditorDlg',
                                    flex: 1,
                                    overflowY: 'auto'
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
        me.zeroPercentRadio = Ext.getCmp('ZeroPercentRadioDlg');
        me.paritalPercentRadio = Ext.getCmp('ParitalPercentRadioDlg');
        me.hundredPercentRadio = Ext.getCmp('HundredPercentRadioDlg');
        me.engagedInNewStudentProtocolsCheckbox = Ext.getCmp('EngagedInNewStudentProtocolsCheckboxDlg');
        me.engagedInLearningResourceCheckbox = Ext.getCmp('EngagedInLearningResourceCheckboxDlg');
        me.utilizedACommunityResourceCheckbox = Ext.getCmp('UtilizedACommunityResourceCheckboxDlg');
        me.attendedASeminarCheckbox = Ext.getCmp('AttendedASeminarCheckboxDlg');
        me.metWithACourseMentorCheckbox = Ext.getCmp('MetWithACourseMentorCheckboxDlg');
        me.tookAPreAssessmentCheckbox = Ext.getCmp('TookAPreAssessmentCheckboxDlg');
        me.scheduledAnAssessmentCheckbox = Ext.getCmp('ScheduledAnAssessmentCheckboxDlg');
        me.tookAndFailedAnAssessmentCheckbox = Ext.getCmp('TookAndFailedAnAssessmentCheckboxDlg');
        me.tookAndPassedAnAssessmentCheckbox = Ext.getCmp('TookAndPassedAnAssessmentCheckboxDlg');
        me.submittedATaskStreamTaskCheckbox = Ext.getCmp('SubmittedATaskStreamTaskCheckboxDlg');
        me.revisedATaskStreamTaskCheckbox = Ext.getCmp('RevisedATaskStreamTaskCheckboxDlg');
        me.noEvidenceIsPresentCheckbox = Ext.getCmp('NoEvidenceIsPresentCheckboxDlg');
        me.lastNoteTypeValue = '';
        me.noteTypeCombo = Ext.getCmp('NoteTypeComboDlg');
        me.noteSubTypeCombo = Ext.getCmp('NoteSubTypeComboDlg');
        //12-10
        me.actionTypeCombo = Ext.getCmp('actionTypeCombo');
        me.actionSubTypeCombo = Ext.getCmp('actionSubTypeCombo');
        
        me.noteSubjectTextField = Ext.getCmp('NoteSubjectTextFieldDlg');
        me.noteTypeStore = me.noteTypeCombo.store; 
        me.noteSubTypeStore = me.noteSubTypeCombo.store;
        //12-10
        me.actionTypeStore = me.actionTypeCombo.store;
        me.actionSubTypeStore = me.actionSubTypeCombo.store;
        me.performanceActionCombo=Ext.getCmp('performanceActionCombo');
        me.performanceActionsPanel=Ext.getCmp('performanceActionsPanel');
 
        //edit 12-10
        setTimeout( function() { //get dependent picklist values for Note Sub Types
            if ( Ext.isEmpty(WGU) || Ext.isEmpty(WGU.WGUStudentNoteMeta) ) {
                WGU = {};
                WGU.WGUStudentNoteMeta = $soap.describeSObject("WGUStudentNote__c");
                //Capture Note Type and Note Sub Type Meta data
                for ( var f = 0; f < WGU.WGUStudentNoteMeta.fields.length; f++ ) {
                    var field = WGU.WGUStudentNoteMeta.fields[f];
                    if ( field.name == "Type__c" ) {
                        WGU.WGUStudentNoteTypeMeta = field;
                    } else if ( field.name == "SubType__c" ) {
                        WGU.WGUStudentNoteSubTypeMeta = field;
                    } else if ( field.name == "PersonalizationMenu__c" ) {
                        WGU.WGUStudentActionTypeMeta = field;
                    } else if ( field.name == "PersonalizationMenuSubType__c" ) {
                        WGU.WGUStudentActionSubTypeMeta = field;
                    }
                }
            }
            noteTypeDataArray = [];
            for ( var x = 0; x < WGU.WGUStudentNoteTypeMeta.picklistValues.length; x++ ) {
                var pickValue = WGU.WGUStudentNoteTypeMeta.picklistValues[x];
                noteTypeDataArray.push( {name: pickValue.label, value: pickValue.value} );
                var noteTypeValue = pickValue.value;
                me.validNoteTypes[x] = noteTypeValue;
                me.noteSubTypeStoreData[x] = { 'noteType': noteTypeValue, subTypes: [] };
                var currValues = me.getSubTypePickListValues( noteTypeValue, x );
                if ( currValues.success ) {
                    for ( y=0; y< currValues.values.length; y++ ) {
                        if ( currValues.values[y].validForName == noteTypeValue ) {
                            var noteSubTypeValue = currValues.values[y].value;
                            var jsonStr = '{ "noteSubType": "'+noteSubTypeValue+'", "noteSubTypeValue": "'+noteSubTypeValue+'"}';
                            me.noteSubTypeStoreData[x].subTypes[y] = Ext.decode(jsonStr);
                        }
                    }
                }
            }
            me.noteTypeStore.loadRawData(noteTypeDataArray);
            
            
            //edit 12-10
            actionTypeDataArray = [];
            for ( var x = 0; x < WGU.WGUStudentActionTypeMeta.picklistValues.length; x++ ) {
                var pickValue = WGU.WGUStudentActionTypeMeta.picklistValues[x];
                actionTypeDataArray.push( {name: pickValue.label, value: pickValue.value} );
                var actionTypeValue = pickValue.value;
                me.validActionTypes[x] = actionTypeValue;
                me.actionSubTypeStoreData[x] = { 'actionType': actionTypeValue, subTypes: [] };
                var currValues = me.getActionSubTypePickListValues( actionTypeValue, x );
                if ( currValues.success ) {
                    for ( y=0; y< currValues.values.length; y++ ) {
                        if ( currValues.values[y].validForName == actionTypeValue ) {
                            var actionSubTypeValue = currValues.values[y].value;
                            var jsonStr = '{ "actionSubType": "'+actionSubTypeValue+'", "actionSubTypeValue": "'+actionSubTypeValue+'"}';
                            me.actionSubTypeStoreData[x].subTypes[y] = Ext.decode(jsonStr);
                        }
                    }
                }
            }
            me.actionTypeStore.loadRawData(actionTypeDataArray);

        }, 0);
    },

    closeNotePageClick: function( e, target, options ) {
        me.hide();
    },


    onPerformanceEvidenceCheckChange: function( checkbox, checked ) {
        var me = Ext.getCmp('StudentNoteContainerDlg');
        if ( checkbox.id == 'NoEvidenceIsPresentCheckboxDlg' && checked ) {
            me.engagedInNewStudentProtocolsCheckbox.setValue(false);
            me.engagedInLearningResourceCheckbox.setValue(false);
            me.utilizedACommunityResourceCheckbox.setValue(false);
            me.attendedASeminarCheckbox.setValue(false);
            me.metWithACourseMentorCheckbox.setValue(false);
            me.tookAPreAssessmentCheckbox.setValue(false);
            me.scheduledAnAssessmentCheckbox.setValue(false);
            me.tookAndFailedAnAssessmentCheckbox.setValue(false);
            me.tookAndPassedAnAssessmentCheckbox.setValue(false);
            me.submittedATaskStreamTaskCheckbox.setValue(false);
            me.revisedATaskStreamTaskCheckbox.setValue(false);
        } else if ( checked && me.noEvidenceIsPresentCheckbox.getRawValue() ) {
            me.noEvidenceIsPresentCheckbox.setValue(false);
        }
        me.disableSave();
    },

    onSubjectTextKeyDown: function( sender, event, eOpts ) {
        var me = Ext.getCmp('StudentNoteContainerDlg');
        if ( event.TAB == event.getKey() ) {
            if ( me.isStudentMentor ) {
                me.hundredPercentRadio.focus();
            } else {
                Ext.select('iframe').elements[0].focus();
                me.NoteHTMLTextEditorDlg.focus();
            }
            event.preventDefault();
        }
    },

    onNoteEntryContainerResize: function( container, adjWidth, adjHeight, eOpts ) {
        var me = Ext.getCmp('StudentNoteContainerDlg');
        me.doLayout();
    },

    disableSave: function() {
        
        var me = Ext.getCmp('StudentNoteContainerDlg');
        //yemeng 10-16 live call 'Live Call'
        if(me.noteTypeCombo.getRawValue() == 'Live Call' &&  me.AtRiskScore!=0 && me.AtRiskScore!=null)
        {
            Ext.getCmp('performanceActionsPanel').setDisabled(false);
        }else
        {
            Ext.getCmp('performanceActionsPanel').setDisabled(true);
        }
        me.isEditable = ( Ext.getCmp('NoteEditStatusTextDlg').getRawValue()=='New Note' || thisUser.Id == me.noteRecord.Author__c );
        var subject = !Ext.isEmpty(me.noteSubjectTextField.getValue());
        var noteType = Ext.isEmpty(me.noteRecord.Id)?  !Ext.isEmpty(me.noteTypeCombo.getRawValue()) : ( me.noteTypeCombo.getValue() != null && me.noteTypeCombo.store.findExact('value',me.noteTypeCombo.getValue()) != -1 );
        var noteSubType = (Ext.isEmpty(me.noteRecord.Id)? ( me.noteSubTypeStore.count()>0 && me.noteSubTypeCombo.store.findExact( 'noteSubType',me.noteSubTypeCombo.getValue() ) != -1 ): !Ext.isEmpty(me.noteSubTypeCombo.getRawValue()) ) || (me.noteSubTypeStore.count()==0);
        var performanceQuestion1Satisfied = ( me.zeroPercentRadio.getValue() || me.paritalPercentRadio.getValue() || me.hundredPercentRadio.getValue() );
        var performanceQuestion2Satisfied = ( me.engagedInNewStudentProtocolsCheckbox.getValue() ||
                me.engagedInLearningResourceCheckbox.getValue() ||
                me.utilizedACommunityResourceCheckbox.getValue() ||
                me.attendedASeminarCheckbox.getValue() ||
                me.metWithACourseMentorCheckbox.getValue() ||
                me.tookAPreAssessmentCheckbox.getValue() ||
                me.scheduledAnAssessmentCheckbox.getValue() ||
                me.tookAndFailedAnAssessmentCheckbox.getValue() ||
                me.tookAndPassedAnAssessmentCheckbox.getValue() ||
                me.submittedATaskStreamTaskCheckbox.getValue() ||
                me.revisedATaskStreamTaskCheckbox.getValue() ||
                me.noEvidenceIsPresentCheckbox.getValue() );
        var performance = ( (me.isStudentMentor &&  performanceQuestion1Satisfied &&  performanceQuestion2Satisfied )  || !me.isStudentMentor || ( me.isStudentMentor && Ext.getCmp('NoteEditStatusTextDlg').getRawValue() == 'Edit Mode' ) );

      //performance action: yemeng zhu 10/9/13
        //for score 1 and 2  must pick up 1 from 11 Performance Questions
        // for score 3:optional
        //for score 0 and null: disable the panel
        var action=(me.isStudentMentor 
                 && ((me.AtRiskScore==1||me.AtRiskScore==2)
                            && (( Ext.getCmp('actionTypeCombo').getValue()!=null &&Ext.getCmp('actionSubTypeCombo').getValue()!=null && me.noteTypeCombo.getRawValue() == 'Live Call')
                                || me.noteTypeCombo.getRawValue() != 'Live Call'))
                    ||(me.AtRiskScore==3||me.AtRiskScore==0||me.AtRiskScore==null)) || !me.isStudentMentor;
        
        if ( !me.saveNoteButton ) {
            me.saveNoteButton = Ext.getCmp('SaveNoteButtonDlg');
        }

        if (  subject && noteType && noteSubType && me.isEditable && performance && action) {
            me.saveNoteButton.setDisabled( false );
        } else {
            me.saveNoteButton.setDisabled( true );
        }

    },

    noteSubjectTextFieldChange: function(field, newValue, oldValue, options) {
        var me = Ext.getCmp('StudentNoteContainerDlg');
        me.disableSave();
    },

    noteTypeComboChange: function(field, newValue, oldValue, options) {
        var me = Ext.getCmp('StudentNoteContainerDlg');
        var valueIsValid = field.store.findExact('value',newValue) != -1;
        var subject = me.noteSubjectTextField.getValue();
        if ( newValue == null || newValue == "" ) {
            if ( subject != "" && me.lastNoteTypeValue == subject ) {
                me.noteSubjectTextField.setValue('');
            }
            me.noteSubTypeCombo.setValue(null);
            me.noteSubTypeCombo.setReadOnly(true);
        } else if ( valueIsValid ) {
            if ( subject == '' || me.lastNoteTypeValue == subject ) {
                me.noteSubjectTextField.setValue( newValue ) ;
            }
            me.lastNoteTypeValue = newValue;
            var subTypeValue = me.noteSubTypeCombo.getValue();
            me.noteSubTypeStore.setSubTypeRecords(newValue);
            if ( me.noteSubTypeStore.count() == 0 ) {
                me.noteSubTypeCombo.setValue(null);
                me.noteSubTypeCombo.setReadOnly( true );
            } else {
                if ( subTypeValue != null ) {
                    if ( me.noteSubTypeStore.findExact('noteSubType', subTypeValue ) == -1 ) {
                        me.noteSubTypeCombo.setValue(null);
                    } else if ( me.noteSubTypeCombo.getValue() != subTypeValue ) {
                        me.noteSubTypeCombo.setValue(subTypeValue);
                    }
                }
                me.noteSubTypeCombo.setReadOnly( false );
            }
        }
        me.disableSave();
    },
    //12-10
    actionTypeComboChange: function(field, newValue, oldValue, options) {
        var me = Ext.getCmp('StudentNoteContainerDlg');
        var valueIsValid = field.store.findExact('value',newValue) != -1;
        var subject = me.noteSubjectTextField.getValue();
        if ( newValue == null || newValue == "" ) { 
            me.actionSubTypeCombo.setValue(null);
            me.actionSubTypeCombo.setReadOnly(true);
        } else if ( valueIsValid ) { 
            me.lastActionTypeValue = newValue;
            var subTypeValue = me.actionSubTypeCombo.getValue();
            me.actionSubTypeStore.setSubTypeRecords(newValue);
            if ( me.actionSubTypeStore.count() == 0 ) {
                me.actionSubTypeCombo.setValue(null);
                me.actionSubTypeCombo.setReadOnly( true );
            } else {
                if ( subTypeValue != null ) {
                    if ( me.actionSubTypeStore.findExact('actionSubType', subTypeValue ) == -1 ) {
                        me.actionSubTypeCombo.setValue(null);
                    } else if ( me.actionSubTypeCombo.getValue() != subTypeValue ) {
                        me.actionSubTypeCombo.setValue(subTypeValue);
                    }
                }
                me.actionSubTypeCombo.setReadOnly( false );
            }
        }
        me.disableSave();
    },

    resetStudentPerformanceSurvey: function(){
        var me = Ext.getCmp('StudentNoteContainerDlg');
        var radiobuttons = Ext.select('.progressCls').elements;
        for (var i = 0; i < radiobuttons.length; i++) {
            Ext.getCmp(radiobuttons[i].id).setValue(false);
        }
        var checkboxes = Ext.select('.evidenceCls').elements;
        for (var i = 0; i < checkboxes.length; i++) {
            Ext.getCmp(checkboxes[i].id).setValue(false);
        }
    },

    newNoteButtonClick: function( e, target, options ) {
        var me = Ext.getCmp('StudentNoteContainerDlg');
        me.noteRecord = Ext.decode( me.blankNoteJSON );
        me.isEditable = true;
        me.saveNoteButton.setDisabled( true );
        me.NoteHTMLTextEditorDlg.setReadOnly( false );
        me.noteSubjectTextField.setReadOnly( false );
        me.noteTypeCombo.setReadOnly( false );
        me.noteSubTypeCombo.setReadOnly( false );

        me.noteSubjectTextField.setValue( '' );
        me.NoteHTMLTextEditorDlg.setValue( '' );
        Ext.getCmp('NoteCreatedDateTimeTextDlg').setValue('Not Yet Saved');
        Ext.getCmp('NoteEditStatusTextDlg').setValue( 'New Note' );
        Ext.getCmp('NoteAuthorTextDlg').setValue( thisUser.Name );
        me.noteTypeCombo.setValue(null);
        me.noteSubTypeCombo.setReadOnly(true);
        me.noteSubTypeCombo.setValue(null);
        me.noteSubTypeCombo.setRawValue('');

        me.noteRecord.Author__c = thisUser.Id;
        me.noteRecord.AuthorPidm__c = thisUser.PIDM__c;
        me.noteRecord.Student__c = me.studentRecord.Id;
        me.noteRecord.PIDM__c = me.studentRecord.PIDM__c;

        me.resetStudentPerformanceSurvey();
        me.hundredPercentRadio.setRawValue( me.isStudentMentor );

        var radiobuttons = Ext.select('.progressCls').elements;
        for (var i = 0; i < radiobuttons.length; i++) {
            Ext.getCmp(radiobuttons[i].id).setReadOnly(false);
        }
        var checkboxes = Ext.select('.evidenceCls').elements;
        for (var i = 0; i < checkboxes.length; i++) {
            Ext.getCmp(checkboxes[i].id).setReadOnly(false);
        }

        Ext.getCmp('PerformanceSurveyPanelDlg').setTitle('Student Performance Questions (' + (me.isStudentMentor? 'Required': 'Optional') + '):');
        if ( !me.isStudentMentor ) {
            var El = Ext.get(Ext.select('#PerformanceSurveyPanelDlg .x-panel-header').elements[0]);
            El.setStyle('background-color',(me.isStudentMentor? '#D3E1F1': '#D3D3D3'));
            El.setStyle('border-color',(me.isStudentMentor? '#99BCE8': '#C7C7C7'));
            El = Ext.get(Ext.select('#PerformanceSurveyPanelDlg-body').elements[0]);
            El.setStyle('color','#6D6D6D');
            El.setStyle('border-color','#C7C7C7');
            Ext.get('PerformanceQuestion1LabelDlg').setStyle('color','#6D6D6D');
            Ext.get('PerformanceQuestion2LabelDlg').setStyle('color','#6D6D6D');
        } else {
            var El = Ext.get(Ext.select('#PerformanceSurveyPanelDlg .x-panel-header').elements[0]);
            El.setStyle('background-color', '#97B0DA');
            El.setStyle('border-color', '#99BCE8');
            El = Ext.get(Ext.select('#PerformanceSurveyPanelDlg-body').elements[0]);
            El.setStyle('color','black');
            El.setStyle('border-color','#99BCE8');
            Ext.get('PerformanceQuestion1LabelDlg').setStyle('color','black');
            Ext.get('PerformanceQuestion2LabelDlg').setStyle('color','black');
        }
        

        //If an AtRiskScore is present and is equal to 1, 2, or 3 modify the Student Performance Actions panel title to include the proper At Risk Indicator and enable the panel
        //Added 10/3/2013 by Katarina Melki 
        //edit 12-10
        me.AtRiskScore= me.studentRecord.StudentAction;
      //  Ext.getCmp('performanceActionCombo').setValue(null)
        Ext.getCmp('actionTypeCombo').setValue(null)
        Ext.getCmp('actionSubTypeCombo').setValue(null)
        if (me.AtRiskScore!=null && me.AtRiskScore>0)
        {
            var tempTitle='Student Performance Actions:';
            //Using 100 based scoring until switch to 0-3 scoring occurs. Scoring setup is probably not accurate as-is. Yay!!!
            //The current images used below are too big. They need to be replaced with versions no taller than 10 pixels.
            //This is causing alignment issues that just look bad.
            if (me.AtRiskScore==3)
            {
                tempTitle='<img src="{!$Resource.riskTypesPNG}/riskTypesPNG/smGreenCheck.png" /> &nbsp; '+tempTitle;
            }
            else if (me.AtRiskScore==2)
            {
                tempTitle='<img src="{!$Resource.riskTypesPNG}/riskTypesPNG/smYellowMark.png" /> &nbsp;'+tempTitle;
            }
            else if (me.AtRiskScore==1)
            {
                tempTitle='<img src="{!$Resource.riskTypesPNG}/riskTypesPNG/smRedStar.png" /> &nbsp;'+tempTitle;
            }
        
            me.performanceActionsPanel.setTitle(tempTitle);
            me.performanceActionsPanel.setDisabled(false);
        }
        else
        {
            me.performanceActionsPanel.setDisabled(true);
        }

    },


    saveNoteButtonClick: function(e, target, options) {
        var me = Ext.getCmp('StudentNoteContainerDlg');
        Ext.getCmp('SaveNoteButtonDlg').setDisabled(true);
        var subject = !Ext.isEmpty( me.noteSubjectTextField.getRawValue() );
        var noteType = !Ext.isEmpty( me.noteTypeCombo.getRawValue() );
        var noteSubType = !Ext.isEmpty(me.noteSubTypeCombo.getRawValue()) || (me.noteSubTypeStore.count()==0);
        var note = !Ext.isEmpty( me.NoteHTMLTextEditorDlg.getValue().replace( /<[^<|>]+?>/gi,'' ).trim() );
        var performanceQuestion1Satisfied = ( me.zeroPercentRadio.getValue() || me.paritalPercentRadio.getValue() || me.hundredPercentRadio.getValue() );
        var performanceQuestion2Satisfied = ( me.engagedInNewStudentProtocolsCheckbox.getValue() ||
                me.engagedInLearningResourceCheckbox.getValue() ||
                me.utilizedACommunityResourceCheckbox.getValue() ||
                me.attendedASeminarCheckbox.getValue() ||
                me.metWithACourseMentorCheckbox.getValue() ||
                me.tookAPreAssessmentCheckbox.getValue() ||
                me.scheduledAnAssessmentCheckbox.getValue() ||
                me.tookAndFailedAnAssessmentCheckbox.getValue() ||
                me.tookAndPassedAnAssessmentCheckbox.getValue() ||
                me.submittedATaskStreamTaskCheckbox.getValue() ||
                me.revisedATaskStreamTaskCheckbox.getValue() ||
                me.noEvidenceIsPresentCheckbox.getValue() );
        var performance = ( (me.isStudentMentor &&  performanceQuestion1Satisfied &&  performanceQuestion2Satisfied )  || !me.isStudentMentor || ( me.isStudentMentor && Ext.getCmp('NoteEditStatusTextDlg').getRawValue() == 'Edit Mode' ) );
      //Determine if the Student Performance Action is required and a valid action selected
        //Current check is valid for a 0-3 scoring scheme that was detailed but is not valid if the existing 0-100 scoring system is to be used.
        //Added 10/3/2013 by Katarina Melki
        var action=(me.isStudentMentor 
             && ((me.AtRiskScore==1||me.AtRiskScore==2)
                        && (( Ext.getCmp('actionTypeCombo').getValue()!=null && Ext.getCmp('actionSubTypeCombo').getValue()!=null && me.noteTypeCombo.getRawValue() == 'Live Call')
                            || me.noteTypeCombo.getRawValue() != 'Live Call'))
                ||(me.AtRiskScore==3||me.AtRiskScore==0||me.AtRiskScore==null)) || !me.isStudentMentor;
        
        if (  subject && note && noteType && noteSubType & performance && action ) {
            if ( me.noteRecord.Id && me.noteRecord.Text__c && me.NoteHTMLTextEditorDlg.getValue().trim() == me.noteRecord.Text__c.trim() ) {
                Ext.MessageBox.show({
                    title:'Save Not Needed',
                    msg: 'The note text has not changed. Saving is not necessary.',
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.INFO
                });
            } else if ( !me.isStudentMentor ) {
                if ( (performanceQuestion1Satisfied && !performanceQuestion2Satisfied) || (!performanceQuestion1Satisfied && performanceQuestion2Satisfied) ) {
                    Ext.MessageBox.show({
                        title:'Cancel Incomplete Student Performance Questions?',
                        msg: 'You have answered only one of the optional student performance questions.<br/>Do you want to cancel your incomplete response?<br/>[click No to complete both questions before saving]',
                        buttons: Ext.Msg.YESNO,
                        icon: Ext.Msg.QUESTION,
                        fn: function(btn, text) {
                            if (btn == 'yes') {
                                if ( performanceQuestion1Satisfied ) {
                                    var radiobuttons = Ext.select('.progressCls').elements;
                                    for (var i = 0; i < radiobuttons.length; i++) {
                                        Ext.getCmp(radiobuttons[i].id).setValue(false);
                                    }
                                } else {
                                    var checkboxes = Ext.select('.evidenceCls').elements;
                                    for (var i = 0; i < checkboxes.length; i++) {
                                        Ext.getCmp(checkboxes[i].id).setValue(false);
                                    }
                                }
                                me.saveNote();
                            }
                        }
                    });
                } else {
                    me.saveNote();
                }
            } else {
                me.saveNote();
            }

        } else {
            Ext.getCmp('SaveNoteButtonDlg').setDisabled(false);
            if ( !subject ) {
                Ext.MessageBox.show({
                    title:'Subject Required',
                    msg: 'Please specify a subject.',
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.INFO
                });
                me.noteSubjectTextField.focus();
            } else if ( !noteType ) {
                Ext.MessageBox.show({
                    title:'Note Type Required',
                    msg: 'Please specify a valid note type.',
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.INFO
                });
                me.noteTypeCombo.focus();
            } else if ( !noteSubType ) {
                Ext.MessageBox.show({
                    title:'Note Sub Type Required',
                    msg: 'Please specify a valid note sub type.',
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.INFO
                });
                noteSubType.focus();
            } else if ( !note ){
                Ext.MessageBox.show({
                    title:'Note Content Required',
                    msg: 'Please specify content for the student note.',
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.INFO
                });
                Ext.select('iframe').elements[0].focus();
                me.NoteHTMLTextEditorDlg.focus();
            } else if ( !performance ) {
                Ext.MessageBox.show({
                    title:'Performance Survey Responses Required',
                    msg: 'As this student\'s mentor, please answer all performance survey questions.',
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.INFO
                });
            } 
            //Message for missing required Student Performance Actions
            //Added 10/3/2013 by Katarina Melki
            else if ( !action ) 
            {
                Ext.MessageBox.show({
                    title:'Performance Action Required',
                    msg: 'As this student\'s mentor, please select a Student Performance Action.',
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.INFO
                });
            }
        }
    },

    saveNote: function() {
        //Code needs to be added somewhere below to handle saving the performance action.
        //The exact position and nature of that code will depend on where the performance action is to be saved.
        //Corresponding modifications will need to be made to the Notes Controller calss as well.
        //Noted 10/4/2013 by Katarina Melki
        var me = Ext.getCmp('StudentNoteContainerDlg');
        Ext.getCmp('NoteHTMLTextEditorDlg').setLoading('Saving Note...');
        var note = new sforce.SObject("WGUStudentNote__c");
        var noteHTML = me.NoteHTMLTextEditorDlg.getValue().trim();
        if ( me.noteRecord.Id ) {
            note.Id = (Ext.getCmp('NoteEditStatusTextDlg').getRawValue() == 'New Note')? null: me.noteRecord.Id;
        }
        note.Author__c = (me.viewState.cc || Ext.isEmpty(me.noteRecord.Id))? thisUser.Id: me.noteRecord.Author__c;
        note.AuthorPidm__c = (me.viewState.cc || Ext.isEmpty(me.noteRecord.Id)? thisUser.PIDM__c: me.noteRecord.AuthorPidm__c );
        note.Student__c = me.noteRecord.Student__c || me.studentRecord.Id;
        note.PIDM__c = me.noteRecord.PIDM__c || me.studentRecord.PIDM__c;
        note.WGUCreationDateTime__c = new Date();
        note.ShortText__c = Ext.String.ellipsis(noteHTML.replace( /(<br\ ?\/?>)+/gi,' ' ).replace( /<[^<|>]+?>/gi,'' ),250,true);

        note.Text__c = noteHTML.indexOf("</font>") == -1 ? '<font face="tahoma" size="2">'+noteHTML+'</font>': noteHTML;
        note.Type__c = me.noteTypeCombo.getRawValue();
        note.SubType__c = me.noteSubTypeCombo.getRawValue();
        note.Name = me.noteSubjectTextField.getRawValue().trim();
        //performance action: yemeng zhu 10/9/13
        //yemeng 10-16 live call 
        //12-10 action type
        if(me.noteTypeCombo.getRawValue() == 'Live Call')
        {
            //note.PersonalizationActions__c = Ext.getCmp('performanceActionCombo').getValue();
            note.PersonalizationMenu__c = Ext.getCmp('actionTypeCombo').getValue();
            note.PersonalizationMenuSubType__c = Ext.getCmp('actionSubTypeCombo').getValue();
        }else
        {
            //note.PersonalizationActions__c = null;
            note.PersonalizationMenu__c = null;
            note.PersonalizationMenuSubType__c = null;
        } 
        if ( note.Id == null ) { //create new note
            try {
            //12-10 action type , save risk value
                note.StudentRiskValue__c = me.AtRiskScore;
                var noteResult = $soap.create( [note] );
                try {
                    if ( noteResult[0].success == "true" ) {
                        var newNoteId = noteResult[0].id;
                        note.Author__r = {Name: thisUser.Name};
                        note.AuthorName = thisUser.Name;
                        note.Id = newNoteId;
                        note.Level1Image__c = me.noteTypesPNG+note.Type__c.replace(/\s+/g, '').replace('/', '')+'.png';

                        if ( newNoteId ) {
                            try {
                                var performanceQuestion1Satisfied = ( me.zeroPercentRadio.getValue() || me.paritalPercentRadio.getValue() || me.hundredPercentRadio.getValue() );
                                var performanceQuestion2Satisfied = ( me.engagedInNewStudentProtocolsCheckbox.getValue() ||
                                        me.engagedInLearningResourceCheckbox.getValue() ||
                                        me.utilizedACommunityResourceCheckbox.getValue() ||
                                        me.attendedASeminarCheckbox.getValue() ||
                                        me.metWithACourseMentorCheckbox.getValue() ||
                                        me.tookAPreAssessmentCheckbox.getValue() ||
                                        me.scheduledAnAssessmentCheckbox.getValue() ||
                                        me.tookAndFailedAnAssessmentCheckbox.getValue() ||
                                        me.tookAndPassedAnAssessmentCheckbox.getValue() ||
                                        me.submittedATaskStreamTaskCheckbox.getValue() ||
                                        me.revisedATaskStreamTaskCheckbox.getValue() ||
                                        me.noEvidenceIsPresentCheckbox.getValue() );
                                //10-21 yemeng 
                                var blankSurveyJSON = '{"attributes":{"type":"WGUStudentPerformanceSurvey__c","url":null},"EvidenceOfAcademicActivity__c":null,"GoalPerformanceSinceLastCall__c":null,"WGUStudentNote__c":null,"Student__c":null,"Name":null,"LastModifiedDate":null,"LastModifiedById":null,"Id":null,"CreatedDate":null,"CreatedById":null,"CreatedBy":{"attributes":{"type":"User","url":null},"Name":null}}';

                                if ( performanceQuestion1Satisfied && performanceQuestion2Satisfied ) {
                                    //var survey = Ext.decode( blankSurveyJSON );
                                    var survey = new sforce.SObject("WGUStudentPerformanceSurvey__c");
                                    survey.WGUStudentNote__c = newNoteId;
                                    survey.Student__c = note.Student__c;
                                    survey.Name = me.studentRecord.FirstName + ' ' + me.studentRecord.LastName + ' ' + Ext.Date.format(Ext.Date.parse( note.WGUCreationDateTime__c, 'c'), "m/d/Y g:i a T");
                                    if ( me.hundredPercentRadio.getValue() ) {
                                        survey.GoalPerformanceSinceLastCall__c = me.hundredPercentRadio.boxLabel;
                                    } else if ( me.paritalPercentRadio.getValue() ) {
                                        survey.GoalPerformanceSinceLastCall__c = me.paritalPercentRadio.boxLabel;
                                    } else {
                                        survey.GoalPerformanceSinceLastCall__c = me.zeroPercentRadio.boxLabel;
                                    }
                                    var firstValue = true;
                                    survey.EvidenceOfAcademicActivity__c = '';
                                    var checkboxes = Ext.select('.evidenceCls').elements;
                                    for (var i = 0; i < checkboxes.length; i++) {
                                        var checkbox = Ext.getCmp(checkboxes[i].id)
                                        if ( checkbox.getValue() ) {
                                            survey.EvidenceOfAcademicActivity__c += (firstValue?'':';') + checkbox.boxLabel;
                                            if ( firstValue ) {
                                                firstValue = false;
                                            }
                                        }
                                    }

                                    try {
                                        var surveyResult = $soap.create([survey]);
                                        if ( surveyResult[0].success == "true" ) {
                                            Ext.getCmp('NoteHTMLTextEditorDlg').setLoading('Save success');
                                            survey.Id = surveyResult[0].id;
                                            note.WGUStudentPerformanceSurveys__r = {records:{}};
                                            note.WGUStudentPerformanceSurveys__r.records.Id = survey.Id;
                                            note.WGUStudentPerformanceSurveys__r.records.Student_c = survey.Student__c;
                                            note.WGUStudentPerformanceSurveys__r.records.WGUStudentNote__c = survey.WGUStudentNote__c;
                                            note.WGUStudentPerformanceSurveys__r.records.Name = survey.Name;
                                            note.WGUStudentPerformanceSurveys__r.records.EvidenceOfAcademicActivity__c = survey.EvidenceOfAcademicActivity__c;
                                            note.WGUStudentPerformanceSurveys__r.records.GoalPerformanceSinceLastCall__c = survey.GoalPerformanceSinceLastCall__c;

                                            note.SurveyId = survey.Id;
                                            note.SurveyStudent_c = survey.Student__c;
                                            note.SurveyWGUStudentNote__c = survey.WGUStudentNote__c;
                                            note.SurveyName = survey.Name;
                                            note.SurveyEvidenceOfAcademicActivity__c = survey.EvidenceOfAcademicActivity__c;
                                            note.SurveyGoalPerformanceSinceLastCall__c = survey.GoalPerformanceSinceLastCall__c;
                                            if ( Ext.isChrome) {
                                                console.log( 'Survey Save/Creation successfull: '  + surveyResult[0]);
                                            }
                                            var statusField = Ext.getCmp('NoteEditStatusTextDlg');
                                            statusField.setRawValue('Save success');
                                            Ext.get(Ext.select('#NoteEditStatusTextDlg .x-form-display-field').elements[0]).setStyle('color','lightgreen');
                                            setTimeout(function() {
                                                var dialog = Ext.getCmp('WGUNotesDialogDlg');
                                                dialog.modalResult = { modalResult: "mrSuccess", "note": note, "survey": survey, operation: 'insert' };
                                                dialog.hide();
                                                dialog.close();
                                            }, 1500);
                                        } else {
                                            if ( Ext.isChrome ) {
                                                console.log( 'Survey Save/Creation Unsuccessfull: ' );
                                                console.log( surveyResult );
                                            }
                                        }
                                    } catch (e) {
                                        if ( e ) {
                                            Ext.MessageBox.show({
                                                title:'Save Student Performance Program Exception',
                                                msg: (e.message? e.message: e) + '<br/>Reference: saveNote() -> Save Survey',
                                                buttons: Ext.Msg.OK,
                                                icon: Ext.Msg.ERROR
                                            });
                                        }
                                    }
                                } else {
                                    Ext.getCmp('NoteHTMLTextEditorDlg').setLoading('Save success');
                                    var statusField = Ext.getCmp('NoteEditStatusTextDlg');
                                    statusField.setRawValue('Save success');
                                    Ext.get(Ext.select('#NoteEditStatusTextDlg .x-form-display-field').elements[0]).setStyle('color','lightgreen');
                                    setTimeout(function() {
                                        var dialog = Ext.getCmp('WGUNotesDialogDlg');
                                        dialog.modalResult = { modalResult: "mrSuccess", "note": note, "survey": null, operation: 'insert' };
                                        dialog.hide();
                                        dialog.close();
                                    }, 1500);
                                }
                            } catch (e) {
                                if ( Ext.isChrome ) {
                                    console.log( 'Save Note/Survey Exception: ' );
                                    console.log( e );
                                }
                                if ( e ) {
                                    Ext.MessageBox.show({
                                        title:'Performance Questions Processing Exception',
                                        msg: (e.message? e.message: e) + '<br/>Reference: saveNote() ',
                                        buttons: Ext.Msg.OK,
                                        icon: Ext.Msg.ERROR
                                    });
                                }
                            }

                        }
                    } else {
                        if ( Ext.isChrome ) {
                            console.log( 'Note Save/Creation Unsuccessfull: ' );
                            console.log( noteResult );
                        }
                        if ( noteResult[0].error && noteResult[0].error.message ) {
                            Ext.MessageBox.show({
                                title:'Note Save Error',
                                msg: noteResult[0].error.message + '<br/>Reference: saveNote() ',
                                buttons: Ext.Msg.OK,
                                icon: Ext.Msg.ERROR
                            });
                        }
                    }
                } finally {
                    //cleanup in case of lingering loading mask
                    setTimeout( function(){
                        var view = Ext.getCmp('NoteHTMLTextEditorDlg');
                        if (view) {
                            view.setLoading(false);
                        }
                    }, 5000);
                }
            } catch(e) {
                if ( Ext.isChrome ) {
                    console.log( 'Note Save/Creation Error: ' );
                    console.log( e );
                }
                if ( e ) {
                    Ext.MessageBox.show({
                        title:'Save Note Program Exception',
                        msg: (e.message? e.message: e) + '<br/>Reference: saveNote() ',
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.ERROR
                    });
                }
            }
        } else { // updating note text is the only update operation supported via the dialog
            try {
                var oldNote = new sforce.SObject("WGUStudentNote__c");
                oldNote.Id = note.Id;
                oldNote.Text__c = note.Text__c
                var saveResult = $soap.update( [oldNote] );
                if ( Ext.isChrome ) {
                    console.log( (saveResult[0].success == "true"? "Note Update succeeded: " : "Note Update unsuccessful: ") );
                    console.log( saveResult );
                }
                if (saveResult[0].success == "true") {
                    Ext.getCmp('NoteHTMLTextEditorDlg').setLoading('Update success');
                    var statusField = Ext.getCmp('NoteEditStatusTextDlg');
                    statusField.setRawValue('Update success...');
                    Ext.get(Ext.select('#NoteEditStatusTextDlg .x-form-display-field').elements[0]).setStyle('color','lightgreen');
                    setTimeout(function() {
                        var dialog = Ext.getCmp('WGUNotesDialogDlg');
                        dialog.modalResult = { modalResult: "mrSuccess", "note": note, "survey": null, operation: 'update' };
                        dialog.hide();
                        dialog.close();
                    }, 1500);
                }
            } catch (e) {
                if ( Ext.isChrome ) {
                    console.log( 'Note Update Error: ');
                    console.log( e );
                }
            }
        }
    },


    loadDlgNoteRecord: function( note ) {
        var me = Ext.getCmp('StudentNoteContainerDlg');
        if (note) {
            me.resetStudentPerformanceSurvey();


            isEditable = me.isEditable || (thisUser.Id == note.Author__c) || Ext.isEmpty(note.Id);
            me.NoteHTMLTextEditorDlg.setReadOnly(!isEditable);
            me.NoteHTMLTextEditorDlg.setValue(note.Text__c==null?'':note.Text__c);

            if ( Ext.isEmpty(note.Id) || me.viewState.cc ) {
                Ext.getCmp('NoteCreatedDateTimeTextDlg').setValue( 'Not Yet Saved' );
            } else {
                var WGUCreationDateTime__c = (typeof note.WGUCreationDateTime__c == 'string' )? Ext.Date.parse(note.WGUCreationDateTime__c, 'c'): ((typeof note.WGUCreationDateTime__c == 'object' )? note.WGUCreationDateTime__c: new Date());
                Ext.getCmp('NoteCreatedDateTimeTextDlg').setValue( Ext.Date.format(WGUCreationDateTime__c, "m/d/Y g:i a T") );
            }
            Ext.getCmp('NoteAuthorTextDlg').setValue( note.AuthorName != null? note.AuthorName: thisUser.Name );
            Ext.getCmp('NoteEditStatusTextDlg').setValue( isEditable? (Ext.isEmpty(note.Id) || me.viewState.cc? 'New Note': 'Edit Mode'): 'Read Only Mode' );
            Ext.get(Ext.select('#NoteEditStatusTextDlg .x-form-display-field').elements[0]).setStyle('color',(isEditable?'yellow':'white'));

            me.noteTypeCombo.setValue(note.Type__c);
            me.noteSubTypeCombo.setValue( note.SubType__c? note.SubType__c: '' );
            if ( note.Id ) {
                me.noteSubTypeCombo.setRawValue( note.SubType__c? note.SubType__c: '' );
            }
            me.noteSubjectTextField.setValue( note.Name? note.Name: '' );
            me.lastNoteTypeValue = note.Type__c;

            if ( isEditable ) {
                if ( !Ext.isEmpty(note.Id)  ) {
                    me.noteTypeCombo.setReadOnly( !Ext.isEmpty(note.Type__c) );
                    if ( me.noteSubTypeStore.count() == 0 || ( me.noteTypeStore.findExact( 'value', note.Type__c ) == -1 ) ) {
                        me.noteSubTypeCombo.setReadOnly( true );
                    } else {
                        me.noteSubTypeCombo.setReadOnly( !Ext.isEmpty(note.SubType__c) );
                    }
                    me.noteSubjectTextField.setReadOnly( !Ext.isEmpty(note.Name) );
                } else {
                    me.noteTypeCombo.setReadOnly( false );
                    me.noteSubTypeCombo.setReadOnly( me.noteSubTypeCombo.store.count() == 0 );
                    me.noteSubjectTextField.setReadOnly( false  );
                }
            } else {
                me.noteTypeCombo.setReadOnly( true );
                me.noteSubTypeCombo.setReadOnly( true );
                me.noteSubjectTextField.setReadOnly( true  );
            }

            var radiobuttons = Ext.select('.progressCls').elements;
            for (var i = 0; i < radiobuttons.length; i++) {
                Ext.getCmp(radiobuttons[i].id).setReadOnly(!Ext.isEmpty(note.Id));
            }
            var checkboxes = Ext.select('.evidenceCls').elements;
            for (var i = 0; i < checkboxes.length; i++) {
                Ext.getCmp(checkboxes[i].id).setReadOnly(!Ext.isEmpty(note.Id));
            }

            if (note.Id) {
                if ( note.SurveyId ) {
                    if ( note.SurveyGoalPerformanceSinceLastCall__c ) {
                        var performancePercent = note.SurveyGoalPerformanceSinceLastCall__c;
                        if ( performancePercent == 'Yes - 100%' ) {
                            me.hundredPercentRadio.setValue(true);
                        } else if ( performancePercent == 'Partially Met' ) {
                            me.paritalPercentRadio.setValue(true);
                        } else {
                            me.zeroPercentRadio.setValue(true);
                        }
                    }

                    if ( note.SurveyEvidenceOfAcademicActivity__c ) {
                        var checkboxes = Ext.select('.evidenceCls').elements;
                        var evidences = note.SurveyEvidenceOfAcademicActivity__c.split(';');
                        for ( var x = 0; x < evidences.length ; x++ ) {
                            for (var i = 0; i < checkboxes.length; i++) {
                                var checkbox = Ext.getCmp(checkboxes[i].id);
                                if ( checkbox.boxLabel.toLowerCase() == evidences[x].toLowerCase() ) {
                                    checkbox.setValue(true);
                                    break;
                                }
                            }
                        }
                    }
                    Ext.getCmp('PerformanceSurveyPanelDlg').setTitle('Student Performance Questions for this Note:');
                    var El = Ext.get(Ext.select('#PerformanceSurveyPanelDlg .x-panel-header').elements[0]);
                    El.setStyle('background-color', '#EBEFF3');
                    El.setStyle('border-color', '#99BCE8');
                    El = Ext.get(Ext.select('#PerformanceSurveyPanelDlg-body').elements[0]);
                    El.setStyle('color','black');
                    El.setStyle('border-color','#99BCE8');
                    Ext.get('PerformanceQuestion1LabelDlg').setStyle('color','#505050');
                    Ext.get('PerformanceQuestion2LabelDlg').setStyle('color','#505050');

                } else { //no note.SurveyId

                    Ext.getCmp('PerformanceSurveyPanelDlg').setTitle('No Student Performance Questions for this Note:');
                    var El = Ext.get(Ext.select('#PerformanceSurveyPanelDlg .x-panel-header').elements[0]);
                    El.setStyle('background-color','lightgray');
                    El.setStyle('border-color','#C7C7C7');
                    El = Ext.get(Ext.select('#PerformanceSurveyPanelDlg-body').elements[0]);
                    El.setStyle('color','#929292');
                    El.setStyle('border-color','#C7C7C7');
                    Ext.get('PerformanceQuestion1LabelDlg').setStyle('color','#929292');
                    Ext.get('PerformanceQuestion2LabelDlg').setStyle('color','#929292');
                }
            } else {
                Ext.getCmp('PerformanceSurveyPanelDlg').setTitle('Student Performance Questions (' + (me.isStudentMentor? 'Required': 'Optional') + '):');
                if ( !me.isStudentMentor ) {
                    var El = Ext.get(Ext.select('#PerformanceSurveyPanelDlg .x-panel-header').elements[0]);
                    El.setStyle('background-color',(me.isStudentMentor? '#D3E1F1': '#D3D3D3'));
                    El.setStyle('border-color',(me.isStudentMentor? '#99BCE8': '#C7C7C7'));
                    El = Ext.get(Ext.select('#PerformanceSurveyPanelDlg-body').elements[0]);
                    El.setStyle('color','#6D6D6D');
                    El.setStyle('border-color','#C7C7C7');
                    Ext.get('PerformanceQuestion1LabelDlg').setStyle('color','#6D6D6D');
                    Ext.get('PerformanceQuestion2LabelDlg').setStyle('color','#6D6D6D');
                } else {
                    var El = Ext.get(Ext.select('#PerformanceSurveyPanelDlg .x-panel-header').elements[0]);
                    El.setStyle('background-color', '#97B0DA');
                    El.setStyle('border-color', '#99BCE8');
                    El = Ext.get(Ext.select('#PerformanceSurveyPanelDlg-body').elements[0]);
                    El.setStyle('color','black');
                    El.setStyle('border-color','#99BCE8');
                    Ext.get('PerformanceQuestion1LabelDlg').setStyle('color','black');
                    Ext.get('PerformanceQuestion2LabelDlg').setStyle('color','black');
                }
            }
        }

        me.disableSave();

    }
});

Ext.define('WGU.container.StudentNoteViewDlg', {
    extend: 'Ext.container.Container',
    alias: 'widget.wgustudentnoteviewdlg',
    layout: {
        align: 'stretch',
        type: 'vbox'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    id: 'NoteDetailBannerContainerDlg',
                    style: 'border: 1px solid #333;  background-color: #797979;  font-size: 12px;  font-weight: 400;  line-height: 34px;  color: #FFF;  text-shadow: -1px -1px rgba(0, 0, 0, 0.4);  -webkit-box-shadow: inset 0 0 0 1px #8C8C8C;  -moz-box-shadow: inset 0 0 0 1px #8C8C8C;  box-shadow: inset 0 0 0 1px #8C8C8C;  box-shadow: inset 1px 1px 1px 0 #A5A5A5;',
                    height: 23,
                    padding: '0 8 0 10',
                    margin: '3 0 3 0',
                    width: 957,
                    layout: {
                        align: 'stretch',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'tbspacer',
                            width : 1
                        },
                        {
                            xtype: 'displayfield',
                            id: 'NoteAuthorTextDlg',
                            width: 240,
                            value: '',
                            padding: '1 0 0 0',
                            fieldLabel: 'Author',
                            labelStyle: 'font-size: 10.5px; color: #F2F2F2;',
                            fieldStyle: 'font-size: 10.5px; color: #F2F2F2;font-weight: 700;',
                            labelWidth: 47,
                            preventMark: true
                        },
                        {
                            xtype: 'displayfield',
                            id: 'NoteCreatedDateTimeTextDlg',
                            width: 250,
                            value: '',
                            padding: '1 0 0 0',
                            fieldLabel: 'Created',
                            labelStyle: 'font-size: 10.5px; color: #F2F2F2;',
                            fieldStyle: 'font-size: 10.5px; color: #F2F2F2;font-weight: 400;',
                            labelWidth: 47,
                            preventMark: true
                        },
                        {
                            xtype: 'tbspacer',
                            flex : 1
                        },
                        {
                            xtype: 'displayfield',
                            id: 'NoteEditStatusTextDlg',
                            width: 250,
                            value: 'New Note',
                            fieldLabel: '',
                            labelStyle: 'color: yellow;',
                            fieldStyle: 'color: yellow;font-weight: 700;text-align:right;',
                            hideLabel: true,
                            labelWidth: 47,
                            preventMark: true
                        },
                        {
                            xtype: 'tbspacer',
                            width : 1
                        }
                    ]
                },
                {
                    xtype: 'wgustudentnotecontainerdlg',
                    flex: 1
                },
                {
                    xtype: 'container',
                    id: 'DialogButtonsContainerDlg',
                    height: 41,
                    margin: '10 0 0 0',
                    width: 960,
                    layout: {
                        type: 'absolute'
                    },
                    items: [
                        {
                            xtype: 'button',
                            id: 'TalismaNotesButtonDlg',
                            tooltip:  {
                                xtype: 'tooltip',
                                width: 335,
                                text: 'View notes for this student in the legacy notes system (Talisma)'
                            },
                            x: 0,
                            y: 0,
                            height: 40,
                            width: 100,
                            text: 'Legacy Notes',
                            handler: function(){
                                var me = Ext.getCmp('StudentNoteContainerDlg');
                                talismaWindow = window.open(me.talismaLinkUrl+me.studentRecord.Id, "Talisma_"+me.studentRecord.Id, "location=1,status=1,scrollbars=1,width=800,height=600");
                                talismaWindow.moveTo(0, 0);
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'SaveNoteButtonDlg',
                            tooltip:  {
                                xtype: 'tooltip',
                                width: 215,
                                text: 'Save the current note to the database'
                            },
                            x: 635,
                            y: 0,
                            height: 40,
                            width: 100,
                            text: 'Save Note',
                            style: 'border-color: lightgreen;',
                            disabled: true,
                            handler : function() {
                                var me = Ext.getCmp('StudentNoteContainerDlg');
                                me.saveNoteButtonClick();
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'ResetFormButtonDlg',
                            tooltip:  {
                                xtype: 'tooltip',
                                width: 215,
                                text: 'Reset all form fields for a new Note'
                            },
                            x: 745,
                            y: 0,
                            height: 40,
                            width: 100,
                            text: 'Reset Fields',
                            disabled: false,
                            handler : function() {
                                var me = Ext.getCmp('StudentNoteContainerDlg');
                                me.newNoteButtonClick();
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'CancelDialogButtonDlg',
                            x: 855,
                            y: 0,
                            text    : 'Cancel',
                            handler : function(){
                                var dialog = Ext.getCmp('WGUNotesDialogDlg');
                                dialog.modalResult = { modalResult: "mrCancel", "note": null, "survey": null, operation: null };
                                dialog.hide();
                                dialog.close();
                            },
                            height: 40,
                            width: 100
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    }

});


Ext.define('WGU.dialog.WGUViewContainer', {
    extend: 'Ext.container.Container',
    alias: 'widget.wguviewcontainerdlg',
    id: 'wguview',
    minHeight: 300,
    minWidth: 800,
    layout: {
        type: 'border'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    region: 'center',
                    itemId: 'wgu-center-dlg',
                    id: 'wgu-center-dlg',
                    layout: {
                        align: 'stretch',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'container',
                            flex: 1,
                            id: 'wgu-center-left-dlg',
                            itemId: 'wgu-center-left-dlg'
                        },
                        {
                            xtype: 'container',
                            id: 'wgu-view-body-dlg',
                            itemId: 'wgu-view-body-dlg',
                            layout: {
                                align: 'stretch',
                                type: 'vbox'
                            },
                            width: 960,
                            items: [{
                                xtype:'wgustudentnoteviewdlg',
                                flex: 1
                            },
                                {
                                    xtype:'container',
                                    height: 10
                                }]
                        },
                        {
                            xtype: 'container',
                            flex: 1,
                            id: 'wgu-center-right-dlg',
                            itemId: 'wgu-center-right-dlg'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    }
});

Ext.define('WGU.dialog.WGUNotesDialog', {
    extend: 'Ext.window.Window',
    requires: [
        'WGU.dialog.WGUViewContainer'
    ],
    id: 'WGUNotesDialogDlg',
    maxHeight: Ext.getBody().getViewSize().height>500? Ext.getBody().getViewSize().height: 500,
    minHeight: 500,
    maxWidth: 990,
    minWidth: 990,
    width: 990,
    height: 500,
    resizable: true,
    modal: true,
    closeAction: 'destroy',
    layout: {
        type: 'fit'
    },
    listeners: {
        beforeclose: {
            fn: function() {
                var me = Ext.getCmp('WGUNotesDialogDlg');
                if ( me.viewState && me.viewState.modalCallback ) {
                    if ( Ext.isEmpty(me.modalResult) || Ext.isEmpty(me.modalResult.modalResult) ) {
                        me.modalResult = { modalResult: "mrCancel", "note": null, "survey": null, operation: null };
                    }
                    var callback = me.viewState.modalCallback;
                    try { Ext.callback( callback, window, [Ext.decode(Ext.encode(me.modalResult))], 0 ); } catch(e) {}
                }

                return true;
            }
        },
        show: {
            fn: function() {
                var me = Ext.getCmp('WGUNotesDialogDlg');
                var record = me.editor.studentRecord;
                var email = !Ext.isEmpty(record.WGUEmail__c)? record.WGUEmail__c: record.Email;
                var link;
                if ( record.ComposeEmailLink__c ) {
                    var link = record.ComposeEmailLink__c.split('href')[1].split('\"')[1];
                }
                var phone = !Ext.isEmpty(record.Phone)? record.Phone: record.HomePhone;
                var nameHTML;
                //set Student Name Links in Dialog Title Bar
                if ( $sconsole ) {
                    var tdAttr = 'data-qwidth="'+record.Name.length*14+'" data-qtip="Open tab for '+record.Name+'" ';
                    var nameHTML = "<a "+tdAttr+" style='text-decoration:none;' id='StudentNoteNameTitle-"+record.Id+"' href='#' onclick='$sconsole.openPrimaryTab( null, \"/"+record.Id+"\", true, \""+record.NameLastFirst+"\", function(){}, \""+record.NameLastFirst+"\" );return false;'>" + record.Name + "</a>";
                } else {
                    var tdAttr = 'data-qwidth="'+record.Name.length*16+'" data-qtip="Open student record for '+record.Name+'" ';
                    var nameHTML = "<a "+tdAttr+" style='text-decoration:none;' id='StudentNoteNameTitle-" + record.Id + "' href='#' onclick='window.open(\"/"+record.Id+"\", \""+record.Id+"\" );window.focus();return false;'>" + record.Name + "</a>";
                }
                var titleText = "<span style='font-size:12.5px'>Note for:</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+nameHTML+"&nbsp;&nbsp;("+record.StudentID__c+")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;&nbsp;<a style='text-decoration:none;' href='"+ (link?link: "mailto:"+email)+"' target='QEmail"+record.Id+"'>"+email+"</a>&nbsp;&nbsp;-&nbsp;&nbsp;"+ (phone!="No MA Phone Found"? "<a style='text-decoration:none;' href='tel:"+phone+"'>"+phone+"</a>":"No Phone")+"&nbsp;&nbsp;&nbsp;]";
                me.setTitle( titleText );
            }
        }
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [ {
                xtype: 'wguviewcontainerdlg',
                id: 'wgu-view-view-dlg'
            }]
        });

        me.callParent(arguments);
        me.editor = Ext.getCmp('StudentNoteContainerDlg');

        me.showModal = function(viewstate) {
            if ( !Ext.isEmpty(viewstate) ) {
                me.viewState = viewstate;
                me.editor.viewState = viewstate;
                if ( !Ext.isEmpty(viewstate.student) ) {
                    me.editor.studentRecord = (viewstate.student.data? viewstate.student.data: viewstate.student);
                    var studentRecord = me.editor.studentRecord;
                    me.editor.isStudentMentor = ( studentRecord.Mentor__c === thisUser.Id || studentRecord.MentorPidm__c === thisUser.PIDM__c );
                } else {
                    throw new Error('Student Record is required for Notes Dialog');
                }

                if ( !Ext.isEmpty(viewstate.modalCallback) ) {
                    me.editor.modalCallback = viewstate.modalCallback;
                }
                

                //If an AtRiskScore is present and is equal to 1, 2, or 3 modify the Student Performance Actions panel title to include the proper At Risk Indicator and enable the panel
                //Added 10/3/2013 by Katarina Melki
                me.editor.AtRiskScore= me.editor.studentRecord.StudentAction;
                me.AtRiskScore= me.editor.studentRecord.StudentAction;
                if (me.AtRiskScore!=null && me.AtRiskScore>0)
                {
                    var tempTitle='Student Performance Actions:';
                    //Using 100 based scoring until switch to 0-3 scoring occurs. Scoring setup is probably not accurate as-is. Yay!!!
                    //The current images used below are too big. They need to be replaced with versions no taller than 10 pixels.
                    //This is causing alignment issues that just look bad.
                    if (me.AtRiskScore==3)
                    {
                        tempTitle='<img src="{!$Resource.riskTypesPNG}/riskTypesPNG/smGreenCheck.png" /> &nbsp; '+tempTitle;
                    }
                    else if (me.AtRiskScore==2)
                    {
                        tempTitle='<img src="{!$Resource.riskTypesPNG}/riskTypesPNG/smYellowMark.png" /> &nbsp;'+tempTitle;
                    }
                    else if (me.AtRiskScore==1)
                    {
                        tempTitle='<img src="{!$Resource.riskTypesPNG}/riskTypesPNG/smRedStar.png" /> &nbsp;'+tempTitle;
                    }
                
                    Ext.getCmp('performanceActionsPanel').setTitle(tempTitle);
                    Ext.getCmp('performanceActionsPanel').setDisabled(false);
                }
                else
                {
                    Ext.getCmp('performanceActionsPanel').setDisabled(true);
                }

            } else {
                throw new Error('Show Modal parameter is required');
            }
            me.show();
        };

    },

    getView: function() {
        return Ext.getCmp('wgu-view-view-dlg');
    }

});

</script>

</body>
</html>
</apex:page>